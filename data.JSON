{
  "array": {
    "concat": {
      "explain": "El método concat() se usa para unir dos o más arrays. Este método no cambia los arrays existentes, sino que devuelve un nuevo array.",
      "code": "const array1 = ['a', 'b', 'c'];\nconst array2 = ['d', 'e', 'f'];\nconst array3 = array1.concat(array2);\n\nconsole.log(array3);\n// Expected output: Array [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]' ",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/concat"
    },
    "copywithin": {
      "explain": "El método copyWithin() transfiere una copia plana de una sección a otra dentro del mismo array ( o contexto similar ), sin modificar su propiedad length y lo devuelve.",
      "code": "const array1 = ['a', 'b', 'c', 'd', 'e'];\n\n// Copy to index 0 the element at index 3\nconsole.log(array1.copyWithin(0, 3, 4));\n// Expected output: Array [\"d\", \"b\", \"c\", \"d\", \"e\"]\n\n// Copy to index 1 all elements from index 3 to the end\nconsole.log(array1.copyWithin(1, 3));\n// Expected output: Array [\"d\", \"d\", \"e\", \"d\", \"e\"] ",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin"
    },
    "entries": {
      "explain": "El método entries() retorna un nuevo objeto Array Iterator que contiene los pares clave/valor para cada índice de la matriz.",
      "code": "const array1 = ['a', 'b', 'c'];\n\nconst iterator1 = array1.entries();\n\nconsole.log(iterator1.next().value);\n// Expected output: Array [0, \"a\"]\n\nconsole.log(iterator1.next().value);\n// Expected output: Array [1, \"b\"]",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/entries"
    },
    "every": {
      "explain": "Determina si todos los elementos en el array satisfacen una condición.",
      "code": "const isBelowThreshold = (currentValue) => currentValue < 40;\n\nconst array1 = [1, 30, 39, 29, 10, 13];\n\nconsole.log(array1.every(isBelowThreshold));\n// Expected output: true",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/every"
    },
    "fill": {
      "explain": "El método fill() cambia todos los elementos en un arreglo por un valor estático, desde el índice start (por defecto 0) hasta el índice end (por defecto array.length). Devuelve el arreglo modificado.",
      "code": "const array1 = [1, 2, 3, 4];\n\n// Fill with 0 from position 2 until position 4\nconsole.log(array1.fill(0, 2, 4));\n// Expected output: Array [1, 2, 0, 0]\n\n// Fill with 5 from position 1\nconsole.log(array1.fill(5, 1));\n// Expected output: Array [1, 5, 5, 5]\n\nconsole.log(array1.fill(6));\n// Expected output: Array [6, 6, 6, 6]",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/fill"
    },
    "filter": {
      "explain": "El método filter() crea un nuevo array con todos los elementos que cumplan la condición implementada por la función dada.",
      "code": "const words = ['spray', 'limit', 'elite', 'exuberant', 'destruction', 'present'];\n\nconst result = words.filter(word => word.length > 6);\n\nconsole.log(result);\n// Expected output: Array [\"exuberant\", \"destruction\", \"present\"]",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"
    },
    "find": {
      "explain": "El método find() devuelve el valor del primer elemento del array que cumple la función de prueba proporcionada.",
      "code": "const array1 = [5, 12, 8, 130, 44];\n\nconst found = array1.find(element => element > 10);\n\nconsole.log(found);\n// Expected output: 12",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/find"
    },
    "findindex": {
      "explain": "El método findIndex() devuelve el índice del primer elemento de un array que cumpla con la función de prueba proporcionada. En caso contrario devuelve -1.\n",
      "code": "const array1 = [5, 12, 8, 130, 44];\n\nconst isLargeNumber = (element) => element > 13;\n\nconsole.log(array1.findIndex(isLargeNumber));\n// Expected output: 3",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex"
    },
    "flat": {
      "explain": "El método flat() crea una nueva matriz con todos los elementos de sub-array concatenados recursivamente hasta la profundidad especificada.",
      "code": "var arr1 = [1, 2, [3, 4]];\narr1.flat();\n// [1, 2, 3, 4]\n\nvar arr2 = [1, 2, [3, 4, [5, 6]]];\narr2.flat();\n// [1, 2, 3, 4, [5, 6]]\n\nvar arr3 = [1, 2, [3, 4, [5, 6]]];\narr3.flat(2);\n// [1, 2, 3, 4, 5, 6]",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/flat"
    },
    "flatmap": {
      "explain": "El método flatMap() primero mapea cada elemento usando una función de mapeo, luego aplana el resultado en una nueva matriz. Es idéntico a un map seguido de un flatten (en-US)de profundidad 1, pero flatMap es a menudo útil y la fusión de ambos en un método es ligeramente más eficiente.",
      "code": "const arr1 = [1, 2, [3], [4, 5], 6, []];\n\nconst flattened = arr1.flatMap(num => num);\n\nconsole.log(flattened);\n// Expected output: Array [1, 2, 3, 4, 5, 6]",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap"
    },
    "foreach": {
      "explain": "El método forEach() ejecuta la función indicada una vez por cada elemento del array.",
      "code": "const array1 = ['a', 'b', 'c'];\n\narray1.forEach(element => console.log(element));\n\n// Expected output: \"a\"\n// Expected output: \"b\"\n// Expected output: \"c\"",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach"
    },
    "includes": {
      "explain": "El método includes() determina si una matriz incluye un determinado elemento, devuelve true o false según corresponda.",
      "code": "const array1 = [1, 2, 3];\n\nconsole.log(array1.includes(2));\n// Expected output: true\n\nconst pets = ['cat', 'dog', 'bat'];\n\nconsole.log(pets.includes('cat'));\n// Expected output: true\n\nconsole.log(pets.includes('at'));\n// Expected output: false",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/includes"
    },
    "indexof": {
      "explain": "El método indexOf() retorna el primer índice en el que se puede encontrar un elemento dado en el array, ó retorna -1 si el elemento no esta presente.",
      "code": "var indices = [];\nvar array = ['a', 'b', 'a', 'c', 'a', 'd'];\nvar element = 'a';\nvar idx = array.indexOf(element);\nwhile (idx != -1) {\nindices.push(idx);\nidx = array.indexOf(element, idx + 1);\n}\nconsole.log(indices);\n// [0, 2, 4]",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf"
    },
    "join": {
      "explain": "El método join() une todos los elementos de una matriz (o un objeto similar a una matriz) en una cadena y devuelve esta cadena.",
      "code": "var a = ['Viento', 'Lluvia', 'Fuego'];\nvar miVar1 = a.join();      // asigna 'Viento,Lluvia,Fuego' a miVar1\nvar miVar2 = a.join(', ');  // asigna 'Viento, Lluvia, Fuego' a miVar2\nvar miVar3 = a.join(' + '); // asigna 'Viento + Lluvia + Fuego' a miVar3\nvar miVar4 = a.join('');    // asigna 'VientoLluviaFuego' a miVar4",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/join"
    },
    "keys": {
      "explain": "El método keys() devuelve un nuevo objeto Array Iterator que contiene las claves de índice con las que acceder a cada elemento en el array.\n",
      "code": "const array1 = ['a', 'b', 'c'];\nconst iterator = array1.keys();\n\nfor (const key of iterator) {\nconsole.log(key);\n}\n\n// Expected output: 0\n// Expected output: 1\n// Expected output: 2",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/keys"
    },
    "lastindexof": {
      "explain": "El método lastIndexOf() devuelve el último índice en el que un cierto elemento puede encontrarse en el arreglo, ó -1 si el elemento no se encontrara. El arreglo es recorrido en sentido contrario, empezando por el índice fromIndex.",
      "code": "const animals = ['Dodo', 'Tiger', 'Penguin', 'Dodo'];\n\nconsole.log(animals.lastIndexOf('Dodo'));\n// Expected output: 3\n\nconsole.log(animals.lastIndexOf('Tiger'));\n// Expected output: 1",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf"
    },
    "map": {
      "explain": "El método map() crea un nuevo array con los resultados de la llamada a la función indicada aplicados a cada uno de sus elementos.",
      "code": "var numbers = [1, 5, 10, 15];\nvar doubles = numbers.map(function(x) {\nreturn x * 2;\n});\n// doubles is now [2, 10, 20, 30]\n// numbers is still [1, 5, 10, 15]\n\nvar numbers = [1, 4, 9];\nvar roots = numbers.map(function(num) {\nreturn Math.sqrt(num);\n});\n// roots is now [1, 2, 3]\n// numbers is still [1, 4, 9]",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/map"
    },
    "pop": {
      "explain": "El método pop() elimina el último elemento de un array y lo devuelve. Este método cambia la longitud del array.",
      "code": "const plants = ['broccoli', 'cauliflower', 'cabbage', 'kale', 'tomato'];\n\nconsole.log(plants.pop());\n// Expected output: \"tomato\"\n\nconsole.log(plants);\n// Expected output: Array [\"broccoli\", \"cauliflower\", \"cabbage\", \"kale\"]\n\nplants.pop();\n\nconsole.log(plants);\n// Expected output: Array [\"broccoli\", \"cauliflower\", \"cabbage\"]",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/pop"
    },
    "push": {
      "explain": "El método push() añade uno o más elementos al final de un array y devuelve la nueva longitud del array.",
      "code": "const animals = ['pigs', 'goats', 'sheep'];\n\nconst count = animals.push('cows');\nconsole.log(count);\n// Expected output: 4\nconsole.log(animals);\n// Expected output: Array [\"pigs\", \"goats\", \"sheep\", \"cows\"]\n\nanimals.push('chickens', 'cats', 'dogs');\nconsole.log(animals);\n// Expected output: Array [\"pigs\", \"goats\", \"sheep\", \"cows\", \"chickens\", \"cats\", \"dogs\"]",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/push"
    },
    "reduce": {
      "explain": "El método reduce() ejecuta una función reductora sobre cada elemento de un array, devolviendo como resultado un único valor.\n",
      "code": "const array1 = [1, 2, 3, 4];\n\n// 0 + 1 + 2 + 3 + 4\nconst initialValue = 0;\nconst sumWithInitial = array1.reduce(\n(accumulator, currentValue) => accumulator + currentValue,\ninitialValue\n);\n\nconsole.log(sumWithInitial);\n// Expected output: 10",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce"
    },
    "reduceright": {
      "explain": "Aplica una función simultáneamente contra un acumulador y cada elemento de un array (de derecha a izquierda) para reducirlo a un único valor.",
      "code": "[0,1,2,3,4].reduceRight(function(valorPrevio, valorActual, indice, array){\nreturn valorPrevio + valorActual;\n});\n\n// First call\nvalorPrevio = 4, valorActual = 3, indice = 3\n\n// Second call\nvalorPrevio = 7, valorActual = 2, indice = 2\n\n// Third call\nvalorPrevio = 9, valorActual = 1, indice = 1\n\n// Fourth call\nvalorPrevio = 10, valorActual = 0, indice = 0\n\n// el array sobre el que se llama a reduceRight siempre es el objeto [0,1,2,3,4]\n\n// Valor Devuelto: 10",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/ReduceRight"
    },
    "reverse": {
      "explain": "El método reverse() invierte el orden de los elementos de un array in place. El primer elemento pasa a ser el último y el último pasa a ser el primero.\n",
      "code": "const array1 = ['one', 'two', 'three'];\nconsole.log('array1:', array1);\n// Expected output: \"array1:\" Array [\"one\", \"two\", \"three\"]\n\nconst reversed = array1.reverse();\nconsole.log('reversed:', reversed);\n// Expected output: \"reversed:\" Array [\"three\", \"two\", \"one\"]\n\n// Careful: reverse is destructive -- it changes the original array.\nconsole.log('array1:', array1);\n// Expected output: \"array1:\" Array [\"three\", \"two\", \"one\"]",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse"
    },
    "shift": {
      "explain": "El método shift() elimina el primer elemento del array y lo retorna. Este método modifica la longitud del array.",
      "code": "var miPescado = ['ángel', 'payaso', 'mandarín', 'cirujano'];\n\nconsole.log('miPescado antes: ' + miPescado);\n// \"miPescado antes: ángel,payaso,mandarín,cirujano\"\n\nvar eliminado = miPescado.shift();\n\nconsole.log('miPescado después: ' + miPescado);\n// \"miPescado after: payaso,mandarín,cirujano\"\n\nconsole.log('Elemento eliminado: ' + eliminado);\n// \"Elemento eliminado: ángel\"",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/shift"
    },
    "slice": {
      "explain": "El método slice() devuelve una copia de una parte del array dentro de un nuevo array empezando por inicio hasta fin (fin no incluido). El array original no se modificará.\n",
      "code": "var nombres = ['Rita', 'Pedro', 'Miguel', 'Ana', 'Vanesa'];\nvar masculinos = nombres.slice(1, 3);\n\n// masculinos contiene ['Pedro','Miguel']",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/slice"
    },
    "some": {
      "explain": "El método some() comprueba si al menos un elemento del array cumple con la condición implementada por la función proporcionada.",
      "code": "const array = [1, 2, 3, 4, 5];\n\n// Checks whether an element is even\nconst even = (element) => element % 2 === 0;\n\nconsole.log(array.some(even));\n// Expected output: true",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/some"
    },
    "sort": {
      "explain": "El método sort() ordena los elementos de un arreglo (array) localmente y devuelve el arreglo ordenado. La ordenación no es necesariamente estable. El modo de ordenación por defecto responde a la posición del valor del string de acuerdo a su valor Unicode.",
      "code": "var frutas = ['guindas', 'manzanas', 'bananas'];\nfrutas.sort(); // ['bananas', 'guindas', 'manzanas']\n\nvar puntos = [1, 10, 2, 21];\npuntos.sort(); // [1, 10, 2, 21]\n// Tenga en cuenta que 10 viene antes que 2\n// porque '10' viene antes que '2' según la posición del valor Unicode.\n\nvar cosas = ['word', 'Word', '1 Word', '2 Words'];\ncosas.sort(); // ['1 Word', '2 Words', 'Word', 'word']\n// En Unicode, los números vienen antes que las letras mayúsculas\n// y estas vienen antes que las letras minúsculas.",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/sort"
    },
    "splice": {
      "explain": "El método splice() cambia el contenido de un array eliminando elementos existentes y/o agregando nuevos elementos.",
      "code": "const months = ['Jan', 'March', 'April', 'June'];\nmonths.splice(1, 0, 'Feb');\n// Inserts at index 1\nconsole.log(months);\n// Expected output: Array [\"Jan\", \"Feb\", \"March\", \"April\", \"June\"]\n\nmonths.splice(4, 1, 'May');\n// Replaces 1 element at index 4\nconsole.log(months);\n// Expected output: Array [\"Jan\", \"Feb\", \"March\", \"April\", \"May\"]",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/splice"
    },
    "tolocalestring": {
      "explain": "El método toLocaleString() devuelve una cadena de texto representando los elementos del array. Los elementos son convertidos a texto usando su método toLocaleString y dichos Strings son separados por un caracter específico para la localidad (como una coma para la separación de decimales “,”).\n",
      "code": "const array1 = [1, 'a', new Date('21 Dec 1997 14:12:00 UTC')];\nconst localeString = array1.toLocaleString('en', { timeZone: 'UTC' });\n\nconsole.log(localeString);\n// Expected output: \"1,a,12/21/1997, 2:12:00 PM\",\n// This assumes \"en\" locale and UTC timezone - your results may vary",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString"
    },
    "tostring": {
      "explain": "El método toString() devuelve una cadena de caracteres representando el array especificado y sus elementos.",
      "code": "const array1 = [1, 2, 'a', '1a'];\n\nconsole.log(array1.toString());\n// Expected output: \"1,2,a,1a\"",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/toString"
    },
    "unshift": {
      "explain": "El método unshift() agrega uno o más elementos al inicio del array, y devuelve la nueva longitud del array.",
      "code": "const array1 = [1, 2, 3];\n\nconsole.log(array1.unshift(4, 5));\n// Expected output: 5\n\nconsole.log(array1);\n// Expected output: Array [4, 5, 1, 2, 3]",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift"
    },
    "values": {
      "explain": "El método values() devuelve un nuevo objeto Array Iterator que contiene los valores para cada índice del array.",
      "code": "var a = ['w', 'y', 'k', 'o', 'p'];\nvar iterator = a.values();\n\nconsole.log(iterator.next().value); // w\nconsole.log(iterator.next().value); // y\nconsole.log(iterator.next().value); // k\nconsole.log(iterator.next().value); // o\nconsole.log(iterator.next().value); // p",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/values"
    }
  }
}