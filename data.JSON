{
  "array": {
    "concat": {
      "explain": "El método concat() se usa para unir dos o más arrays. Este método no cambia los arrays existentes, sino que devuelve un nuevo array.",
      "code": "const array1 = ['a', 'b', 'c'];\nconst array2 = ['d', 'e', 'f'];\nconst array3 = array1.concat(array2);\n\nconsole.log(array3);\n// Expected output: Array [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]' ",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/concat"
    },
    "copywithin": {
      "explain": "El método copyWithin() transfiere una copia plana de una sección a otra dentro del mismo array ( o contexto similar ), sin modificar su propiedad length y lo devuelve.",
      "code": "const array1 = ['a', 'b', 'c', 'd', 'e'];\n\n// Copy to index 0 the element at index 3\nconsole.log(array1.copyWithin(0, 3, 4));\n// Expected output: Array [\"d\", \"b\", \"c\", \"d\", \"e\"]\n\n// Copy to index 1 all elements from index 3 to the end\nconsole.log(array1.copyWithin(1, 3));\n// Expected output: Array [\"d\", \"d\", \"e\", \"d\", \"e\"] ",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin"
    },
    "entries": {
      "explain": "El método entries() retorna un nuevo objeto Array Iterator que contiene los pares clave/valor para cada índice de la matriz.",
      "code": "const array1 = ['a', 'b', 'c'];\n\nconst iterator1 = array1.entries();\n\nconsole.log(iterator1.next().value);\n// Expected output: Array [0, \"a\"]\n\nconsole.log(iterator1.next().value);\n// Expected output: Array [1, \"b\"]",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/entries"
    },
    "every": {
      "explain": "Determina si todos los elementos en el array satisfacen una condición.",
      "code": "const isBelowThreshold = (currentValue) => currentValue < 40;\n\nconst array1 = [1, 30, 39, 29, 10, 13];\n\nconsole.log(array1.every(isBelowThreshold));\n// Expected output: true",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/every"
    },
    "fill": {
      "explain": "El método fill() cambia todos los elementos en un arreglo por un valor estático, desde el índice start (por defecto 0) hasta el índice end (por defecto array.length). Devuelve el arreglo modificado.",
      "code": "const array1 = [1, 2, 3, 4];\n\n// Fill with 0 from position 2 until position 4\nconsole.log(array1.fill(0, 2, 4));\n// Expected output: Array [1, 2, 0, 0]\n\n// Fill with 5 from position 1\nconsole.log(array1.fill(5, 1));\n// Expected output: Array [1, 5, 5, 5]\n\nconsole.log(array1.fill(6));\n// Expected output: Array [6, 6, 6, 6]",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/fill"
    },
    "filter": {
      "explain": "El método filter() crea un nuevo array con todos los elementos que cumplan la condición implementada por la función dada.",
      "code": "const words = ['spray', 'limit', 'elite', 'exuberant', 'destruction', 'present'];\n\nconst result = words.filter(word => word.length > 6);\n\nconsole.log(result);\n// Expected output: Array [\"exuberant\", \"destruction\", \"present\"]",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"
    },
    "find": {
      "explain": "El método find() devuelve el valor del primer elemento del array que cumple la función de prueba proporcionada.",
      "code": "const array1 = [5, 12, 8, 130, 44];\n\nconst found = array1.find(element => element > 10);\n\nconsole.log(found);\n// Expected output: 12",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/find"
    },
    "findindex": {
      "explain": "El método findIndex() devuelve el índice del primer elemento de un array que cumpla con la función de prueba proporcionada. En caso contrario devuelve -1.\n",
      "code": "const array1 = [5, 12, 8, 130, 44];\n\nconst isLargeNumber = (element) => element > 13;\n\nconsole.log(array1.findIndex(isLargeNumber));\n// Expected output: 3",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex"
    },
    "flat": {
      "explain": "El método flat() crea una nueva matriz con todos los elementos de sub-array concatenados recursivamente hasta la profundidad especificada.",
      "code": "var arr1 = [1, 2, [3, 4]];\narr1.flat();\n// [1, 2, 3, 4]\n\nvar arr2 = [1, 2, [3, 4, [5, 6]]];\narr2.flat();\n// [1, 2, 3, 4, [5, 6]]\n\nvar arr3 = [1, 2, [3, 4, [5, 6]]];\narr3.flat(2);\n// [1, 2, 3, 4, 5, 6]",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/flat"
    },
    "flatmap": {
      "explain": "El método flatMap() primero mapea cada elemento usando una función de mapeo, luego aplana el resultado en una nueva matriz. Es idéntico a un map seguido de un flatten (en-US)de profundidad 1, pero flatMap es a menudo útil y la fusión de ambos en un método es ligeramente más eficiente.",
      "code": "const arr1 = [1, 2, [3], [4, 5], 6, []];\n\nconst flattened = arr1.flatMap(num => num);\n\nconsole.log(flattened);\n// Expected output: Array [1, 2, 3, 4, 5, 6]",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap"
    },
    "foreach": {
      "explain": "El método forEach() ejecuta la función indicada una vez por cada elemento del array.",
      "code": "const array1 = ['a', 'b', 'c'];\n\narray1.forEach(element => console.log(element));\n\n// Expected output: \"a\"\n// Expected output: \"b\"\n// Expected output: \"c\"",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach"
    },
    "includes": {
      "explain": "El método includes() determina si una matriz incluye un determinado elemento, devuelve true o false según corresponda.",
      "code": "const array1 = [1, 2, 3];\n\nconsole.log(array1.includes(2));\n// Expected output: true\n\nconst pets = ['cat', 'dog', 'bat'];\n\nconsole.log(pets.includes('cat'));\n// Expected output: true\n\nconsole.log(pets.includes('at'));\n// Expected output: false",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/includes"
    },
    "indexof": {
      "explain": "El método indexOf() retorna el primer índice en el que se puede encontrar un elemento dado en el array, ó retorna -1 si el elemento no esta presente.",
      "code": "var indices = [];\nvar array = ['a', 'b', 'a', 'c', 'a', 'd'];\nvar element = 'a';\nvar idx = array.indexOf(element);\nwhile (idx != -1) {\nindices.push(idx);\nidx = array.indexOf(element, idx + 1);\n}\nconsole.log(indices);\n// [0, 2, 4]",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf"
    },
    "join": {
      "explain": "El método join() une todos los elementos de una matriz (o un objeto similar a una matriz) en una cadena y devuelve esta cadena.",
      "code": "var a = ['Viento', 'Lluvia', 'Fuego'];\nvar miVar1 = a.join();      // asigna 'Viento,Lluvia,Fuego' a miVar1\nvar miVar2 = a.join(', ');  // asigna 'Viento, Lluvia, Fuego' a miVar2\nvar miVar3 = a.join(' + '); // asigna 'Viento + Lluvia + Fuego' a miVar3\nvar miVar4 = a.join('');    // asigna 'VientoLluviaFuego' a miVar4",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/join"
    },
    "keys": {
      "explain": "El método keys() devuelve un nuevo objeto Array Iterator que contiene las claves de índice con las que acceder a cada elemento en el array.\n",
      "code": "const array1 = ['a', 'b', 'c'];\nconst iterator = array1.keys();\n\nfor (const key of iterator) {\nconsole.log(key);\n}\n\n// Expected output: 0\n// Expected output: 1\n// Expected output: 2",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/keys"
    },
    "lastindexof": {
      "explain": "El método lastIndexOf() devuelve el último índice en el que un cierto elemento puede encontrarse en el arreglo, ó -1 si el elemento no se encontrara. El arreglo es recorrido en sentido contrario, empezando por el índice fromIndex.",
      "code": "const animals = ['Dodo', 'Tiger', 'Penguin', 'Dodo'];\n\nconsole.log(animals.lastIndexOf('Dodo'));\n// Expected output: 3\n\nconsole.log(animals.lastIndexOf('Tiger'));\n// Expected output: 1",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf"
    },
    "map": {
      "explain": "El método map() crea un nuevo array con los resultados de la llamada a la función indicada aplicados a cada uno de sus elementos.",
      "code": "var numbers = [1, 5, 10, 15];\nvar doubles = numbers.map(function(x) {\nreturn x * 2;\n});\n// doubles is now [2, 10, 20, 30]\n// numbers is still [1, 5, 10, 15]\n\nvar numbers = [1, 4, 9];\nvar roots = numbers.map(function(num) {\nreturn Math.sqrt(num);\n});\n// roots is now [1, 2, 3]\n// numbers is still [1, 4, 9]",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/map"
    },
    "pop": {
      "explain": "El método pop() elimina el último elemento de un array y lo devuelve. Este método cambia la longitud del array.",
      "code": "const plants = ['broccoli', 'cauliflower', 'cabbage', 'kale', 'tomato'];\n\nconsole.log(plants.pop());\n// Expected output: \"tomato\"\n\nconsole.log(plants);\n// Expected output: Array [\"broccoli\", \"cauliflower\", \"cabbage\", \"kale\"]\n\nplants.pop();\n\nconsole.log(plants);\n// Expected output: Array [\"broccoli\", \"cauliflower\", \"cabbage\"]",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/pop"
    },
    "push": {
      "explain": "El método push() añade uno o más elementos al final de un array y devuelve la nueva longitud del array.",
      "code": "const animals = ['pigs', 'goats', 'sheep'];\n\nconst count = animals.push('cows');\nconsole.log(count);\n// Expected output: 4\nconsole.log(animals);\n// Expected output: Array [\"pigs\", \"goats\", \"sheep\", \"cows\"]\n\nanimals.push('chickens', 'cats', 'dogs');\nconsole.log(animals);\n// Expected output: Array [\"pigs\", \"goats\", \"sheep\", \"cows\", \"chickens\", \"cats\", \"dogs\"]",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/push"
    },
    "reduce": {
      "explain": "El método reduce() ejecuta una función reductora sobre cada elemento de un array, devolviendo como resultado un único valor.\n",
      "code": "const array1 = [1, 2, 3, 4];\n\n// 0 + 1 + 2 + 3 + 4\nconst initialValue = 0;\nconst sumWithInitial = array1.reduce(\n(accumulator, currentValue) => accumulator + currentValue,\ninitialValue\n);\n\nconsole.log(sumWithInitial);\n// Expected output: 10",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce"
    },
    "reduceright": {
      "explain": "Aplica una función simultáneamente contra un acumulador y cada elemento de un array (de derecha a izquierda) para reducirlo a un único valor.",
      "code": "[0,1,2,3,4].reduceRight(function(valorPrevio, valorActual, indice, array){\nreturn valorPrevio + valorActual;\n});\n\n// First call\nvalorPrevio = 4, valorActual = 3, indice = 3\n\n// Second call\nvalorPrevio = 7, valorActual = 2, indice = 2\n\n// Third call\nvalorPrevio = 9, valorActual = 1, indice = 1\n\n// Fourth call\nvalorPrevio = 10, valorActual = 0, indice = 0\n\n// el array sobre el que se llama a reduceRight siempre es el objeto [0,1,2,3,4]\n\n// Valor Devuelto: 10",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/ReduceRight"
    },
    "reverse": {
      "explain": "El método reverse() invierte el orden de los elementos de un array in place. El primer elemento pasa a ser el último y el último pasa a ser el primero.\n",
      "code": "const array1 = ['one', 'two', 'three'];\nconsole.log('array1:', array1);\n// Expected output: \"array1:\" Array [\"one\", \"two\", \"three\"]\n\nconst reversed = array1.reverse();\nconsole.log('reversed:', reversed);\n// Expected output: \"reversed:\" Array [\"three\", \"two\", \"one\"]\n\n// Careful: reverse is destructive -- it changes the original array.\nconsole.log('array1:', array1);\n// Expected output: \"array1:\" Array [\"three\", \"two\", \"one\"]",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse"
    },
    "shift": {
      "explain": "El método shift() elimina el primer elemento del array y lo retorna. Este método modifica la longitud del array.",
      "code": "var miPescado = ['ángel', 'payaso', 'mandarín', 'cirujano'];\n\nconsole.log('miPescado antes: ' + miPescado);\n// \"miPescado antes: ángel,payaso,mandarín,cirujano\"\n\nvar eliminado = miPescado.shift();\n\nconsole.log('miPescado después: ' + miPescado);\n// \"miPescado after: payaso,mandarín,cirujano\"\n\nconsole.log('Elemento eliminado: ' + eliminado);\n// \"Elemento eliminado: ángel\"",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/shift"
    },
    "slice": {
      "explain": "El método slice() devuelve una copia de una parte del array dentro de un nuevo array empezando por inicio hasta fin (fin no incluido). El array original no se modificará.\n",
      "code": "var nombres = ['Rita', 'Pedro', 'Miguel', 'Ana', 'Vanesa'];\nvar masculinos = nombres.slice(1, 3);\n\n// masculinos contiene ['Pedro','Miguel']",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/slice"
    },
    "some": {
      "explain": "El método some() comprueba si al menos un elemento del array cumple con la condición implementada por la función proporcionada.",
      "code": "const array = [1, 2, 3, 4, 5];\n\n// Checks whether an element is even\nconst even = (element) => element % 2 === 0;\n\nconsole.log(array.some(even));\n// Expected output: true",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/some"
    },
    "sort": {
      "explain": "El método sort() ordena los elementos de un arreglo (array) localmente y devuelve el arreglo ordenado. La ordenación no es necesariamente estable. El modo de ordenación por defecto responde a la posición del valor del string de acuerdo a su valor Unicode.",
      "code": "var frutas = ['guindas', 'manzanas', 'bananas'];\nfrutas.sort(); // ['bananas', 'guindas', 'manzanas']\n\nvar puntos = [1, 10, 2, 21];\npuntos.sort(); // [1, 10, 2, 21]\n// Tenga en cuenta que 10 viene antes que 2\n// porque '10' viene antes que '2' según la posición del valor Unicode.\n\nvar cosas = ['word', 'Word', '1 Word', '2 Words'];\ncosas.sort(); // ['1 Word', '2 Words', 'Word', 'word']\n// En Unicode, los números vienen antes que las letras mayúsculas\n// y estas vienen antes que las letras minúsculas.",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/sort"
    },
    "splice": {
      "explain": "El método splice() cambia el contenido de un array eliminando elementos existentes y/o agregando nuevos elementos.",
      "code": "const months = ['Jan', 'March', 'April', 'June'];\nmonths.splice(1, 0, 'Feb');\n// Inserts at index 1\nconsole.log(months);\n// Expected output: Array [\"Jan\", \"Feb\", \"March\", \"April\", \"June\"]\n\nmonths.splice(4, 1, 'May');\n// Replaces 1 element at index 4\nconsole.log(months);\n// Expected output: Array [\"Jan\", \"Feb\", \"March\", \"April\", \"May\"]",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/splice"
    },
    "tolocalestring": {
      "explain": "El método toLocaleString() devuelve una cadena de texto representando los elementos del array. Los elementos son convertidos a texto usando su método toLocaleString y dichos Strings son separados por un caracter específico para la localidad (como una coma para la separación de decimales “,”).\n",
      "code": "const array1 = [1, 'a', new Date('21 Dec 1997 14:12:00 UTC')];\nconst localeString = array1.toLocaleString('en', { timeZone: 'UTC' });\n\nconsole.log(localeString);\n// Expected output: \"1,a,12/21/1997, 2:12:00 PM\",\n// This assumes \"en\" locale and UTC timezone - your results may vary",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString"
    },
    "tostring": {
      "explain": "El método toString() devuelve una cadena de caracteres representando el array especificado y sus elementos.",
      "code": "const array1 = [1, 2, 'a', '1a'];\n\nconsole.log(array1.toString());\n// Expected output: \"1,2,a,1a\"",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/toString"
    },
    "unshift": {
      "explain": "El método unshift() agrega uno o más elementos al inicio del array, y devuelve la nueva longitud del array.",
      "code": "const array1 = [1, 2, 3];\n\nconsole.log(array1.unshift(4, 5));\n// Expected output: 5\n\nconsole.log(array1);\n// Expected output: Array [4, 5, 1, 2, 3]",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift"
    },
    "values": {
      "explain": "El método values() devuelve un nuevo objeto Array Iterator que contiene los valores para cada índice del array.",
      "code": "var a = ['w', 'y', 'k', 'o', 'p'];\nvar iterator = a.values();\n\nconsole.log(iterator.next().value); // w\nconsole.log(iterator.next().value); // y\nconsole.log(iterator.next().value); // k\nconsole.log(iterator.next().value); // o\nconsole.log(iterator.next().value); // p",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/values"
    }
  },
  "string": {
    "charat": {
      "explain": "El método charAt() de String devuelve en un nuevo String el carácter UTF-16 de una cadena.",
      "code": "var cualquierCadena=\"Brave new world\";\n\nconsole.log(\"El carácter en el índice 0 es '\" + cualquierCadena.charAt(0) + \"'\")\nconsole.log(\"El carácter en el índice 1 es '\" + cualquierCadena.charAt(1) + \"'\")\nconsole.log(\"El carácter en el índice 2 es '\" + cualquierCadena.charAt(2) + \"'\")\nconsole.log(\"El carácter en el índice 3 es '\" + cualquierCadena.charAt(3) + \"'\")\nconsole.log(\"El carácter en el índice 4 es '\" + cualquierCadena.charAt(4) + \"'\")\nconsole.log(\"El carácter en el índice 999 es '\" + cualquierCadena.charAt(999) + \"'\")\n\nEl carácter en el índice 0 es 'B'\nEl carácter en el índice 1 es 'r'\nEl carácter en el índice 2 es 'a'\nEl carácter en el índice 3 es 'v'\nEl carácter en el índice 4 es 'e'\nEl carácter en el índice 999 es ''",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/charAt"
    },
    "charcodeat": {
      "explain": "El charCodeAt() método devuelve un número indicando el valor Unicode del carácter en el índice proporcionado.",
      "code": "\"ABC\".charCodeAt(0) // returns 65",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt"
    },
    "concat": {
      "explain": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt",
      "code": "const str1 = 'Hello';\nconst str2 = 'World';\n\nconsole.log(str1.concat(' ', str2));\n// Expected output: \"Hello World\"\n\nconsole.log(str2.concat(', ', str1));\n// Expected output: \"World, Hello\"",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/concat"
    },
    "endswith": {
      "explain": "El método endsWith() determina si una cadena de texto termina con los caracteres de una cadena indicada, devolviendo true o false según corresponda.",
      "code": "const str1 = 'Cats are the best!';\n\nconsole.log(str1.endsWith('best!'));\n// Expected output: true\n\nconsole.log(str1.endsWith('best', 17));\n// Expected output: true\n\nconst str2 = 'Is this a question?';\n\nconsole.log(str2.endsWith('question'));\n// Expected output: false",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith"
    },
    "inlcudes": {
      "explain": "El método includes() determina si una cadena de texto puede ser encontrada dentro de otra cadena de texto, devolviendo true o false según corresponda.",
      "code": "const sentence = 'The quick brown fox jumps over the lazy dog.';\n\nconst word = 'fox';\n\nconsole.log(`The word \"${word}\" ${sentence.includes(word) ? 'is' : 'is not'} in the sentence`);\n// Expected output: \"The word \"fox\" is in the sentence\"",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/includes"
    },
    "indexof": {
      "explain": "El método indexOf() devuelve el índice, dentro del objeto String que realiza la llamada, de la primera ocurrencia del valor especificado, comenzando la búsqueda desde indiceDesde; o -1 si no se encuentra dicho valor.",
      "code": "\"Blue Whale\".indexOf(\"Blue\")    // returns 0\n\"Blue Whale\".indexOf(\"Blute\")   // returns -1\n\"Blue Whale\".indexOf(\"Whale\",0) // returns 5\n\"Blue Whale\".indexOf(\"Whale\",5) // returns 5\n\"Blue Whale\".indexOf(\"\",9)      // returns 9\n\"Blue Whale\".indexOf(\"\",10)     // returns 10\n\"Blue Whale\".indexOf(\"\",11)     // returns 10",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf"
    },
    "lastindexof": {
      "explain": "El método lastIndexOf() devuelve la posicion (indice) en la que se encuentra el valorBusqueda, dentro del objeto String que realiza la llamada, de la última ocurrencia del valor especificado; o -1 si no se halla. La búsqueda se realiza empezando por el final de la cadena que realiza la llamada, empezando en indiceDesde.\n",
      "code": "\"canal\".lastIndexOf(\"a\")   // returns 3\n\"canal\".lastIndexOf(\"a\",2) // returns 1\n\"canal\".lastIndexOf(\"a\",0) // returns -1\n\"canal\".lastIndexOf(\"x\")   // returns -1",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf"
    },
    "localecompare": {
      "explain": "El método localeCompare() retorna un número indicando si una cadena de carateres de referencia va antes, después o si es la misma que la cadena dada en orden alfabético.",
      "code": "const a = 'réservé'; // With accents, lowercase\nconst b = 'RESERVE'; // No accents, uppercase\n\nconsole.log(a.localeCompare(b));\n// Expected output: 1\nconsole.log(a.localeCompare(b, 'en', { sensitivity: 'base' }));\n// Expected output: 0",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare"
    },
    "match": {
      "explain": "El método match() devuelve todas las ocurrencias de una expresión regular dentro de una cadena.",
      "code": "const paragraph = 'The quick brown fox jumps over the lazy dog. It barked.';\nconst regex = /[A-Z]/g;\nconst found = paragraph.match(regex);\n\nconsole.log(found);\n// Expected output: Array [\"T\", \"I\"]",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/match"
    },
    "normalize": {
      "explain": "El método normalize() retorna la Forma de Normalización Unicode de la cadena dada (si el valor no es una cadena, primero será convertido a ese tipo).",
      "code": "// Cadena inicial\n\n// U+1E9B: LETRA S LATINA MINÚSCULA CON PUNTO ARRIBA\n// U+0323: COMBINACIÓN CON PUNTO ABAJO\nvar str = '\\u1E9B\\u0323';\n\n\n// Forma compuesta canónicamente (NFC)\n\n// U+1E9B: LETRA S LATINA MINÚSCULA CON PUNTO ARRIBA\n// U+0323: COMBINACIÓN CON PUNTO ABAJO\nstr.normalize('NFC'); // '\\u1E9B\\u0323'\nstr.normalize();      // lo mismo que arriba\n\n\n// Forma canónicamente descompuesta (NFD)\n\n// U+017F: LETRA S LATINA MINÚSCULA\n// U+0323: COMBINACIÓN CON PUNTO ABAJO\n// U+0307: COMBINACIÓN CON PUNTO ARRIBA\nstr.normalize('NFD'); // '\\u017F\\u0323\\u0307'\n\n\n// Compuesta con compatibilidad (NFKC)\n\n// U+1E69: LETRA S LATINA MINÚSCULA CON PUNTO ARRIBA Y ABAJO\nstr.normalize('NFKC'); // '\\u1E69'\n\n\n// Descompuesta con compatibilidad (NFKD)\n\n// U+0073: LETRA S LATINA MINÚSCULA\n// U+0323: COMBINACIÓN CON PUNTO ABAJO\n// U+0307: COMBINACIÓN CON PUNTO ARRIBA\nstr.normalize('NFKD'); // '\\u0073\\u0323\\u0307'",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/normalize"
    },
    "padend": {
      "explain": "The padEnd() method pads the current string with a given string (repeated, if needed) so that the resulting string reaches a given length. The padding is applied from the end of the current string.",
      "code": "const str1 = 'Breaded Mushrooms';\n\nconsole.log(str1.padEnd(25, '.'));\n// Expected output: \"Breaded Mushrooms........\"\n\nconst str2 = '200';\n\nconsole.log(str2.padEnd(5));\n// Expected output: \"200  \"",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd"
    },
    "padstart": {
      "explain": "The padStart() method pads the current string with another string (multiple times, if needed) until the resulting string reaches the given length. The padding is applied from the start of the current string.",
      "code": "const str1 = '5';\n\nconsole.log(str1.padStart(2, '0'));\n// Expected output: \"05\"\n\nconst fullNumber = '2034399002125581';\nconst last4Digits = fullNumber.slice(-4);\nconst maskedNumber = last4Digits.padStart(fullNumber.length, '*');\n\nconsole.log(maskedNumber);\n// Expected output: \"************5581\"",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart"
    },
    "repeat": {
      "explain": "El método repeat() construye y devuelve una nueva cadena que contiene el número especificado de copias de la cadena en la cual fue llamada, concatenados.",
      "code": "'abc'.repeat(-1);   // RangeError\n'abc'.repeat(0);    // ''\n'abc'.repeat(1);    // 'abc'\n'abc'.repeat(2);    // 'abcabc'\n'abc'.repeat(3.5);  // 'abcabcabc' (count will be converted to integer)\n'abc'.repeat(1/0);  // RangeError\n\n({ toString: () => 'abc', repeat: String.prototype.repeat }).repeat(2);\n// 'abcabc' (repeat() is a generic method)",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/repeat"
    },
    "replace": {
      "explain": "El método replace() devuelve una nueva cadena con algunas o todas las coincidencias de un patrón, siendo cada una de estas coincidencias reemplazadas por remplazo. El patrón puede ser una cadena o una RegExp, y el reemplazo puede ser una cadena o una función que será llamada para cada coincidencia. Si el patrón es una cadena, sólo la primera coincidencia será reemplazada.",
      "code": "const p = 'The quick brown fox jumps over the lazy dog. If the dog reacted, was it really lazy?';\n\nconsole.log(p.replace('dog', 'monkey'));\n// Expected output: \"The quick brown fox jumps over the lazy monkey. If the dog reacted, was it really lazy?\"\n\n\nconst regex = /Dog/i;\nconsole.log(p.replace(regex, 'ferret'));\n// Expected output: \"The quick brown fox jumps over the lazy ferret. If the dog reacted, was it really lazy?\""
    },
    "search": {
      "explain": "El método search() ejecuta una búsqueda que encaje entre una expresión regular y el objeto String desde el que se llama.",
      "code": "function testinput(re, str) {\nvar midstring;\nif (str.search(re) != -1) {\nmidstring = ' contains ';\n} else {\nmidstring = ' does not contain ';\n}\nconsole.log(str + midstring + re);\n}",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/search"
    },
    "slice": {
      "explain": "El método slice() extrae una sección de una cadena y devuelve una cadena nueva.",
      "code": "var cadena1 = \"La mañana se nos echa encima.\";\nvar cadena2 = cadena1.slice(3, -2);\nconsole.log(cadena2);\n\nEsto escribe:\n\nmañana se nos echa encim",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/slice"
    },
    "split": {
      "explain": "El método split() divide un objeto de tipo String en un array (vector) de cadenas mediante la separación de la cadena en subcadenas.\n",
      "code": "function dividirCadena(cadenaADividir,separador) {\nvar arrayDeCadenas = cadenaADividir.split(separador);\ndocument.write('<p>La cadena original es: \"' + cadenaADividir + '\"');\ndocument.write('<br>El separador es: \"' + separador + '\"');\ndocument.write(\"<br>El array tiene \" + arrayDeCadenas.length + \" elementos: \");\n\nfor (var i=0; i < arrayDeCadenas.length; i++) {\n document.write(arrayDeCadenas[i] + \" / \");\n}\n}\n\nvar cadenaVerso = \"Oh brave new world that has such people in it.\";\nvar cadenaMeses = \"Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec\";\n\nvar espacio = \" \";\nvar coma = \",\";\n\ndividirCadena(cadenaVerso, espacio);\ndividirCadena(cadenaVerso);\ndividirCadena(cadenaMeses, coma);\n\nEste ejemplo produce el siguiente resultado:\n\nLa cadena original es: \"Oh brave new world that has such people in it.\"\nEl separador es: \" \"\nEl array tiene 10 elementos: Oh / brave / new / world / that / has / such / people / in / it. /\n\nLa cadena original es: \"Oh brave new world that has such people in it.\"\nEl separador es: \"undefined\"\nEl array tiene 1 elementos: Oh brave new world that has such people in it. /\n\nLa cadena original es: \"Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec\"\nEl separador es: \",\"\nEl array tiene 12 elementos: Jan / Feb / Mar / Apr / May / Jun / Jul / Aug / Sep / Oct / Nov / Dec /",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/split"
    },
    "startswith": {
      "explain": "El método startsWith() indica si una cadena de texto comienza con los caracteres de una cadena de texto concreta, devolviendo true o false según corresponda.",
      "code": "const str1 = 'Saturday night plans';\n\nconsole.log(str1.startsWith('Sat'));\n// Expected output: true\n\nconsole.log(str1.startsWith('Sat', 3));\n// Expected output: false",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith"
    },
    "substr": {
      "explain": "El método substr() devuelve los caracteres de una cadena que comienzan en una localización especificada y de acuerdo al número de caracteres que se especifiquen.",
      "code": "Advertencia: Advertencia: Aunque String.prototype.substr(…) no está estrictamente obsoleto (como en \"eliminado de los estándares web\"), se define en el anexo B de la norma ECMA-262, cuya introducción establece:\n\n... Todas las características y comportamientos del lenguaje especificados en este anexo tienen una o más características indeseables y, en ausencia de uso heredado, se eliminarían de esta especificación. ... ... Los programadores no deben usar ni asumir la existencia de estas características y comportamientos al escribir un nuevo código ECMAScript.",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/substr"
    },
    "substring": {
      "explain": "El substring() método devuelve un subconjunto de un objeto String.",
      "code": "// asume una función print ya definida\nvar cualquierCadena = \"Mozilla\";\n\n// Muestra \"Moz\"\nprint(cualquierCadena.substring(0,3));\nprint(cualquierCadena.substring(3,0));\n\n// Muestra \"lla\"\nprint(cualquierCadena.substring(4,7));\nprint(cualquierCadena.substring(7,4));\n\n// Muestra \"Mozill\"\nprint(cualquierCadena.substring(0,6));\nprint(cualquierCadena.substring(6,0));\n\n// Muestra \"Mozilla\"\nprint(cualquierCadena.substring(0,7));\nprint(cualquierCadena.substring(0,10));",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/substring"
    },
    "tolocalelowercase": {
      "explain": "El método toLocaleLowerCase() retorna la cadena de texto desde la que se llama convertida en minúsculas, de acuerdo con cualquier localización específica de correspondencia de mayúsculas y minúsculas.",
      "code": "const dotted = 'İstanbul';\n\nconsole.log(`EN-US: ${dotted.toLocaleLowerCase('en-US')}`);\n// Expected output: \"i̇stanbul\"\n\nconsole.log(`TR: ${dotted.toLocaleLowerCase('tr')}`);\n// Expected output: \"istanbul\"",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleLowerCase"
    },
    "tolocaleuppercase": {
      "explain": "El método toLocaleUpperCase() devuelve el valor de la cadena que lo llama convertido en mayúsculas, de acuerdo con las asignaciones de casos específicos de la configuración regional.",
      "code": "'alphabet'.toLocaleUpperCase(); // 'ALPHABET'\n\n'i\\u0307'.toLocaleUpperCase('lt-LT'); // 'I'\n\nlet locales = ['lt', 'LT', 'lt-LT', 'lt-u-co-phonebk', 'lt-x-lietuva'];\n'i\\u0307'.toLocaleUpperCase(locales); // 'I'",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleUpperCase"
    },
    "tolowercase": {
      "explain": "El método toLowerCase() devuelve el valor en minúsculas de la cadena que realiza la llamada.",
      "code": "var textoMayusculas=\"ALFABETO\"\ndocument.write(textoMayusculas.toLowerCase())",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase"
    },
    "touppercase": {
      "explain": "El toUpperCase() método devuelve el valor convertido en mayúsculas de la cadena que realiza la llamada.",
      "code": "console.log( \"alphabet\".toUpperCase() ); // \"ALPHABET\"",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase"
    },
    "tostring": {
      "explain": "El toString() método devuelve una cadena que representa al objeto especificado.",
      "code": "cadena = new String(\"Hello world\");\nalert(cadena.toString())      // Displays \"Hello world\"",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/toString"
    },
    "trim": {
      "explain": "El método trim( ) elimina los espacios en blanco en ambos extremos del string. Los espacios en blanco en este contexto, son todos los caracteres sin contenido (espacio, tabulación, etc.) y todos los caracteres de nuevas lineas (LF,CR,etc.).",
      "code": "var orig = '   foo  ';\nconsole.log(orig.trim()); // 'foo'\n\n// Otro ejemplo de .trim() eliminando el espacio en blanco sólo de un lado.\n\nvar orig = 'foo    ';\nconsole.log(orig.trim()); // 'foo'",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/Trim"
    }
  },
  "math": {
    "abs": {
      "explain": "La función Math.abs() retorna el valor absoluto de un número",
      "code": "Math.abs('-1');     // 1\nMath.abs(-2);       // 2\nMath.abs(null);     // 0\nMath.abs('');       // 0\nMath.abs([]);       // 0\nMath.abs([2]);      // 2\nMath.abs([1,2]);    // NaN\nMath.abs({});       // NaN\nMath.abs('string'); // NaN\nMath.abs();         // NaN",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/abs"
    },
    "acos": {
      "explain": "La función Math.acos() devuelve el arco coseno (en radianes) de un número",
      "code": "Math.acos(-2);  // NaN\nMath.acos(-1);  // 3.141592653589793\nMath.acos(0);   // 1.5707963267948966\nMath.acos(0.5); // 1.0471975511965979\nMath.acos(1);   // 0\nMath.acos(2);   // NaN",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/acos"
    },
    "asin": {
      "explain": "La Funcion Math.asin() retorna El arco seno (en radianes) de un número",
      "code": "Math.asin(-2);  // NaN\nMath.asin(-1);  // -1.5707963267948966 (-pi/2)\nMath.asin(0);   // 0\nMath.asin(0.5); // 0.5235987755982989\nMath.asin(1);   // 1.5707963267948966 (pi/2)\nMath.asin(2);   // NaN",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/asin"
    },
    "atan": {
      "explain": "La función Math.atan() retorna el arcotangente (en radianes) de un numero",
      "code": "// Calculates angle of a right-angle triangle in radians\nfunction calcAngle(opposite, adjacent) {\nreturn Math.atan(opposite / adjacent);\n}\n\nconsole.log(calcAngle(8, 10));\n// Expected output: 0.6747409422235527\n\nconsole.log(calcAngle(5, 3));\n// Expected output: 1.0303768265243125",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/atan"
    },
    "atan2": {
      "explain": "La función Math.atan2() retorna la arcotangente del cociente de los argumentos.",
      "code": "Math.atan2(90, 15); // 1.4056476493802699\nMath.atan2(15, 90); // 0.16514867741462683\n\nMath.atan2(±0, -0);               // ±PI.\nMath.atan2(±0, +0);               // ±0.\nMath.atan2(±0, -x);               // ±PI for x > 0.\nMath.atan2(±0, x);                // ±0 for x > 0.\nMath.atan2(-y, ±0);               // -PI/2 for y > 0.\nMath.atan2(y, ±0);                // PI/2 for y > 0.\nMath.atan2(±y, -Infinity);        // ±PI for finite y > 0.\nMath.atan2(±y, +Infinity);        // ±0 for finite y > 0.\nMath.atan2(±Infinity, x);         // ±PI/2 for finite x.\nMath.atan2(±Infinity, -Infinity); // ±3*PI/4.\nMath.atan2(±Infinity, +Infinity); // ±PI/4.",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/atan2"
    },
    "ceil": {
      "explain": "La función Math.ceil() devuelve el entero mayor o igual más próximo a un número dado.",
      "code": "console.log(Math.ceil(.95));\n// Expected output: 1\n\nconsole.log(Math.ceil(4));\n// Expected output: 4\n\nconsole.log(Math.ceil(7.004));\n// Expected output: 8\n\nconsole.log(Math.ceil(-7.004));\n// Expected output: -7",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil"
    },
    "cos": {
      "explain": "La función estática Math.cos() devuelve el coseno del ángulo especificado, que debe ser especificado en radianes",
      "code": "function getCircleX(radians, radius) {\nreturn Math.cos(radians) * radius;\n}\n\nconsole.log(getCircleX(1, 10));\n// Expected output: 5.403023058681398\n\nconsole.log(getCircleX(2, 10));\n// Expected output: -4.161468365471424\n\nconsole.log(getCircleX(Math.PI, 10));\n// Expected output: -10",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/cos"
    },
    "exp": {
      "explain": "La función Math.exp() devuelve ex, donde x es el argumento, y e es El número de Euler (también conocido como la constante de Napier), la base de los algoritmos naturales.",
      "code": "Math.exp(-1); // 0.36787944117144233\nMath.exp(0);  // 1\nMath.exp(1);  // 2.718281828459045",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/exp"
    },
    "floor": {
      "explain": "Devuelve el máximo entero menor o igual a un número.",
      "code": "function getFloor(x) {\nreturn Math.floor(x);\n}",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/floor"
    },
    "log": {
      "explain": "La función Math.log() devuelve la base neutral de un número (base e)",
      "code": "function getBaseLog(x, y) {\nreturn Math.log(y) / Math.log(x);\n}\n\n// 2 x 2 x 2 = 8\nconsole.log(getBaseLog(2, 8));\n// Expected output: 3\n\n// 5 x 5 x 5 x 5 = 625\nconsole.log(getBaseLog(5, 625));\n// Expected output: 4",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/log"
    },
    "max": {
      "explain": "La función Math.max() retorna el mayor de cero o más números dados como parámetros de entrada, o NaN si cualquier parámetro no es un número y no puede ser convertido en uno.\n",
      "code": "console.log(Math.max(1, 3, 2));\n// Expected output: 3\n\nconsole.log(Math.max(-1, -3, -2));\n// Expected output: -1\n\nconst array1 = [1, 3, 2];\n\nconsole.log(Math.max(...array1));\n// Expected output: 3",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/max"
    },
    "min": {
      "explain": "La función Math.min() devuelve el menor de cero o más números.",
      "code": "Lo siguiente encuentra el mínimo de x e y y lo asigna a z:\n\nvar x = 10, y = -20;\nvar z = Math.min(x, y);",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/min"
    },
    "pow": {
      "explain": "La función Math.pow() devuelve la base elevada al exponente , esto es, baseexponente.\n",
      "code": "// simple\nMath.pow(7, 2);    // 49\nMath.pow(7, 3);    // 343\nMath.pow(2, 10);   // 1024\n// exponentes fraccionales\nMath.pow(4, 0.5);  // 2 (raíz cuadrada de 4)\nMath.pow(8, 1/3);  // 2 (raíz cúbica de 8)\nMath.pow(2, 0.5);  // 1.412135623730951 (raíz cuadrada de 2)\nMath.pow(2, 1/3);  // 1.2599210498948732 (raíz cúbica de 2)\n// exponentes con signo\nMath.pow(7, -2);   // 0.02040816326530612 (1/49)\nMath.pow(8, -1/3); // 0.5\n// bases con signo\nMath.pow(-7, 2);   // 49 (los cuadrados son positivos)\nMath.pow(-7, 3);   // -343 (El cubo de una base negativa puede ser negativo)\nMath.pow(-7, 0.5); // NaN (Los números negativos no tienen raíz cuadrada real)\nMath.pow(-7, 1/3); // NaN",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/pow"
    },
    "random": {
      "explain": "La función Math.random() devuelve un número de coma flotante pseudo-aleatorio, comprendido en el rango de 0 a menor que 1 (es decir, incluido el 0 pero no el 1), con una distribución aproximadamente uniforme en este rango. Dicho rango puede ser ampliado hasta los valores deseados. La implementación selecciona la semilla inicial del algoritmo de generación de números aleatorios, no pudiendo ser esta elegida o restablecida por el usuario.",
      "code": "function getRandomInt(max) {\nreturn Math.floor(Math.random() * max);\n}\n\nconsole.log(getRandomInt(3));\n// Expected output: 0, 1 or 2\n\nconsole.log(getRandomInt(1));\n// Expected output: 0\n\nconsole.log(Math.random());\n// Expected output: a number from 0 to <1",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/random"
    },
    "round": {
      "explain": "La función Math.round()retorna el valor de un número redondeado al entero más cercano.",
      "code": "// Retorna el valor 20\nx = Math.round(20.49);\n\n// Retorna el valor 21\nx = Math.round(20.5);\n\n// Retorna el valor -20\nx = Math.round(-20.5);\n\n// Retorna el valor -21\nx = Math.round(-20.51);\n\n// Retorna el valor 1 (!)\n// Note el error de redondeo debido a la inexactitud del punto aritmético.\n// Compare esto con Math.round10(1.005, -2) de el ejemplo de abajo.\nx = Math.round(1.005*100)/100;",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/round"
    },
    "sin": {
      "explain": "La función Math.sin() devuelve el seno de un número.",
      "code": "Math.sin(0);           // 0\nMath.sin(1);           // 0.8414709848078965\n\nMath.sin(Math.PI / 2); // 1",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/sin"
    },
    "sqrt": {
      "explain": "La función Math.sqrt() retorna la raíz cuadrada de un número",
      "code": "Math.sqrt(9); // 3\nMath.sqrt(2); // 1.414213562373095\n\nMath.sqrt(1);  // 1\nMath.sqrt(0);  // 0\nMath.sqrt(-1); // NaN",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt"
    },
    "tan": {
      "explain": "La función Math.tan() retorna la tangente de un número.",
      "code": "function getTanFromDegrees(degrees) {\nreturn Math.tan(degrees * Math.PI / 180);\n}\n\nconsole.log(getTanFromDegrees(0));\n// Expected output: 0\n\nconsole.log(getTanFromDegrees(45));\n// Expected output: 0.9999999999999999\n\nconsole.log(getTanFromDegrees(90));\n// Expected output: 16331239353195370",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/tan"
    }
  },
  "object": {
    "assign": {
      "explain": "El método Object.assign() copia todas las propiedades enumerables de uno o más objetos fuente a un objeto destino. Devuelve el objeto destino.",
      "code": "const target = { a: 1, b: 2 };\nconst source = { b: 4, c: 5 };\n\nconst returnedTarget = Object.assign(target, source);\n\nconsole.log(target);\n// Expected output: Object { a: 1, b: 4, c: 5 }\n\nconsole.log(returnedTarget === target);\n// Expected output: true",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Object/assign"
    },
    "create": {
      "explain": "El método Object.create() crea un objeto nuevo, utilizando un objeto existente como el prototipo del nuevo objeto creado.",
      "code": "const person = {\nisHuman: false,\nprintIntroduction: function() {\nconsole.log(`My name is ${this.name}. Am I human? ${this.isHuman}`);\n}\n};\n\nconst me = Object.create(person);\n\nme.name = 'Matthew'; // \"name\" is a property set on \"me\", but not on \"person\"\nme.isHuman = true; // Inherited properties can be overwritten\n\nme.printIntroduction();\n// Expected output: \"My name is Matthew. Am I human? true\"",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Object/create"
    },
    "defineproperties": {
      "explain": "El metodo Object.defineProperties() define nuevas o modifica propiedades existentes directamente en el objeto, retornando el objeto.",
      "code": "Object.defineProperties(obj, {\n\"property1\": {\nvalue: true,\nwritable: true\n},\n\"property2\": {\nvalue: \"Hello\",\nwritable: false\n}\n// etc. etc.\n});",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties"
    },
    "defineproperty": {
      "explain": "El método estático Object.defineProperty() define una nueva propiedad sobre un objeto, o modifica una ya existente, y devuelve el objeto modificado.",
      "code": "var o = {}; // Creates a new object\n\n// Example of an object property added with defineProperty with a data property descriptor\nObject.defineProperty(o, 'a', {\nvalue: 37,\nwritable: true,\nenumerable: true,\nconfigurable: true\n});\n// 'a' property exists in the o object and its value is 37\n\n// Example of an object property added with defineProperty with an accessor property descriptor\nvar bValue = 38;\nObject.defineProperty(o, 'b', {\nget: function() { return bValue; },\nset: function(newValue) { bValue = newValue; },\nenumerable: true,\nconfigurable: true\n});\no.b; // 38\n// 'b' property exists in the o object and its value is 38\n// The value of o.b is now always identical to bValue, unless o.b is redefined\n\n// You cannot try to mix both:\nObject.defineProperty(o, 'conflict', {\nvalue: 0x9f91102,\nget: function() { return 0xdeadbeef; }\n});\n// throws a TypeError: value appears only in data descriptors, get appears only in accessor descriptors",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty"
    },
    "entries": {
      "explain": "El método Object.entries() devuelve una matriz de pares propios de una propiedad enumerable [key, value] de un objeto dado, en el mismo orden que es proporcionado por for...in (La diferencia es que un bucle for-in enumera las propiedades en la cadena de prototipos).",
      "code": "ar obj = { foo: 'bar', baz: 42 };\nconsole.log(Object.entries(obj)); // [ ['foo', 'bar'], ['baz', 42] ]\n\n// array like object\nvar obj = { 0: 'a', 1: 'b', 2: 'c' };\nconsole.log(Object.entries(obj)); // [ ['0', 'a'], ['1', 'b'], ['2', 'c'] ]\n\n// array like object with random key ordering\nvar an_obj = { 100: 'a', 2: 'b', 7: 'c' };\nconsole.log(Object.entries(an_obj)); // [ ['2', 'b'], ['7', 'c'], ['100', 'a'] ]\n\n// getFoo is property which isn't enumerable\nvar my_obj = Object.create({}, { getFoo: { value: function() { return this.foo; } } });\nmy_obj.foo = 'bar';\nconsole.log(Object.entries(my_obj)); // [ ['foo', 'bar'] ]\n\n// non-object argument will be coerced to an object\nconsole.log(Object.entries('foo')); // [ ['0', 'f'], ['1', 'o'], ['2', 'o'] ]\n\n// iterate through key-value gracefully\nvar obj = {a: 5, b: 7, c: 9};\nfor (var [key, value] of Object.entries(obj)) {\nconsole.log(key + ' ' + value); // \"a 5\", \"b 7\", \"c 9\"\n}\n\n// Or, using array extras\nObject.entries(obj).forEach(([key, value]) => {\nconsole.log(key + ' ' + value); // \"a 5\", \"b 7\", \"c 9\"\n});",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Object/entries"
    },
    "freeze": {
      "explain": "El método Object.freeze() congela un objeto, es decir: impide que se le agreguen nuevas propiedades; impide que se puedan eliminar las propiedades ya existentes; impide que dichas propiedades, o su capacidad de enumeración, configuración, o escritura, puedan ser modificadas; impide también que se pueda modificar su prototipo. El método devuelve el objeto recibido.",
      "code": "const obj = {\nprop: 42\n};\n\nObject.freeze(obj);\n\nobj.prop = 33;\n// Throws an error in strict mode\n\nconsole.log(obj.prop);\n// Expected output: 42",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze"
    },
    "getownpropertydescriptor": {
      "explain": "El método Object.getOwnPropertyDescriptor() regresa como descripción de propiedad para una propiedad propia (eso es, una presente directamente en el objeto, no presente por la fuerza a través de la cadena de prototipo del objeto) de un objeto dado.",
      "code": "var o, d;\n\no = { get foo() { return 17; } };\nd = Object.getOwnPropertyDescriptor(o, 'foo');\n// d is { configurable: true, enumerable: true, get: /* la función de acceso */, set: undefined }\n\no = { bar: 42 };\nd = Object.getOwnPropertyDescriptor(o, 'bar');\n// d is { configurable: true, enumerable: true, value: 42, writable: true }\n\no = {};\nObject.defineProperty(o, 'baz', { value: 8675309, writable: false, enumerable: false });\nd = Object.getOwnPropertyDescriptor(o, 'baz');\n// d es { value: 8675309, writable: false, enumerable: false, configurable: false }",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor"
    },
    "getownpropertydescriptors": {
      "explain": "El método Object.getOwnPropertyDescriptors() regresa todos los descriptores de propiedad propios de un objeto dado.",
      "code": "const object1 = {\nproperty1: 42\n};\n\nconst descriptors1 = Object.getOwnPropertyDescriptors(object1);\n\nconsole.log(descriptors1.property1.writable);\n// Expected output: true\n\nconsole.log(descriptors1.property1.value);\n// Expected output: 42",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptors"
    },
    "getownpropertynames": {
      "explain": "El método Object.getOwnPropertyNames() devuelve un array con todas las propiedades (numerables o no) encontradas en un objeto dado.",
      "code": "var arr = [\"a\", \"b\", \"c\"];\nprint(Object.getOwnPropertyNames(arr).sort()); // imprime \"0,1,2,length\"\n\n// Objeto similar a Array\nvar obj = { 0: \"a\", 1: \"b\", 2: \"c\"};\nprint(Object.getOwnPropertyNames(obj).sort()); // imprime \"0,1,2\"\n\n// Imprime nombres de variables y valores usando Array.forEach\nObject.getOwnPropertyNames(obj).forEach(function(val, idx, array) {\nprint(val + \" -> \" + obj[val]);\n});\n// imprime\n// 0 -> a\n// 1 -> b\n// 2 -> c\n\n// propiedad no-numerable\nvar my_obj = Object.create({}, { getFoo: { value: function() { return this.foo; }, enumerable: false } });\nmy_obj.foo = 1;\n\nprint(Object.getOwnPropertyNames(my_obj).sort()); // imprime \"foo, getFoo\"",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames"
    },
    "getownpropertysymbols": {
      "explain": "El método Object.getOwnPropertySymbols() regresa una colección de todos las propiedades de los simbolos encontrados directamente en un objeto dado.",
      "code": "var obj = {};\nvar a = Symbol('a');\nvar b = Symbol.for('b');\n\nobj[a] = 'localSymbol';\nobj[b] = 'globalSymbol';\n\nvar objectSymbols = Object.getOwnPropertySymbols(obj);\n\nconsole.log(objectSymbols.length); // 2\nconsole.log(objectSymbols);        // [Symbol(a), Symbol(b)]\nconsole.log(objectSymbols[0]);     // Symbol(a)",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols"
    },
    "getprototypeof": {
      "explain": "El método Object.getPrototypeOf() devuelve el prototipo (es decir, el valor de la propiedad interna [[Prototype]]) del objeto especificado.\n",
      "code": "var proto = {};\nvar obj= Object.create(proto);\nObject.getPrototypeOf(obj) === proto; // true\nCopy to Clipboard",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf"
    },
    "is": {
      "explain": "El método Object.is() determina si dos valores son iguales.",
      "code": "Object.is('foo', 'foo');     // true\nObject.is(window, window);   // true\n\nObject.is('foo', 'bar');     // false\nObject.is([], []);           // false\n\nvar test = { a: 1 };\nObject.is(test, test);       // true\n\nObject.is(null, null);       // true\n\n// Special Cases\nObject.is(0, -0);            // false\nObject.is(-0, -0);           // true\nObject.is(NaN, 0/0);         // true",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Object/is"
    },
    "isextensible": {
      "explain": "El método Object.isExtensible() determina si un objeto es extendible (si puede tener propiedades nuevas agregadas a éste).",
      "code": "// Los Objetos nuevos son extendibles (por defecto).\nvar empty = {};\nObject.isExtensible(empty); // === true\n\n// ...pero eso puede cambiar.\nObject.preventExtensions(empty);\nObject.isExtensible(empty); // === false\n\n// Objetos sellados por definición son no-extendibles.\nvar sealed = Object.seal({});\nObject.isExtensible(sealed); // === false\n\n// Objetos congelados también por definición son no-extendibles.\nvar frozen = Object.freeze({});\nObject.isExtensible(frozen); // === false",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible"
    },
    "isfrozen": {
      "explain": "El método Object.isFrozen() determina si un objeto está congelado.",
      "code": "// Un objeto nuevo es extendible, así que no está congelado.\nObject.isFrozen({}); // === false\n\n// Un objeto vacio el cuál no es extendible está congelado vacuamente.\nvar vacuouslyFrozen = Object.preventExtensions({});\nObject.isFrozen(vacuouslyFrozen); // === true\n\n// Un objeto nuevo con una propiedad es tabién extendible, ergo no congelado.\nvar oneProp = { p: 42 };\nObject.isFrozen(oneProp); // === false\n\n// Prevenir la extensión de un objeto no lo congela.\n// porque la propiedad sigue teniendo capacidad de configuración (y capacidad de escritura).\nObject.preventExtensions(oneProp);\nObject.isFrozen(oneProp); // === false\n\n// ...pero eliminar la propiedad congela el objeto vacuamente.\ndelete oneProp.p;\nObject.isFrozen(oneProp); // === true",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen"
    },
    "issealed": {
      "explain": "El método Object.isSealed() si el objeto está sellado.",
      "code": "const object1 = {\nproperty1: 42\n};\n\nconsole.log(Object.isSealed(object1));\n// Expected output: false\n\nObject.seal(object1);\n\nconsole.log(Object.isSealed(object1));\n// Expected output: true",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed"
    },
    "keys": {
      "explain": "El método Object.keys() devuelve un array de las propiedades names de un objeto, en el mismo orden como se obtienen en un loop normal"
    },
    "code": "var arr = ['a', 'b', 'c'];\nconsole.log(Object.keys(arr)); // console: ['0', '1', '2']\n\n// arreglo como objeto\nvar obj = { 0: 'a', 1: 'b', 2: 'c' };\nconsole.log(Object.keys(obj)); // console: ['0', '1', '2']\n\n// arreglo como objeto con nombres ordenados aleatoriamente\nvar an_obj = { 100: 'a', 2: 'b', 7: 'c' };\nconsole.log(Object.keys(an_obj)); // console: ['2', '7', '100']\n\n// getFoo es una propiedad no enumerable\nvar my_obj = Object.create({}, { getFoo: { value: function() { return this.foo; } } });\nmy_obj.foo = 1;\n\nconsole.log(Object.keys(my_obj)); // console: ['foo']",
    "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Object/keys",
    "preventextensions": {
      "explain": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Object/keys",
      "code": "// Object.preventExtensions regresa el objeto hecho no-extendible.\nvar obj = {};\nvar obj2 = Object.preventExtensions(obj);\nobj === obj2; // true\n\n// Los Objetos son extendibles por defecto.\nvar empty = {};\nObject.isExtensible(empty); // === true\n\n// ...pero pueden ser cambiados.\nObject.preventExtensions(empty);\nObject.isExtensible(empty); // === false\n\n// Object.defineProperty arroja una excepción cuando se agrega\n// una propiedad nueva a un objeto no-extendible.\nvar nonExtensible = { removable: true };\nObject.preventExtensions(nonExtensible);\nObject.defineProperty(nonExtensible, 'new', { value: 8675309 }); // arroja TypeError",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions"
    },
    "seal": {
      "explain": "El método Object.seal() sella un objeto, previniendo que puedan añadirse nuevas propiedades al mismo, y marcando todas las propiedades existentes como no-configurables. Los valores de las propiedades presentes permanecen pudiendo cambiarse en tanto en cuanto dichas propiedades sean de escritura.",
      "code": "var obj = {\nprop: function() {},\nfoo: 'bar'\n};\n\n// Pueden añadirse nuevas propiedades, propiedades existentes pueden cambiarse o eliminarse.\nobj.foo = 'baz';\nobj.lumpy = 'woof';\ndelete obj.prop;\n\nvar o = Object.seal(obj);\n\no === obj; // true\nObject.isSealed(obj); // === true\n\n// Sigue permitido modificar valores de propiedades en un objeto sellado.\nobj.foo = 'quux';\n\n// Pero no puedes convertir propiedades de datos en propiedades de acceso, ni viveversa\nObject.defineProperty(obj, 'foo', { get: function() { return 'g'; } }); // produce un TypeError",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Object/seal"
    },
    "setprototypeof": {
      "explain": "El método Object.setPrototypeOf() establece el prototipo (p.e., la propiedad interna [[Prototype]]) de un objeto especificado a otro objeto o sino establece null.",
      "code": "Object.appendChain = function(oChain, oProto) {\nif (arguments.length < 2) {\nthrow new TypeError('Object.appendChain - Not enough arguments');\n}\nif (typeof oProto === 'number' || typeof oProto === 'boolean') {\nthrow new TypeError('second argument to Object.appendChain must be an object or a string');\n}",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf"
    },
    "values": {
      "explain": "El método Object.values() devuelve un array con los valores correspondientes a las propiedades enumerables de un objeto. Las propiedades son devueltas en el mismo orden a como lo haría un bucle for...in (la única diferencia es que un bucle for-in también enumera las propiedades en la cadena de prototipo de un objeto).",
      "code": "const object1 = {\na: 'somestring',\nb: 42,\nc: false\n};\n\nconsole.log(Object.values(object1));\n// Expected output: Array [\"somestring\", 42, false]",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Object/values"
    }
  },
  "date": {
    "getdate": {
      "explain": "El método getDate() devuelve el día del mes para la fecha especificada de acuerdo con la hora local.",
      "code": "var Xmas95 = new Date('December 25, 1995 23:15:30');\nvar day = Xmas95.getDate();\n\nconsole.log(day); // 25",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Date/getDate"
    },
    "getday": {
      "explain": "El método getDay() devuelve el día de la semana de la fecha especificada en función de la fecha local; siendo 0 (Domingo) el primer día.\n",
      "code": "var Xmas95 = new Date('December 25, 1995 23:15:30');\nvar weekday = Xmas95.getDay();\n\nconsole.log(weekday); // 1",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Date/getDay"
    },
    "getfullyear": {
      "explain": "El método getFullYear() devuelve el año de la fecha indicada acorde a la hora local.",
      "code": "const moonLanding = new Date('July 20, 69 00:20:18');\n\nconsole.log(moonLanding.getFullYear());\n// Expected output: 1969",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Date/getFullYear"
    },
    "gethours": {
      "explain": "El método getHours() retorna la hora de la fecha especificada, de acuerdo a la hora local.",
      "code": "var Xmas95 = new Date('December 25, 1995 23:15:30');\nvar hours = Xmas95.getHours();\n\nconsole.log(hours); // 23",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Date/getHours"
    },
    "getmilliseconds": {
      "explain": "El método getMilliseconds() devuelve la cantidad de milisegundos en el objeto fecha especificado de acuerdo a la hora local.\n",
      "code": "var ahora = new Date();\nvar milisegundos = ahora.getMilliseconds();",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Date/getMilliseconds"
    },
    "getminutes": {
      "explain": "El método getMinutes() devuelve los minutos de la fecha especificada en función de la hora local.",
      "code": "var Xmas95 = new Date('December 25, 1995 23:15:30');\nvar minutos = Xmas95.getMinutes();\n\nconsole.log(minutos); // 15",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Date/getMinutes"
    },
    "getmonth": {
      "explain": "El método getMonth() devuelve el mes del objeto Date según la hora local, donde el número cero indica el primer mes del año.",
      "code": "var Navidad = new Date('December 25, 2014 23:15:30');\nvar mes = Navidad.getMonth();\n\nconsole.log(mes); // 11",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Date/getMonth"
    },
    "getseconds": {
      "explain": "El método getSeconds() devuelve los segundos en la fecha especificada de acuerdo a la hora local.",
      "code": "const moonLanding = new Date('July 20, 69 00:20:18');\n\nconsole.log(moonLanding.getSeconds());\n// Expected output: 18",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Date/getSeconds"
    },
    "gettime": {},
    "gettimezoneoffset": {
      "explain": "The getTimezoneOffset() method returns the difference, in minutes, between a date as evaluated in the UTC time zone, and the same date as evaluated in the local time zone.\n",
      "code": "const date1 = new Date('August 19, 1975 23:15:30 GMT+07:00');\nconst date2 = new Date('August 19, 1975 23:15:30 GMT-02:00');\n\nconsole.log(date1.getTimezoneOffset());\n// Expected output: your local timezone offset in minutes\n// (e.g., -120). NOT the timezone offset of the date object.\n\nconsole.log(date1.getTimezoneOffset() === date2.getTimezoneOffset());\n// Expected output: true",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset"
    },
    "getutcdate": {
      "explain": "The getUTCDate() method returns the day of the month (from 1 to 31) in the specified date according to universal time.",
      "code": "const date1 = new Date('August 19, 1975 23:15:30 GMT+11:00');\nconst date2 = new Date('August 19, 1975 23:15:30 GMT-11:00');\n\nconsole.log(date1.getUTCDate());\n// Expected output: 19\n\nconsole.log(date2.getUTCDate());\n// Expected output: 20",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCDate"
    },
    "getutcday": {
      "explain": "The getUTCDay() method returns the day of the week in the specified date according to universal time, where 0 represents Sunday.",
      "code": "const date1 = new Date('August 19, 1975 23:15:30 GMT+11:00');\nconst date2 = new Date('August 19, 1975 23:15:30 GMT-11:00');\n\n// Tuesday\nconsole.log(date1.getUTCDay());\n// Expected output: 2\n\n// Wednesday\nconsole.log(date2.getUTCDay());\n// Expected output: 3",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCDay"
    },
    "getutcfullyear": {
      "explain": "The getUTCFullYear() method returns the year in the specified date according to universal time.",
      "code": "const date1 = new Date('December 31, 1975, 23:15:30 GMT+11:00');\nconst date2 = new Date('December 31, 1975, 23:15:30 GMT-11:00');\n\nconsole.log(date1.getUTCFullYear());\n// Expected output: 1975\n\nconsole.log(date2.getUTCFullYear());\n// Expected output: 1976",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCFullYear"
    },
    "getutchours": {
      "explain": "The getUTCHours() method returns the hours in the specified date according to universal time.",
      "code": "const date1 = new Date('December 31, 1975, 23:15:30 GMT+11:00');\nconst date2 = new Date('December 31, 1975, 23:15:30 GMT-11:00');\n\nconsole.log(date1.getUTCHours());\n// Expected output: 12\n\nconsole.log(date2.getUTCHours());\n// Expected output: 10",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCHours"
    },
    "getutcmilliseconds": {
      "explain": "The getUTCMilliseconds() method returns the milliseconds portion of the time object's value according to universal time.",
      "code": "const exampleDate = new Date('2018-01-02T03:04:05.678Z'); // 2 January 2018, 03:04:05.678 (UTC)\n\nconsole.log(exampleDate.getUTCMilliseconds());\n// Expected output: 678",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMilliseconds"
    },
    "getutcminutes": {
      "explain": "The getUTCMinutes() method returns the minutes in the specified date according to universal time.",
      "code": "const date1 = new Date('1 January 2000 03:15:30 GMT+07:00');\nconst date2 = new Date('1 January 2000 03:15:30 GMT+03:30');\n\nconsole.log(date1.getUTCMinutes()); // 31 Dec 1999 20:15:30 GMT\n// Expected output: 15\n\nconsole.log(date2.getUTCMinutes()); // 31 Dec 1999 23:45:30 GMT\n// Expected output: 45",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMinutes"
    },
    "getutcmonth": {
      "explain": "The getUTCMonth() returns the month of the specified date according to universal time, as a zero-based value (where zero indicates the first month of the year).",
      "code": "const date1 = new Date('December 31, 1975, 23:15:30 GMT+11:00');\nconst date2 = new Date('December 31, 1975, 23:15:30 GMT-11:00');\n\n// December\nconsole.log(date1.getUTCMonth());\n// Expected output: 11\n\n// January\nconsole.log(date2.getUTCMonth());\n// Expected output: 0",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMonth"
    },
    "getutcseconds": {
      "explain": "The getUTCSeconds() method returns the seconds in the specified date according to universal time.",
      "code": "const moonLanding = new Date('July 20, 1969, 20:18:04 UTC');\n\nconsole.log(moonLanding.getUTCSeconds());\n// Expected output: 4",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCSeconds"
    },
    "setdate": {
      "explain": "The setDate() method changes the day of the month of a given Date instance, based on local time.",
      "code": "const event = new Date('August 19, 1975 23:15:30');\n\nevent.setDate(24);\n\nconsole.log(event.getDate());\n// Expected output: 24\n\nevent.setDate(32);\n// Only 31 days in August!\n\nconsole.log(event.getDate());\n// Expected output: 1",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setDate"
    },
    "setfullyear": {
      "explain": "The setFullYear() method sets the full year for a specified date according to local time. Returns new timestamp.",
      "code": "const event = new Date('August 19, 1975 23:15:30');\n\nevent.setFullYear(1969);\n\nconsole.log(event.getFullYear());\n// Expected output: 1969\n\nevent.setFullYear(0);\n\nconsole.log(event.getFullYear());\n// Expected output: 0",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setFullYear"
    },
    "sethours": {
      "explain": "The setHours() method sets the hours for a specified date according to local time, and returns the number of milliseconds since January 1, 1970 00:00:00 UTC until the time represented by the updated Date instance.",
      "code": "const event = new Date('August 19, 1975 23:15:30');\nevent.setHours(20);\n\nconsole.log(event);\n// Expected output: \"Tue Aug 19 1975 20:15:30 GMT+0200 (CEST)\"\n// Note: your timezone may vary\n\nevent.setHours(20, 21, 22);\n\nconsole.log(event);\n// Expected output: \"Tue Aug 19 1975 20:21:22 GMT+0200 (CEST)\"",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setHours"
    },
    "setmilliseconds": {
      "explain": "The setMilliseconds() method sets the milliseconds for a specified date according to local time.",
      "code": "const event = new Date('August 19, 1975 23:15:30');\n\nconsole.log(event.getMilliseconds());\n// Expected output: 0\n\nevent.setMilliseconds(456);\n\nconsole.log(event.getMilliseconds());\n// Expected output: 456",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMilliseconds"
    },
    "setminutes": {
      "explain": "The setMinutes() method sets the minutes for a specified date according to local time.",
      "code": "const event = new Date('August 19, 1975 23:15:30');\n\nevent.setMinutes(45);\n\nconsole.log(event.getMinutes());\n// Expected output: 45\n\nconsole.log(event);\n// Expected output: \"Tue Aug 19 1975 23:45:30 GMT+0200 (CEST)\"\n// Note: your timezone may vary",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMinutes"
    },
    "setmonth": {
      "explain": "The setMonth() method sets the month for a specified date according to the currently set year.",
      "code": "const event = new Date('August 19, 1975 23:15:30');\n\nevent.setMonth(3);\n\nconsole.log(event.getMonth());\n// Expected output: 3\n\nconsole.log(event);\n// Expected output: \"Sat Apr 19 1975 23:15:30 GMT+0100 (CET)\"\n// Note: your timezone may vary",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMonth"
    },
    "setseconds": {
      "explain": "The setSeconds() method sets the seconds for a specified date according to local time.",
      "code": "const event = new Date('August 19, 1975 23:15:30');\n\nevent.setSeconds(42);\n\nconsole.log(event.getSeconds());\n// Expected output: 42\n\nconsole.log(event);\n// Expected output: \"Sat Apr 19 1975 23:15:42 GMT+0100 (CET)\"\n// Note: your timezone may vary",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setSeconds"
    },
    "settime": {
      "explain": "The setTime() method sets the Date object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC.\n",
      "code": "const launchDate = new Date('July 1, 1999, 12:00:00');\nconst futureDate = new Date();\nfutureDate.setTime(launchDate.getTime());\n\nconsole.log(futureDate);\n// Expected output: \"Thu Jul 01 1999 12:00:00 GMT+0200 (CEST)\"\n\nconst fiveMinutesInMillis = 5 * 60 * 1000;\nfutureDate.setTime(futureDate.getTime() + fiveMinutesInMillis);\n\nconsole.log(futureDate);\n// Expected output: \"Thu Jul 01 1999 12:05:00 GMT+0200 (CEST)\"\n// Note: your timezone may vary",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setTime"
    },
    "todatestring": {
      "explain": "The toDateString() method returns the date portion of a Date object interpreted in the local timezone in English.",
      "code": "const event = new Date(1993, 6, 28, 14, 39, 7);\n\nconsole.log(event.toString());\n// Expected output: \"Wed Jul 28 1993 14:39:07 GMT+0200 (CEST)\"\n// Note: your timezone may vary\n\nconsole.log(event.toDateString());\n// Expected output: \"Wed Jul 28 1993\"",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toDateString"
    },
    "toisostring": {
      "explain": "The toISOString() method returns a string in simplified extended ISO format (ISO 8601), which is always 24 or 27 characters long (YYYY-MM-DDTHH:mm:ss.sssZ or ±YYYYYY-MM-DDTHH:mm:ss.sssZ, respectively). The timezone is always zero UTC offset, as denoted by the suffix Z.",
      "code": "const event = new Date('05 October 2011 14:48 UTC');\nconsole.log(event.toString());\n// Expected output: \"Wed Oct 05 2011 16:48:00 GMT+0200 (CEST)\"\n// Note: your timezone may vary\n\nconsole.log(event.toISOString());\n// Expected output: \"2011-10-05T14:48:00.000Z\"",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString"
    },
    "tojson": {
      "explain": "The toJSON() method returns a string representation of the Date object.",
      "code": "const event = new Date('August 19, 1975 23:15:30 UTC');\n\nconst jsonDate = event.toJSON();\n\nconsole.log(jsonDate);\n// Expected output: \"1975-08-19T23:15:30.000Z\"\n\nconsole.log(new Date(jsonDate).toUTCString());\n// Expected output: \"Tue, 19 Aug 1975 23:15:30 GMT\"",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toJSON"
    },
    "tolocaledatestring": {
      "explain": "The toLocaleDateString() method returns a string with a language-sensitive representation of the date portion of the specified date in the user agent's timezone. In implementations with Intl.DateTimeFormat API support, this method simply calls Intl.DateTimeFormat.\n",
      "code": "const event = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));\nconst options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\n\nconsole.log(event.toLocaleDateString('de-DE', options));\n// Expected output (varies according to local timezone): Donnerstag, 20. Dezember 2012\n\nconsole.log(event.toLocaleDateString('ar-EG', options));\n// Expected output (varies according to local timezone): الخميس، ٢٠ ديسمبر، ٢٠١٢\n\nconsole.log(event.toLocaleDateString(undefined, options));\n// Expected output (varies according to local timezone and default locale): Thursday, December 20, 2012",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString"
    },
    "tolocalestring": {
      "explain": "The toLocaleString() method returns a string with a language-sensitive representation of this date. In implementations with Intl.DateTimeFormat API support, this method simply calls Intl.DateTimeFormat.",
      "code": "const event = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));\n\n// British English uses day-month-year order and 24-hour time without AM/PM\nconsole.log(event.toLocaleString('en-GB', { timeZone: 'UTC' }));\n// Expected output: \"20/12/2012, 03:00:00\"\n\n// Korean uses year-month-day order and 12-hour time with AM/PM\nconsole.log(event.toLocaleString('ko-KR', { timeZone: 'UTC' }));\n// Expected output: \"2012. 12. 20. 오전 3:00:00\" ",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString"
    },
    "tolocaletimestring": {
      "explain": "The toLocaleTimeString() method returns a string with a language-sensitive representation of the time portion of the date. In implementations with Intl.DateTimeFormat API support, this method simply calls Intl.DateTimeFormat.",
      "code": "// Depending on timezone, your results will vary\nconst event = new Date('August 19, 1975 23:15:30 GMT+00:00');\n\nconsole.log(event.toLocaleTimeString('en-US'));\n// Expected output: \"1:15:30 AM\"\n\nconsole.log(event.toLocaleTimeString('it-IT'));\n// Expected output: \"01:15:30\"\n\nconsole.log(event.toLocaleTimeString('ar-EG'));\n// Expected output: \"١٢:١٥:٣٠ ص\"",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString"
    },
    "tostring": {
      "explain": "The toString() method returns a string representing the specified Date object interpreted in the local timezone.",
      "code": "const event = new Date('August 19, 1975 23:15:30');\n\nconsole.log(event.toString());\n// Expected output: \"Tue Aug 19 1975 23:15:30 GMT+0200 (CEST)\"\n// Note: your timezone may vary",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toString"
    },
    "totimestring": {
      "explain": "The toTimeString() method returns the time portion of a Date object interpreted in the local timezone in English.\n",
      "code": "const event = new Date('August 19, 1975 23:15:30');\n\nconsole.log(event.toTimeString());\n// Expected output: \"23:15:30 GMT+0200 (CEST)\"\n// Note: your timezone may vary",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toTimeString"
    },
    "toutcstring": {
      "explain": "The toUTCString() method converts a date to a string, interpreting it in the UTC time zone. toGMTString() is an alias of this method.\n",
      "code": "const event = new Date('14 Jun 2017 00:00:00 PDT');\n\nconsole.log(event.toUTCString());\n// Expected output: \"Wed, 14 Jun 2017 07:00:00 GMT\"",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toUTCString"
    }
  },
  "function": {
    "apply": {
      "explain": "El método apply() invoca una determinada función asignando explícitamente el objeto this y un array o similar (array like object (en-US)) como parámetros (argumentos) para dicha función.",
      "code": "function MyConstructor () {\nfor (var nProp = 0; nProp < arguments.length; nProp++) {\nthis[\"property\" + nProp] = arguments[nProp];\n}\n}\n\nvar myArray = [4, \"Hello world!\", false];\nvar myInstance = MyConstructor.construct(myArray);\n\nalert(myInstance.property1); // alerts \"Hello world!\"\nalert(myInstance instanceof MyConstructor); // alerts \"true\"\nalert(myInstance.constructor); // alerts \"MyConstructor\"",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Function/apply"
    },
    "bind": {
      "explain": "El método bind() crea una nueva función, que cuando es llamada, asigna a su operador this el valor entregado, con una secuencia de argumentos dados precediendo a cualquiera entregados cuando la función es llamada.",
      "code": "this.x = 9;\nvar module = {\nx: 81,\ngetX: function() { return this.x; }\n};\n\nmodule.getX(); // 81\n\nvar getX = module.getX;\ngetX(); // 9, porque en este caso, \"this\" apunta al objeto global\n\n// Crear una nueva función con 'this' asociado al objeto original 'module'\nvar boundGetX = getX.bind(module);\nboundGetX(); // 81",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Function/bind"
    },
    "call": {
      "explain": "El método call() llama a una función con un valor dado this y con argumentos provistos individualmente.",
      "code": "El método call() llama a una función con un valor dado this y con argumentos provistos individualmente.",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Function/call"
    },
    "tostring": {
      "explain": "El método toString() retorna una cadena representando el código fuente de la función.",
      "code": "function.toString(indentation)",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Function/toString"
    }
  },
  "number": {
    "toexponential": {
      "explain": "The toExponential() method returns a string representing the Number object in exponential notation.",
      "code": "function expo(x, f) {\nreturn Number.parseFloat(x).toExponential(f);\n}\n\nconsole.log(expo(123456, 2));\n// Expected output: \"1.23e+5\"\n\nconsole.log(expo('123456'));\n// Expected output: \"1.23456e+5\"\n\nconsole.log(expo('oink'));\n// Expected output: \"NaN\"",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential"
    },
    "tofixed": {
      "explain": "The toFixed() method formats a number using fixed-point notation.",
      "code": "function financial(x) {\nreturn Number.parseFloat(x).toFixed(2);\n}\n\nconsole.log(financial(123.456));\n// Expected output: \"123.46\"\n\nconsole.log(financial(0.004));\n// Expected output: \"0.00\"\n\nconsole.log(financial('1.23e+5'));\n// Expected output: \"123000.00\"",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed"
    },
    "tolocalestring": {
      "explain": "The toLocaleString() method returns a string with a language-sensitive representation of this number. In implementations with Intl.NumberFormat API support, this method simply calls Intl.NumberFormat.",
      "code": "function eArabic(x){\nreturn x.toLocaleString('ar-EG');\n}\n\nconsole.log(eArabic(123456.789));\n// Expected output: \"١٢٣٬٤٥٦٫٧٨٩\"\n\nconsole.log(eArabic('123456.789'));\n// Expected output: \"123456.789\"\n\nconsole.log(eArabic(NaN));\n// Expected output: \"ليس رقم\"",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString"
    },
    "toprecision": {
      "explain": "The toPrecision() method returns a string representing the Number object to the specified precision.",
      "code": "function precise(x) {\nreturn x.toPrecision(4);\n}\n\nconsole.log(precise(123.456));\n// Expected output: \"123.5\"\n\nconsole.log(precise(0.004));\n// Expected output: \"0.004000\"\n\nconsole.log(precise(1.23e5));\n// Expected output: \"1.230e+5\"",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision"
    },
    "tostring": {
      "explain": "The toString() method returns a string representing the specified number value.",
      "code": "function hexColour(c) {\nif (c < 256) {\nreturn Math.abs(c).toString(16);\n}\nreturn 0;\n}\n\nconsole.log(hexColour(233));\n// Expected output: \"e9\"\n\nconsole.log(hexColour('11'));\n// Expected output: \"b\"",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString"
    },
    "valueof": {
      "explain": "The valueOf() method returns the wrapped primitive value of a Number object.",
      "code": "const numObj = new Number(42);\nconsole.log(typeof numObj);\n// Expected output: \"object\"\n\nconst num = numObj.valueOf();\nconsole.log(num);\n// Expected output: 42\n\nconsole.log(typeof num);\n// Expected output: \"number\"",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/valueOf"
    }
  },
  "map": {
    "clear": {
      "explain": "The clear() method removes all elements from a Map object.",
      "code": "const map1 = new Map();\n\nmap1.set('bar', 'baz');\nmap1.set(1, 'foo');\n\nconsole.log(map1.size);\n// Expected output: 2\n\nmap1.clear();\n\nconsole.log(map1.size);\n// Expected output: 0",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/clear"
    },
    "delete": {
      "explain": "The delete() method removes the specified element from a Map object by key.",
      "code": "const map1 = new Map();\nmap1.set('bar', 'foo');\n\nconsole.log(map1.delete('bar'));\n// Expected result: true\n// True indicates successful removal\n\nconsole.log(map1.has('bar'));\n// Expected result: false",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/delete"
    },
    "entries": {
      "explain": "The entries() method returns a new iterator object that contains the [key, value] pairs for each element in the Map object in insertion order. In this particular case, this iterator object is also an iterable, so the for-of loop can be used. When the protocol [Symbol.iterator] is used, it returns a function that, when invoked, returns this iterator itself.",
      "code": "const map1 = new Map();\n\nmap1.set('0', 'foo');\nmap1.set(1, 'bar');\n\nconst iterator1 = map1.entries();\n\nconsole.log(iterator1.next().value);\n// Expected output: Array [\"0\", \"foo\"]\n\nconsole.log(iterator1.next().value);\n// Expected output: Array [1, \"bar\"]",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/entries"
    },
    "foreach": {
      "explain": "The forEach() method executes a provided function once per each key/value pair in the Map object, in insertion order.",
      "code": "function logMapElements(value, key, map) {\nconsole.log(`m[${key}] = ${value}`);\n}\n\nnew Map([['foo', 3], ['bar', {}], ['baz', undefined]])\n.forEach(logMapElements);\n\n// Expected output: \"m[foo] = 3\"\n// Expected output: \"m[bar] = [object Object]\"\n// Expected output: \"m[baz] = undefined\"",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach"
    },
    "get": {
      "explain": "The get() method returns a specified element from a Map object. If the value that is associated to the provided key is an object, then you will get a reference to that object and any change made to that object will effectively modify it inside the Map object.\n",
      "code": "const map1 = new Map();\nmap1.set('bar', 'foo');\n\nconsole.log(map1.get('bar'));\n// Expected output: \"foo\"\n\nconsole.log(map1.get('baz'));\n// Expected output: undefined",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get"
    },
    "has": {
      "explain": "The has() method returns a boolean indicating whether an element with the specified key exists or not.",
      "code": "const map1 = new Map();\nmap1.set('bar', 'foo');\n\nconsole.log(map1.has('bar'));\n// Expected output: true\n\nconsole.log(map1.has('baz'));\n// Expected output: false",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has"
    },
    "keys": {
      "explain": "The keys() method returns a new iterator object that contains the keys for each element in the Map object in insertion order. In this particular case, this iterator object is also an iterable, so a for...of loop can be used.",
      "code": "const map1 = new Map();\n\nmap1.set('0', 'foo');\nmap1.set(1, 'bar');\n\nconst iterator1 = map1.keys();\n\nconsole.log(iterator1.next().value);\n// Expected output: \"0\"\n\nconsole.log(iterator1.next().value);\n// Expected output: 1",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/keys"
    },
    "set": {
      "explain": "The set() method adds or updates an entry in a Map object with a specified key and a value.",
      "code": "const map1 = new Map();\nmap1.set('bar', 'foo');\n\nconsole.log(map1.get('bar'));\n// Expected output: \"foo\"\n\nconsole.log(map1.get('baz'));\n// Expected output: undefined",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/set"
    },
    "values": {
      "explain": "The values() method returns a new iterator object that contains the values for each element in the Map object in insertion order.",
      "code": "const map1 = new Map();\n\nmap1.set('0', 'foo');\nmap1.set(1, 'bar');\n\nconst iterator1 = map1.values();\n\nconsole.log(iterator1.next().value);\n// Expected output: \"foo\"\n\nconsole.log(iterator1.next().value);\n// Expected output: \"bar\"",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/values"
    },
    "size": {
      "explain": "The size accessor property returns the number of elements in a Map object.",
      "code": "const map1 = new Map();\n\nmap1.set('a', 'alpha');\nmap1.set('b', 'beta');\nmap1.set('g', 'gamma');\n\nconsole.log(map1.size);\n// Expected output: 3",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/size"
    }
  },
  "promise": {
    "catch": {
      "explain": "El método catch() retorna una Promise y solo se ejecuta en los casos en los que la promesa se marca como Reject. Se comporta igual que al llamar Promise.prototype.then(undefined, onRejected) (de hecho, al llamar obj.catch(onRejected) internamente llama a obj.then(undefined, onRejected)).",
      "code": "// overriding original Promise.prototype.then/catch just to add some logs\n(function(Promise){\nvar originalThen = Promise.prototype.then;\nvar originalCatch = Promise.prototype.catch;\n\nPromise.prototype.then = function(){\nconsole.log('> > > > > > called .then on %o with arguments: %o', this, arguments);\nreturn originalThen.apply(this, arguments);\n};\nPromise.prototype.catch = function(){\nconsole.log('> > > > > > called .catch on %o with arguments: %o', this, arguments);\nreturn originalCatch.apply(this, arguments);\n};\n})(this.Promise);\n\n// calling catch on an already resolved promise\nPromise.resolve().catch(function XXX(){});\n\n// logs:\n// > > > > > > called .catch on Promise{} with arguments: Arguments{1} [0: function XXX()]\n// > > > > > > called .then on Promise{} with arguments: Arguments{2} [0: undefined, 1: function XXX()]",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch"
    },
    "then": {
      "explain": "El método then() retorna una Promesa. Recibe dos argumentos: funciones callback para los casos de éxito y fallo de Promise.\n\nNota: Si ambos argumentos son omitidos, o se proveen métodos que no sean funciones, se creará una nueva Promesa sin handlers adicionales, que simplemente adoptan el estado final de la Promesa que entonces es llamado. Si el primer argumento es omitido o se provee una no-función, el nuevo Promise que es creado simplemente adopta el estado cumplido del Promise que entonces es llamado (si se convierte en fulfilled). Si el segundo argument es omitido o se provee una no-función, el nuevo Promise que es creado simplemente adopta el estado de rechazo del Promesa que entonces es llamado (si se convierte en rechazado).",
      "code": "// al usar una promesa revuelta, el bloque 'then' se lanzará automáticamente,\n// pero sus funciones controladoras se lanzarán asíncronamente,\n// como demuestran los console.logs\nvar promResuelta = Promise.resolve(33);\n\nvar thenProm = promResuelta.then(función(valor){\nconsole.log(\"ésto será invocado cuando acabe el stack principal. El valor recibido y devuelto es: \" + valor);\nreturn valor;\n});\n// imprimimos al momento el valor de thenProm()\nconsole.log(thenProm);\n\n// usando setTimeout podemos posponer la ejecución de una función al momento en el que el stack quede vacío.\nsetTimeout(función(){\nconsole.log(thenProm);\n});\n\n\n// logs, en orden:\n// Promise {[[EstadoPromise¡]]: \"pendiente\", [[ValorPromise]]: undefined}\n// \"ésto será invocado cuando acabe el stack principal. El valor recibido y devuelto es: \"33\"\n// Promise {[[EstadoPromise]]: \"resuelta\", [[ValorPromise]]: 33}",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Promise/then"
    },
    "finally": {
      "explain": "El método finally() devuelve una Promise. Cuando la promesa se resuelve, sea exitosa o rechazada, la función de callback específicada será ejecutada. Esto ofrece una forma de ejecutar código sin importar como se haya resuelto la promesa.\n",
      "code": "let isLoading = true;\n\nfetch(myRequest).then(function(response) {\nvar contentType = response.headers.get(\"content-type\");\nif(contentType && contentType.includes(\"application/json\")) {\n return response.json();\n}\nthrow new TypeError(\"Oops, no hemos obtenido un JSON!\");\n})\n.then(function(json) { /* procesar el JSON */ })\n.catch(function(error) { console.log(error); /* esta línea podría arrojar error, e.g. cuando console = {} */ })\n.finally(function() { isLoading = false; });",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Promise/finally"
    },
    "resolve": {
      "explain": "El método Promise.resolve(value) retorna un objeto Promise que es resuelto con el valor dado. Si el valor es una promise, esa promise es devuelta; si el valor es un thenable (si tiene un método \"then\"), el valor devuelto le seguirá a ese thenable, adoptando su estado; de otro modo la promise devuelta estará completada con el valor.",
      "code": "const promise1 = Promise.resolve(123);\n\npromise1.then((value) => {\nconsole.log(value);\n// Expected output: 123\n});\n",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve"
    },
    "reject": {
      "explain": "El método Promise.reject(reason) retorna un objeto Promise que es rechazado por la razón específicada.",
      "code": "function resolved(result) {\nconsole.log('Resolved');\n}\n\nfunction rejected(result) {\nconsole.error(result);\n}\n\nPromise.reject(new Error('fail')).then(resolved, rejected);\n// Expected output: Error: fail",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject"
    },
    "race": {
      "explain": "El método Promise.race(iterable) retorna una promesa que se cumplirá o no tan pronto como una de las promesas del argumento iterable se cumpla o se rechace, con el valor o razón de rechazo de ésta.",
      "code": "var p1 = new Promise( (resolve, reject) => {\nsetTimeout(resolve, 500, \"uno\");\n});\nvar p2 = new Promise( (resolve, reject) => {\nsetTimeout(resolve, 100, \"dos\");\n});\n\nPromise.race([p1, p2]).then( value => {\nconsole.log(value); // \"dos\"\n// Ambas se resuelven, pero la p2 antes.\n});",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Promise/race"
    },
    "all": {
      "explain": "El método Promise.all(iterable) devuelve una promesa que termina correctamente cuando todas las promesas en el argumento iterable han sido concluídas con éxito, o bien rechaza la petición con el motivo pasado por la primera promesa que es rechazada.",
      "code": "var p1 = Promise.resolve(3);\nvar p2 = 1337;\nvar p3 = new Promise((resolve, reject) => {\nsetTimeout(resolve, 100, \"foo\");\n});\n\nPromise.all([p1, p2, p3]).then(values => {\nconsole.log(values); // [3, 1337, \"foo\"]\n});",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Promise/all"
    }
  },
  "json": {
    "parse": {
      "explain": "El método JSON.parse() analiza una cadena de texto como JSON, transformando opcionalmente el valor producido por el análisis.",
      "code": "JSON.parse('{}');              // {}\nJSON.parse('true');            // true\nJSON.parse('\"foo\"');           // \"foo\"\nJSON.parse('[1, 5, \"false\"]'); // [1, 5, \"false\"]\nJSON.parse('null');            // null",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse"
    },
    "stringify": {
      "explain": "El método JSON.stringify() convierte un objeto o valor de JavaScript en una cadena de texto JSON, opcionalmente reemplaza valores si se indica una función de reemplazo, o si se especifican las propiedades mediante un array de reemplazo.\n",
      "code": "console.log(JSON.stringify({ x: 5, y: 6 }));\n// Expected output: \"{\"x\":5,\"y\":6}\"\n\nconsole.log(JSON.stringify([new Number(3), new String('false'), new Boolean(false)]));\n// Expected output: \"[3,\"false\",false]\"\n\nconsole.log(JSON.stringify({ x: [10, undefined, function(){}, Symbol('')] }));\n// Expected output: \"{\"x\":[10,null,null,null]}\"\n\nconsole.log(JSON.stringify(new Date(2006, 0, 2, 15, 4, 5)));\n// Expected output: \"\"2006-01-02T15:04:05.000Z\"\"",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify"
    }
  },
  "boolean": {
    "tostring": {
      "explain": "El método toString() retorna una cadena representando el código fuente de la función.",
      "code": "Function.prototype.toString.call(\"foo\"); // TypeError\n\nvar proxy = new Proxy(function() {}, {});\nFunction.prototype.toString.call(proxy); // TypeError",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Function/toString"
    },
    "valueof": {
      "explain": "El método valueOf() retorna el valor primitivo del objeto especificado.",
      "code": "function MyNumberType(n) {\nthis.number = n;\n}\n\nMyNumberType.prototype.valueOf = function() {\nreturn this.number;\n};\n\nconst object1 = new MyNumberType(4);\n\nconsole.log(object1 + 3);\n// Expected output: 7",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf"
    }
  },
  "error": {
    "tostring": {
      "explain": "The toString() method returns a string representing the specified Error object.",
      "code": "Error.prototype.toString = function () {\nif (\nthis === null ||\n(typeof this !== \"object\" && typeof this !== \"function\")\n) {\nthrow new TypeError();\n}\nlet name = this.name;\nname = name === undefined ? \"Error\" : `${name}`;\nlet msg = this.message;\nmsg = msg === undefined ? \"\" : `${msg}`;\nif (name === \"\") {\nreturn msg;\n}\nif (msg === \"\") {\nreturn name;\n}\nreturn `${name}: ${msg}`;\n};",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/toString"
    }
  },
  "set": {
    "add": {
      "explain": "El método add() añade un nuevo elemento con un valor específico al final del objeto Set.",
      "code": "var mySet = new Set();\n\nmySet.add(1);\nmySet.add(5).add(\"some text\"); // chainable\n\nconsole.log(mySet);\n// Set [1, 5, \"some text\"]",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Set/add"
    },
    "clear": {
      "explain": "El método clear() remueve todos los elementos de un objeto Set.",
      "code": "var mySet = new Set();\nmySet.add(1);\nmySet.add(\"foo\");\n\nmySet.size;       // 2\nmySet.has(\"foo\"); // true\n\nmySet.clear();\n\nmySet.size;       // 0\nmySet.has(\"bar\")  // false",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Set/clear"
    },
    "delete": {
      "explain": "El método delete() remueve el elemento especificado del objeto Set.",
      "code": "var mySet = new Set();\nmySet.add(\"foo\");\n\nmySet.delete(\"bar\"); // Retorna false. No hay elemento \"bar\" para ser removido.\nmySet.delete(\"foo\"); // Retorna true.  Removido exitosamente.\n\nmySet.has(\"foo\");    // Retorna false. El elemento \"foo\" ya no está presente.",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Set/delete"
    },
    "entries": {
      "explain": "El método entries() devuelve un nuevo objeto de tipo Iterator que contiene un array de tuplas [value, value] por cada elemento en el Set original, manteniendo el orden de inserción. En los objetos de tipo Set no existe una clave key como ocurre en los objetos de tipo Map. Sin embargo, para mantener una API similar a la de los objetos de tipo Map, cada entry contiene el mismo valor para su clave y valor, devolviendo por tanto un array de tuplas [value, value].",
      "code": "const set1 = new Set();\nset1.add(42);\nset1.add('forty two');\n\nconst iterator1 = set1.entries();\n\nfor (const entry of iterator1) {\nconsole.log(entry);\n// Expected output: Array [42, 42]\n// Expected output: Array [\"forty two\", \"forty two\"]\n}",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Set/entries"
    },
    "forEach": {
      "explain": "The forEach() method executes a provided function once for each value in the Set object, in insertion order.",
      "code": "function logSetElements(value1, value2, set) {\nconsole.log(`s[${value1}] = ${value2}`);\n}\n\nnew Set(['foo', 'bar', undefined]).forEach(logSetElements);\n\n// Expected output: \"s[foo] = foo\"\n// Expected output: \"s[bar] = bar\"\n// Expected output: \"s[undefined] = undefined\"",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/forEach"
    },
    "has": {
      "explain": "El método has() retorna un booleano indicando si el elemento especificado existe en el objeto Set o no.\n",
      "code": "var mySet = new Set();\nmySet.add(\"foo\");\n\nmySet.has(\"foo\");  // retorna true\nmySet.has(\"bar\");  // retorna false",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Set/has"
    },
    "values": {
      "explain": "El método values() retorna un objeto de tipo Iterator que contiene los valores para cada elemento en el objecto Set en orden de inserción.",
      "code": "const set1 = new Set();\nset1.add(42);\nset1.add('forty two');\n\nconst iterator1 = set1.values();\n\nconsole.log(iterator1.next().value);\n// Expected output: 42\n\nconsole.log(iterator1.next().value);\n// Expected output: \"forty two\"",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Set/values"
    },
    "size": {
      "explain": "La propiedad de acceso size devuelve el número de elementos que hay en el objeto Set.\n",
      "code": "var mySet = new Set();\nmySet.add(1);\nmySet.add(5);\nmySet.add(\"un texto\")\n\nmySet.size; // 3",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Set/size"
    },
    "keys": {
      "explain": "The keys() method is an alias for the values() method.",
      "code": "Syntax\nkeys()",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/keys"
    }
  },
  "reflect": {
    "apply": {
      "explain": "The Reflect.apply() static method calls a target function with arguments as specified.",
      "code": "console.log(Reflect.apply(Math.floor, undefined, [1.75]));\n// Expected output: 1\n\nconsole.log(Reflect.apply(String.fromCharCode, undefined, [104, 101, 108, 108, 111]));\n// Expected output: \"hello\"\n\nconsole.log(Reflect.apply(RegExp.prototype.exec, /ab/, ['confabulation']).index);\n// Expected output: 4\n\nconsole.log(Reflect.apply(''.charAt, 'ponies', [3]));\n// Expected output: \"i\"",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/apply"
    },
    "construct": {
      "explain": "The Reflect.construct() static method acts like the new operator, but as a function. It is equivalent to calling new target(...args). It gives also the added option to specify a different prototype.",
      "code": "function func1(a, b, c) {\nthis.sum = a + b + c;\n}\n\nconst args = [1, 2, 3];\nconst object1 = new func1(...args);\nconst object2 = Reflect.construct(func1, args);\n\nconsole.log(object2.sum);\n// Expected output: 6\n\nconsole.log(object1.sum);\n// Expected output: 6",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/construct"
    },
    "defineproperty": {
      "explain": "The Reflect.defineProperty() static method is like Object.defineProperty() but returns a Boolean.\n",
      "code": "const object1 = {};\n\nif (Reflect.defineProperty(object1, 'property1', { value: 42 })) {\nconsole.log('property1 created!');\n// Expected output: \"property1 created!\"\n} else {\nconsole.log('problem creating property1');\n}\n\nconsole.log(object1.property1);\n// Expected output: 42",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/defineProperty"
    },
    "deleteproperty": {
      "explain": "The Reflect.deleteProperty() static method allows to delete properties. It is like the delete operator as a function.\n",
      "code": "const object1 = {\nproperty1: 42\n};\n\nReflect.deleteProperty(object1, 'property1');\n\nconsole.log(object1.property1);\n// Expected output: undefined\n\nconst array1 = [1, 2, 3, 4, 5];\nReflect.deleteProperty(array1, '3');\n\nconsole.log(array1);\n// Expected output: Array [1, 2, 3, undefined, 5]",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/deleteProperty"
    },
    "get": {
      "explain": "The Reflect.get() static method works like getting a property from an object (target[propertyKey]) as a function.",
      "code": "const object1 = {\nx: 1,\ny: 2\n};\n\nconsole.log(Reflect.get(object1, 'x'));\n// Expected output: 1\n\nconst array1 = ['zero', 'one'];\n\nconsole.log(Reflect.get(array1, 1));\n// Expected output: \"one\"",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/get"
    },
    "getownpropertydescriptor": {
      "explain": "The Reflect.getOwnPropertyDescriptor() static method is similar to Object.getOwnPropertyDescriptor(). It returns a property descriptor of the given property if it exists on the object, undefined otherwise.\n",
      "code": "const object1 = {\nproperty1: 42\n};\n\nconsole.log(Reflect.getOwnPropertyDescriptor(object1, 'property1').value);\n// Expected output: 42\n\nconsole.log(Reflect.getOwnPropertyDescriptor(object1, 'property2'));\n// Expected output: undefined\n\nconsole.log(Reflect.getOwnPropertyDescriptor(object1, 'property1').writable);\n// Expected output: true",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getOwnPropertyDescriptor"
    },
    "getprototypeof": {
      "explain": "The Reflect.getPrototypeOf() static method is almost the same method as Object.getPrototypeOf(). It returns the prototype (i.e. the value of the internal [[Prototype]] property) of the specified object.",
      "code": "const object1 = {\nproperty1: 42\n};\n\nconst proto1 = Reflect.getPrototypeOf(object1);\n\nconsole.log(proto1);\n// Expected output: Object {  }\n\nconsole.log(Reflect.getPrototypeOf(proto1));\n// Expected output: null",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getPrototypeOf"
    },
    "has": {
      "explain": "The Reflect.has() static method works like the in operator as a function.",
      "code": "const object1 = {\nproperty1: 42\n};\n\nconsole.log(Reflect.has(object1, 'property1'));\n// Expected output: true\n\nconsole.log(Reflect.has(object1, 'property2'));\n// Expected output: false\n\nconsole.log(Reflect.has(object1, 'toString'));\n// Expected output: true",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/has"
    },
    "isextensible": {
      "explain": "The Reflect.isExtensible() static method determines if an object is extensible (whether it can have new properties added to it). It is similar to Object.isExtensible(), but with some differences.",
      "code": "const object1 = {};\n\nconsole.log(Reflect.isExtensible(object1));\n// Expected output: true\n\nReflect.preventExtensions(object1);\n\nconsole.log(Reflect.isExtensible(object1));\n// Expected output: false\n\nconst object2 = Object.seal({});\n\nconsole.log(Reflect.isExtensible(object2));\n// Expected output: false",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/isExtensible"
    },
    "ownkeys": {
      "explain": "The Reflect.ownKeys() static method returns an array of the target object's own property keys.",
      "code": "const object1 = {\nproperty1: 42,\nproperty2: 13\n};\n\nconst array1 = [];\n\nconsole.log(Reflect.ownKeys(object1));\n// Expected output: Array [\"property1\", \"property2\"]\n\nconsole.log(Reflect.ownKeys(array1));\n// Expected output: Array [\"length\"]",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/ownKeys"
    },
    "preventextensions": {
      "explain": "The Reflect.preventExtensions() static method prevents new properties from ever being added to an object (i.e., prevents future extensions to the object). It is similar to Object.preventExtensions(), but with some differences.",
      "code": "const object1 = {};\n\nconsole.log(Reflect.isExtensible(object1));\n// Expected output: true\n\nReflect.preventExtensions(object1);\n\nconsole.log(Reflect.isExtensible(object1));\n// Expected output: false",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/preventExtensions"
    },
    "set": {
      "explain": "The Reflect.set() static method works like setting a property on an object.",
      "code": "const object1 = {};\nReflect.set(object1, 'property1', 42);\n\nconsole.log(object1.property1);\n// Expected output: 42\n\nconst array1 = ['duck', 'duck', 'duck'];\nReflect.set(array1, 2, 'goose');\n\nconsole.log(array1[2]);\n// Expected output: \"goose\"",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/set"
    },
    "setprototypeof": {
      "explain": "The Reflect.setPrototypeOf() static method is the same method as Object.setPrototypeOf(), except for its return type. It sets the prototype (i.e., the internal [[Prototype]] property) of a specified object to another object or to null, and returns true if the operation was successful, or false otherwise.",
      "code": "const object1 = {};\n\nconsole.log(Reflect.setPrototypeOf(object1, Object.prototype));\n// Expected output: true\n\nconsole.log(Reflect.setPrototypeOf(object1, null));\n// Expected output: true\n\nconst object2 = {};\n\nconsole.log(Reflect.setPrototypeOf(Object.freeze(object2), null));\n// Expected output: false",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/setPrototypeOf"
    }
  },
  "weakmap": {
    "delete": {
      "explain": "El método delete() elimina un elemento específico del objeto WeakMap .\n",
      "code": "var wm = new WeakMap();\nwm.set(window, \"foo\");\n\nwm.delete(window); // Devuelve true. Eliminado correctamente.\n\nwm.has(window);    // Devuelve false. El elemento window ya no es parte de WeakMap.",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/delete"
    },
    "get": {
      "explain": "El método get() devuelve un elemento específico del objeto WeakMap.",
      "code": "const weakmap1 = new WeakMap();\nconst object1 = {};\nconst object2 = {};\n\nweakmap1.set(object1, 42);\n\nconsole.log(weakmap1.get(object1));\n// Expected output: 42\n\nconsole.log(weakmap1.get(object2));\n// Expected output: undefined",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/get"
    },
    "has": {
      "explain": "El método has() devuelve un boleano indicando ya sea, si el elemento con la llave específica existe o no en el objeto WeakMap.",
      "code": "const weakmap1 = new WeakMap();\nconst object1 = {};\nconst object2 = {};\n\nweakmap1.set(object1, 'foo');\n\nconsole.log(weakmap1.has(object1));\n// Expected output: true\n\nconsole.log(weakmap1.has(object2));\n// Expected output: false",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/has"
    },
    "set": {
      "explain": "El método set() añade un nuevo elemento con su key y value específicos al objeto WeakMap.",
      "code": "const weakmap1 = new WeakMap();\nconst object1 = {};\nconst object2 = {};\n\nweakmap1.set(object1, 'foo');\nweakmap1.set(object2, 'bar');\n\nconsole.log(weakmap1.get(object1));\n// Expected output: \"foo\"\n\nconsole.log(weakmap1.get(object2));\n// Expected output: \"bar\"",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/set"
    }
  },
  "weakset": {
    "add": {
      "explain": "The add() method appends a new object to the end of a WeakSet object.",
      "code": "const weakset1 = new WeakSet();\nconst object1 = {};\n\nweakset1.add(object1);\nconsole.log(weakset1.has(object1));\n// Expected output: true\n\ntry {\nweakset1.add(1);\n} catch (error) {\nconsole.log(error);\n// Expected output (Chrome): TypeError: Invalid value used in weak set\n// Expected output (Firefox): TypeError: WeakSet value must be an object, got 1\n// Expected output (Safari): TypeError: Attempted to add a non-object key to a WeakSet\n}",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/add"
    },
    "delete": {
      "explain": "The delete() method removes the specified element from a WeakSet object.",
      "code": "const weakset1 = new WeakSet();\nconst object1 = {};\n\nweakset1.add(object1);\n\nconsole.log(weakset1.has(object1));\n// Expected output: true\n\nweakset1.delete(object1);\n\nconsole.log(weakset1.has(object1));\n// Expected output: false",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/delete"
    },
    "has": {
      "explain": "The has() method returns a boolean indicating whether an object exists in a WeakSet or not.",
      "code": "const weakset1 = new WeakSet();\nconst object1 = {};\nconst object2 = {};\n\nweakset1.add(object1);\n\nconsole.log(weakset1.has(object1));\n// Expected output: true\n\nconsole.log(weakset1.has(object2));\n// Expected output: false",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/has"
    }
  },
  "intl": {
    "collator": {
      "explain": "The Intl.Collator object enables language-sensitive string comparison.",
      "code": "console.log(['Z', 'a', 'z', 'ä'].sort(new Intl.Collator('de').compare));\n// Expected output: Array [\"a\", \"ä\", \"z\", \"Z\"]\n\nconsole.log(['Z', 'a', 'z', 'ä'].sort(new Intl.Collator('sv').compare));\n// Expected output: Array [\"a\", \"z\", \"Z\", \"ä\"]\n\nconsole.log(['Z', 'a', 'z', 'ä'].sort(new Intl.Collator('de', { caseFirst: 'upper' } ).compare));\n// Expected output: Array [\"a\", \"ä\", \"Z\", \"z\"]",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator"
    },
    "datetimeformat": {
      "explain": "The Intl.DateTimeFormat object enables language-sensitive date and time formatting.",
      "code": "const date = new Date(Date.UTC(2020, 11, 20, 3, 23, 16, 738));\n// Results below assume UTC timezone - your results may vary\n\n// Specify default date formatting for language (locale)\nconsole.log(new Intl.DateTimeFormat('en-US').format(date));\n// Expected output: \"12/20/2020\"\n\n// Specify default date formatting for language with a fallback language (in this case Indonesian)\nconsole.log(new Intl.DateTimeFormat(['ban', 'id']).format(date));\n// Expected output: \"20/12/2020\"\n\n// Specify date and time format using \"style\" options (i.e. full, long, medium, short)\nconsole.log(new Intl.DateTimeFormat('en-GB', { dateStyle: 'full', timeStyle: 'long', timeZone: 'Australia/Sydney' }).format(date));\n// Expected output: \"Sunday, 20 December 2020 at 14:23:16 GMT+11\"",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat"
    },
    "numberformat": {
      "explain": "The Intl.NumberFormat object enables language-sensitive number formatting.",
      "code": "const number = 123456.789;\n\nconsole.log(new Intl.NumberFormat('de-DE', { style: 'currency', currency: 'EUR' }).format(number));\n// Expected output: \"123.456,79 €\"\n\n// The Japanese yen doesn't use a minor unit\nconsole.log(new Intl.NumberFormat('ja-JP', { style: 'currency', currency: 'JPY' }).format(number));\n// Expected output: \"￥123,457\"\n\n// Limit to three significant digits\nconsole.log(new Intl.NumberFormat('en-IN', { maximumSignificantDigits: 3 }).format(number));\n// Expected output: \"1,23,000\"",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat"
    },
    "getcanonicallocales": {
      "explain": "The Intl.getCanonicalLocales() static method returns an array containing the canonical locale names. Duplicates will be omitted and elements will be validated as structurally valid language tags.",
      "code": "console.log(Intl.getCanonicalLocales('EN-US'));\n// Expected output: Array [\"en-US\"]\n\nconsole.log(Intl.getCanonicalLocales(['EN-US', 'Fr']));\n// Expected output: Array [\"en-US\", \"fr\"]\n\ntry {\nIntl.getCanonicalLocales('EN_US');\n} catch (err) {\nconsole.log(err.toString());\n// Expected output: RangeError: invalid language tag: EN_US\n}",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/getCanonicalLocales"
    },
    "pluralrules": {
      "explain": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/getCanonicalLocales",
      "code": "// Arabic has different plural rules\n\nnew Intl.PluralRules(\"ar-EG\").select(0);\n// → 'zero'\nnew Intl.PluralRules(\"ar-EG\").select(1);\n// → 'one'\nnew Intl.PluralRules(\"ar-EG\").select(2);\n// → 'two'\nnew Intl.PluralRules(\"ar-EG\").select(6);\n// → 'few'\nnew Intl.PluralRules(\"ar-EG\").select(18);\n// → 'many",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules"
    },
    "relativetimeformat": {
      "explain": "The Intl.RelativeTimeFormat object enables language-sensitive relative time formatting.",
      "code": "const rtf1 = new Intl.RelativeTimeFormat('en', { style: 'narrow' });\n\nconsole.log(rtf1.format(3, 'quarter'));\n// Expected output: \"in 3 qtrs.\"\n\nconsole.log(rtf1.format(-1, 'day'));\n// Expected output: \"1 day ago\"\n\nconst rtf2 = new Intl.RelativeTimeFormat('es', { numeric: 'auto' });\n\nconsole.log(rtf2.format(2, 'day'));\n// Expected output: \"pasado mañana\"",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat"
    }
  },
  "symbol": {
    "for": {
      "explain": "El método Symbol.for(key) busca los símbolos existentes en un registro de símbolos en tiempo de ejecución con la clave dada y lo devuelve si lo encuentra. En caso contrario, se crea un nuevo símbolo en el registro global de símbolos con esta clave.",
      "code": "console.log(Symbol.for('bar') === Symbol.for('bar'));\n// Expected output: true\n\nconsole.log(Symbol('bar') === Symbol('bar'));\n// Expected output: false\n\nconst symbol1 = Symbol.for('foo');\n\nconsole.log(symbol1.toString());\n// Expected output: \"Symbol(foo)\"",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Symbol/for"
    },
    "keyfor": {
      "explain": "El método Symbol.keyFor(sym) recupera la clave de símbolo compartida del símbolo pasado como argumento desde el registro global de símbolos.",
      "code": "const globalSym = Symbol.for('foo'); // Global symbol\n\nconsole.log(Symbol.keyFor(globalSym));\n// Expected output: \"foo\"\n\nconst localSym = Symbol(); // Local symbol\n\nconsole.log(Symbol.keyFor(localSym));\n// Expected output: undefined\n\nconsole.log(Symbol.keyFor(Symbol.iterator));\n// Expected output: undefined",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Symbol/keyFor"
    },
    "description": {
      "explain": "La propiedad description de sólo lectura es una cadena que devuelve la descripción opcional de los objetos Symbol.",
      "code": "console.log(Symbol('desc').description);\n// Expected output: \"desc\"\n\nconsole.log(Symbol.iterator.description);\n// Expected output: \"Symbol.iterator\"\n\nconsole.log(Symbol.for('foo').description);\n// Expected output: \"foo\"\n\nconsole.log(`${Symbol('foo').description}bar`);\n// Expected output: \"foobar\"",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Symbol/description"
    },
    "symboltoprimitive": {
      "explain": "El Symbol.toPrimitive es un símbolo que especifica una propiedad con valor de función que se llama para convertir un objeto en un valor primitivo correspondiente.",
      "code": "const object1 = {\n[Symbol.toPrimitive](hint) {\nif (hint === 'number') {\nreturn 42;\n}\nreturn null;\n}\n};\n\nconsole.log(+object1);\n// Expected output: 42",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive"
    },
    "symboltostringtag": {
      "explain": "El símbolo conocido como Symbol.toStringTag es una propiedad con valor de cadena que se utiliza en la creación de la descripción de cadena por defecto de un objeto. Se accede a ella internamente mediante el método Object.prototype.toString().",
      "code": "class ValidatorClass {\nget [Symbol.toStringTag]() {\nreturn 'Validator';\n}\n}\n\nconsole.log(Object.prototype.toString.call(new ValidatorClass()));\n// Expected output: \"[object Validator]\"",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag"
    },
    "symbolunscopables": {
      "explain": "El símbolo conocido como Symbol.unscopables se utiliza para especificar un valor de objeto cuyos nombres de propiedades propias y heredadas se excluyen de los enlaces de entorno with (en-US) del objeto asociado.",
      "code": "const object1 = {\nproperty1: 42\n};\n\nobject1[Symbol.unscopables] = {\nproperty1: true\n};\n\nwith (object1) {\nconsole.log(property1);\n// Expected output: Error: property1 is not defined\n}",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Symbol/unscopables"
    }
  },
  "regexp": {
    "exec": {
      "explain": "El método exec() ejecuta una busqueda sobre las coincidencias de una expresión regular en una cadena especifica. Devuelve el resultado como array, o null.",
      "code": "// Busca \"quick brown\" seguido de \"jumps\", ignorando los caracteres que se\n// encuentren entre medias.\n// Recuerda \"brown\" y \"jumps\"\n// Ignora mayusculas y minusculas\nvar re = /quick\\s(brown).+?(jumps)/ig;\nvar result = re.exec('The Quick Brown Fox Jumps Over The Lazy Dog');",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec"
    },
    "test": {
      "explain": "El método test() ejecuta la búsqueda de una ocurrencia entre una expresión regular y una cadena especificada. Devuelve true o false.",
      "code": "Ejemplo simple que prueba si \"hello\" está contenido al principio de una cadena y devuelve un valor booleano.\n\nvar cadena = \"hello world!\";\nvar result = /^hello/.test(cadena);\nconsole.log(result); // true",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test"
    },
    "compile": {
      "explain": "Obsoleto: Esta característica ya no se recomienda. Aunque es posible que algunos navegadores aún lo admitan, probablemente ya se ha eliminado de los estándares web relevantes, está en proceso de eliminación o solo se conserva por motivos de compatibilidad. Evite usarlo y actualice el código existente si es posible; consulte la tabla de compatibilidad en la parte inferior de esta página para orientar su decisión. Tenga en cuenta que esta característica puede dejar de funcionar en cualquier momento.",
      "code": "var regexObj = new RegExp('foo', 'gi');\nregexObj.compile('new foo', 'g');",
      "link": "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/RegExp/compile"
    },
    "flags": {
      "explain": "The flags accessor property represents the flags of the current regular expression object.",
      "code": "// Outputs RegExp flags in alphabetical order\n\nconsole.log(/foo/ig.flags);\n// Expected output: \"gi\"\n\nconsole.log(/bar/myu.flags);\n// Expected output: \"muy\"",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/flags"
    },
    "global": {
      "explain": "The global accessor property indicates whether or not the g flag is used with the regular expression.",
      "code": "const regex1 = new RegExp('foo', 'g');\n\nconsole.log(regex1.global);\n// Expected output: true\n\nconst regex2 = new RegExp('bar', 'i');\n\nconsole.log(regex2.global);\n// Expected output: false",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global"
    },
    "ignoreCase": {
      "explain": "The ignoreCase accessor property indicates whether or not the i flag is used with the regular expression.",
      "code": "const regex1 = new RegExp('foo');\nconst regex2 = new RegExp('foo', 'i');\n\nconsole.log(regex1.test('Football'));\n// Expected output: false\n\nconsole.log(regex2.ignoreCase);\n// Expected output: true\n\nconsole.log(regex2.test('Football'));\n// Expected output: true",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/ignoreCase"
    },
    "multiline": {
      "explain": "The multiline accessor property indicates whether or not the m flag is used with the regular expression.\n",
      "code": "const regex1 = new RegExp('^football');\nconst regex2 = new RegExp('^football', 'm');\n\nconsole.log(regex1.multiline);\n// Expected output: false\n\nconsole.log(regex2.multiline);\n// Expected output: true\n\nconsole.log(regex1.test('rugby\\nfootball'));\n// Expected output: false\n\nconsole.log(regex2.test('rugby\\nfootball'));\n// Expected output: true",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/multiline"
    },
    "source": {
      "explain": "The source accessor property is a string containing the source text of the regex object, without the two forward slashes on both sides or any flags.",
      "code": "const regex1 = /fooBar/ig;\n\nconsole.log(regex1.source);\n// Expected output: \"fooBar\"\n\nconsole.log(new RegExp().source);\n// Expected output: \"(?:)\"\n\nconsole.log(new RegExp('\\n').source === '\\\\n');\n// Expected output: true (starting with ES5)\n// Due to escaping",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/source"
    },
    "sticky": {
      "explain": "The sticky accessor property indicates whether or not the y flag is used with the regular expression.\n",
      "code": "const str1 = 'table football';\nconst regex1 = new RegExp('foo', 'y');\n\nregex1.lastIndex = 6;\n\nconsole.log(regex1.sticky);\n// Expected output: true\n\nconsole.log(regex1.test(str1));\n// Expected output: true\n\nconsole.log(regex1.test(str1));\n// Expected output: false",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky"
    },
    "unicode": {
      "explain": "The unicode accessor property indicates whether or not the u flag is used with the regular expression.",
      "code": "const regex1 = new RegExp('\\u{61}');\nconst regex2 = new RegExp('\\u{61}', 'u');\n\nconsole.log(regex1.unicode);\n// Expected output: false\n\nconsole.log(regex2.unicode);\n// Expected output: true\n\nconsole.log(regex1.source);\n// Expected output: \"a\"\n\nconsole.log(regex2.source);\n// Expected output: \"a\"",
      "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode"
    }
  }
}