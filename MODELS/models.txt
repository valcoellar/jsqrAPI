{
    array:{
        concat:{
            explain: '''El método concat() se usa para unir dos o más arrays. Este método no cambia los arrays existentes, sino que devuelve un nuevo array.''',
            code: '''const array1 = ['a', 'b', 'c'];
                const array2 = ['d', 'e', 'f'];
                const array3 = array1.concat(array2);

                console.log(array3);
                // Expected output: Array ["a", "b", "c", "d", "e", "f"]' ''',
            link: 'https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/concat',
        }
        copywithin:{
            explain: '''El método copyWithin() transfiere una copia plana de una sección a otra dentro del mismo array ( o contexto similar ), sin modificar su propiedad length y lo devuelve.''',
            code: '''const array1 = ['a', 'b', 'c', 'd', 'e'];

// Copy to index 0 the element at index 3
console.log(array1.copyWithin(0, 3, 4));
// Expected output: Array ["d", "b", "c", "d", "e"]

// Copy to index 1 all elements from index 3 to the end
console.log(array1.copyWithin(1, 3));
// Expected output: Array ["d", "d", "e", "d", "e"] ''',
        link: 'https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin'
        }
        entries:{
            explain:'''El método entries() retorna un nuevo objeto Array Iterator que contiene los pares clave/valor para cada índice de la matriz.'''
            code:'''const array1 = ['a', 'b', 'c'];

const iterator1 = array1.entries();

console.log(iterator1.next().value);
// Expected output: Array [0, "a"]

console.log(iterator1.next().value);
// Expected output: Array [1, "b"]
''' 
            link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/entries'''
        }
        every:{
            explain:'''Determina si todos los elementos en el array satisfacen una condición.'''
            code:'''const isBelowThreshold = (currentValue) => currentValue < 40;

const array1 = [1, 30, 39, 29, 10, 13];

console.log(array1.every(isBelowThreshold));
// Expected output: true'''
            link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/every'''
        }
        fill:{
            explain:'''El método fill() cambia todos los elementos en un arreglo por un valor estático, desde el índice start (por defecto 0) hasta el índice end (por defecto array.length). Devuelve el arreglo modificado.'''
            code:'''const array1 = [1, 2, 3, 4];

// Fill with 0 from position 2 until position 4
console.log(array1.fill(0, 2, 4));
// Expected output: Array [1, 2, 0, 0]

// Fill with 5 from position 1
console.log(array1.fill(5, 1));
// Expected output: Array [1, 5, 5, 5]

console.log(array1.fill(6));
// Expected output: Array [6, 6, 6, 6]
'''
            link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/fill'''
        }
        filter:{
            explain:'''El método filter() crea un nuevo array con todos los elementos que cumplan la condición implementada por la función dada.'''
            code:'''const words = ['spray', 'limit', 'elite', 'exuberant', 'destruction', 'present'];

const result = words.filter(word => word.length > 6);

console.log(result);
// Expected output: Array ["exuberant", "destruction", "present"]
'''
            link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/filter'''
        }
        find:{
            explain:'''El método find() devuelve el valor del primer elemento del array que cumple la función de prueba proporcionada.'''
            code:'''const array1 = [5, 12, 8, 130, 44];

const found = array1.find(element => element > 10);

console.log(found);
// Expected output: 12
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/find'''
            
        }
        findindex:{
            explain:'''El método findIndex() devuelve el índice del primer elemento de un array que cumpla con la función de prueba proporcionada. En caso contrario devuelve -1.

'''
    code:'''const array1 = [5, 12, 8, 130, 44];

const isLargeNumber = (element) => element > 13;

console.log(array1.findIndex(isLargeNumber));
// Expected output: 3
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex'''
        }
        flat:{
            explain:'''El método flat() crea una nueva matriz con todos los elementos de sub-array concatenados recursivamente hasta la profundidad especificada.'''
            code:'''var arr1 = [1, 2, [3, 4]];
arr1.flat();
// [1, 2, 3, 4]

var arr2 = [1, 2, [3, 4, [5, 6]]];
arr2.flat();
// [1, 2, 3, 4, [5, 6]]

var arr3 = [1, 2, [3, 4, [5, 6]]];
arr3.flat(2);
// [1, 2, 3, 4, 5, 6]
'''
    link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/flat'''
    
        }
        flatmap:{
            explain:'''El método flatMap() primero mapea cada elemento usando una función de mapeo, luego aplana el resultado en una nueva matriz. Es idéntico a un map seguido de un flatten (en-US)de profundidad 1, pero flatMap es a menudo útil y la fusión de ambos en un método es ligeramente más eficiente.'''
            code:'''const arr1 = [1, 2, [3], [4, 5], 6, []];

const flattened = arr1.flatMap(num => num);

console.log(flattened);
// Expected output: Array [1, 2, 3, 4, 5, 6]
'''
    link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap'''
    
        }
        foreach:{
            explain:'''El método forEach() ejecuta la función indicada una vez por cada elemento del array.'''
            code:'''const array1 = ['a', 'b', 'c'];

array1.forEach(element => console.log(element));

// Expected output: "a"
// Expected output: "b"
// Expected output: "c"
'''
    link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach'''
        }
        includes:{
            explain:'''El método includes() determina si una matriz incluye un determinado elemento, devuelve true o false según corresponda.'''
            code:'''const array1 = [1, 2, 3];

console.log(array1.includes(2));
// Expected output: true

const pets = ['cat', 'dog', 'bat'];

console.log(pets.includes('cat'));
// Expected output: true

console.log(pets.includes('at'));
// Expected output: false
'''
    link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/includes'''
        }
        indexof:{
            explain:'''El método indexOf() retorna el primer índice en el que se puede encontrar un elemento dado en el array, ó retorna -1 si el elemento no esta presente.'''
            code:'''var indices = [];
var array = ['a', 'b', 'a', 'c', 'a', 'd'];
var element = 'a';
var idx = array.indexOf(element);
while (idx != -1) {
  indices.push(idx);
  idx = array.indexOf(element, idx + 1);
}
console.log(indices);
// [0, 2, 4]
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf'''
        }
        join:{
            explain:'''El método join() une todos los elementos de una matriz (o un objeto similar a una matriz) en una cadena y devuelve esta cadena.'''
            code:'''var a = ['Viento', 'Lluvia', 'Fuego'];
var miVar1 = a.join();      // asigna 'Viento,Lluvia,Fuego' a miVar1
var miVar2 = a.join(', ');  // asigna 'Viento, Lluvia, Fuego' a miVar2
var miVar3 = a.join(' + '); // asigna 'Viento + Lluvia + Fuego' a miVar3
var miVar4 = a.join('');    // asigna 'VientoLluviaFuego' a miVar4
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/join'''
        }
        keys:{
            explain:'''El método keys() devuelve un nuevo objeto Array Iterator que contiene las claves de índice con las que acceder a cada elemento en el array.

'''
        code:'''const array1 = ['a', 'b', 'c'];
const iterator = array1.keys();

for (const key of iterator) {
  console.log(key);
}

// Expected output: 0
// Expected output: 1
// Expected output: 2
'''
    link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/keys'''
        }
        lastindexof:{
            explain:'''El método lastIndexOf() devuelve el último índice en el que un cierto elemento puede encontrarse en el arreglo, ó -1 si el elemento no se encontrara. El arreglo es recorrido en sentido contrario, empezando por el índice fromIndex.'''
            code:'''const animals = ['Dodo', 'Tiger', 'Penguin', 'Dodo'];

console.log(animals.lastIndexOf('Dodo'));
// Expected output: 3

console.log(animals.lastIndexOf('Tiger'));
// Expected output: 1
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf'''
        }
        map:{
            explain:'''El método map() crea un nuevo array con los resultados de la llamada a la función indicada aplicados a cada uno de sus elementos.'''
            code:'''var numbers = [1, 5, 10, 15];
var doubles = numbers.map(function(x) {
   return x * 2;
});
// doubles is now [2, 10, 20, 30]
// numbers is still [1, 5, 10, 15]

var numbers = [1, 4, 9];
var roots = numbers.map(function(num) {
    return Math.sqrt(num);
});
// roots is now [1, 2, 3]
// numbers is still [1, 4, 9]
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/map'''
        }
        pop:{
            explain:'''El método pop() elimina el último elemento de un array y lo devuelve. Este método cambia la longitud del array.'''
            code:'''const plants = ['broccoli', 'cauliflower', 'cabbage', 'kale', 'tomato'];

console.log(plants.pop());
// Expected output: "tomato"

console.log(plants);
// Expected output: Array ["broccoli", "cauliflower", "cabbage", "kale"]

plants.pop();

console.log(plants);
// Expected output: Array ["broccoli", "cauliflower", "cabbage"]
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/pop'''
        }
        push:{}
        reduce:{}
        reduceright:{}
        reverse:{}
        shift:{}
        slice:{}
        some:{}
        sort:{}
        splice:{}
        tolocalestring:{}
        tostring:{}
        unshift:{}
        values:{}
    }
}