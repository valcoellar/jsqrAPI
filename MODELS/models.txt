{
    array:{
        concat:{
            explain: '''El método concat() se usa para unir dos o más arrays. Este método no cambia los arrays existentes, sino que devuelve un nuevo array.''',
            code: '''const array1 = ['a', 'b', 'c'];
                const array2 = ['d', 'e', 'f'];
                const array3 = array1.concat(array2);

                console.log(array3);
                // Expected output: Array ["a", "b", "c", "d", "e", "f"]' ''',
            link: 'https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/concat',
        }
        copywithin:{
            explain: '''El método copyWithin() transfiere una copia plana de una sección a otra dentro del mismo array ( o contexto similar ), sin modificar su propiedad length y lo devuelve.''',
            code: '''const array1 = ['a', 'b', 'c', 'd', 'e'];

// Copy to index 0 the element at index 3
console.log(array1.copyWithin(0, 3, 4));
// Expected output: Array ["d", "b", "c", "d", "e"]

// Copy to index 1 all elements from index 3 to the end
console.log(array1.copyWithin(1, 3));
// Expected output: Array ["d", "d", "e", "d", "e"] ''',
        link: 'https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin'
        }
        entries:{
            explain:'''El método entries() retorna un nuevo objeto Array Iterator que contiene los pares clave/valor para cada índice de la matriz.'''
            code:'''const array1 = ['a', 'b', 'c'];

const iterator1 = array1.entries();

console.log(iterator1.next().value);
// Expected output: Array [0, "a"]

console.log(iterator1.next().value);
// Expected output: Array [1, "b"]
''' 
            link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/entries'''
        }
        every:{
            explain:'''Determina si todos los elementos en el array satisfacen una condición.'''
            code:'''const isBelowThreshold = (currentValue) => currentValue < 40;

const array1 = [1, 30, 39, 29, 10, 13];

console.log(array1.every(isBelowThreshold));
// Expected output: true'''
            link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/every'''
        }
        fill:{
            explain:'''El método fill() cambia todos los elementos en un arreglo por un valor estático, desde el índice start (por defecto 0) hasta el índice end (por defecto array.length). Devuelve el arreglo modificado.'''
            code:'''const array1 = [1, 2, 3, 4];

// Fill with 0 from position 2 until position 4
console.log(array1.fill(0, 2, 4));
// Expected output: Array [1, 2, 0, 0]

// Fill with 5 from position 1
console.log(array1.fill(5, 1));
// Expected output: Array [1, 5, 5, 5]

console.log(array1.fill(6));
// Expected output: Array [6, 6, 6, 6]
'''
            link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/fill'''
        }
        filter:{
            explain:'''El método filter() crea un nuevo array con todos los elementos que cumplan la condición implementada por la función dada.'''
            code:'''const words = ['spray', 'limit', 'elite', 'exuberant', 'destruction', 'present'];

const result = words.filter(word => word.length > 6);

console.log(result);
// Expected output: Array ["exuberant", "destruction", "present"]
'''
            link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/filter'''
        }
        find:{
            explain:'''El método find() devuelve el valor del primer elemento del array que cumple la función de prueba proporcionada.'''
            code:'''const array1 = [5, 12, 8, 130, 44];

const found = array1.find(element => element > 10);

console.log(found);
// Expected output: 12
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/find'''
            
        }
        findindex:{
            explain:'''El método findIndex() devuelve el índice del primer elemento de un array que cumpla con la función de prueba proporcionada. En caso contrario devuelve -1.

'''
    code:'''const array1 = [5, 12, 8, 130, 44];

const isLargeNumber = (element) => element > 13;

console.log(array1.findIndex(isLargeNumber));
// Expected output: 3
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex'''
        }
        flat:{
            explain:'''El método flat() crea una nueva matriz con todos los elementos de sub-array concatenados recursivamente hasta la profundidad especificada.'''
            code:'''var arr1 = [1, 2, [3, 4]];
arr1.flat();
// [1, 2, 3, 4]

var arr2 = [1, 2, [3, 4, [5, 6]]];
arr2.flat();
// [1, 2, 3, 4, [5, 6]]

var arr3 = [1, 2, [3, 4, [5, 6]]];
arr3.flat(2);
// [1, 2, 3, 4, 5, 6]
'''
    link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/flat'''
    
        }
        flatmap:{
            explain:'''El método flatMap() primero mapea cada elemento usando una función de mapeo, luego aplana el resultado en una nueva matriz. Es idéntico a un map seguido de un flatten (en-US)de profundidad 1, pero flatMap es a menudo útil y la fusión de ambos en un método es ligeramente más eficiente.'''
            code:'''const arr1 = [1, 2, [3], [4, 5], 6, []];

const flattened = arr1.flatMap(num => num);

console.log(flattened);
// Expected output: Array [1, 2, 3, 4, 5, 6]
'''
    link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap'''
    
        }
        foreach:{
            explain:'''El método forEach() ejecuta la función indicada una vez por cada elemento del array.'''
            code:'''const array1 = ['a', 'b', 'c'];

array1.forEach(element => console.log(element));

// Expected output: "a"
// Expected output: "b"
// Expected output: "c"
'''
    link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach'''
        }
        includes:{
            explain:'''El método includes() determina si una matriz incluye un determinado elemento, devuelve true o false según corresponda.'''
            code:'''const array1 = [1, 2, 3];

console.log(array1.includes(2));
// Expected output: true

const pets = ['cat', 'dog', 'bat'];

console.log(pets.includes('cat'));
// Expected output: true

console.log(pets.includes('at'));
// Expected output: false
'''
    link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/includes'''
        }
        indexof:{
            explain:'''El método indexOf() retorna el primer índice en el que se puede encontrar un elemento dado en el array, ó retorna -1 si el elemento no esta presente.'''
            code:'''var indices = [];
var array = ['a', 'b', 'a', 'c', 'a', 'd'];
var element = 'a';
var idx = array.indexOf(element);
while (idx != -1) {
  indices.push(idx);
  idx = array.indexOf(element, idx + 1);
}
console.log(indices);
// [0, 2, 4]
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf'''
        }
        join:{
            explain:'''El método join() une todos los elementos de una matriz (o un objeto similar a una matriz) en una cadena y devuelve esta cadena.'''
            code:'''var a = ['Viento', 'Lluvia', 'Fuego'];
var miVar1 = a.join();      // asigna 'Viento,Lluvia,Fuego' a miVar1
var miVar2 = a.join(', ');  // asigna 'Viento, Lluvia, Fuego' a miVar2
var miVar3 = a.join(' + '); // asigna 'Viento + Lluvia + Fuego' a miVar3
var miVar4 = a.join('');    // asigna 'VientoLluviaFuego' a miVar4
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/join'''
        }
        keys:{
            explain:'''El método keys() devuelve un nuevo objeto Array Iterator que contiene las claves de índice con las que acceder a cada elemento en el array.

'''
        code:'''const array1 = ['a', 'b', 'c'];
const iterator = array1.keys();

for (const key of iterator) {
  console.log(key);
}

// Expected output: 0
// Expected output: 1
// Expected output: 2
'''
    link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/keys'''
        }
        lastindexof:{
            explain:'''El método lastIndexOf() devuelve el último índice en el que un cierto elemento puede encontrarse en el arreglo, ó -1 si el elemento no se encontrara. El arreglo es recorrido en sentido contrario, empezando por el índice fromIndex.'''
            code:'''const animals = ['Dodo', 'Tiger', 'Penguin', 'Dodo'];

console.log(animals.lastIndexOf('Dodo'));
// Expected output: 3

console.log(animals.lastIndexOf('Tiger'));
// Expected output: 1
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf'''
        }
        map:{
            explain:'''El método map() crea un nuevo array con los resultados de la llamada a la función indicada aplicados a cada uno de sus elementos.'''
            code:'''var numbers = [1, 5, 10, 15];
var doubles = numbers.map(function(x) {
   return x * 2;
});
// doubles is now [2, 10, 20, 30]
// numbers is still [1, 5, 10, 15]

var numbers = [1, 4, 9];
var roots = numbers.map(function(num) {
    return Math.sqrt(num);
});
// roots is now [1, 2, 3]
// numbers is still [1, 4, 9]
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/map'''
        }
        pop:{
            explain:'''El método pop() elimina el último elemento de un array y lo devuelve. Este método cambia la longitud del array.'''
            code:'''const plants = ['broccoli', 'cauliflower', 'cabbage', 'kale', 'tomato'];

console.log(plants.pop());
// Expected output: "tomato"

console.log(plants);
// Expected output: Array ["broccoli", "cauliflower", "cabbage", "kale"]

plants.pop();

console.log(plants);
// Expected output: Array ["broccoli", "cauliflower", "cabbage"]
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/pop'''
        }
        push:{
            explain:'''El método push() añade uno o más elementos al final de un array y devuelve la nueva longitud del array.'''
            code:'''const animals = ['pigs', 'goats', 'sheep'];

const count = animals.push('cows');
console.log(count);
// Expected output: 4
console.log(animals);
// Expected output: Array ["pigs", "goats", "sheep", "cows"]

animals.push('chickens', 'cats', 'dogs');
console.log(animals);
// Expected output: Array ["pigs", "goats", "sheep", "cows", "chickens", "cats", "dogs"]
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/push'''
        }
        reduce:{
            explain:'''El método reduce() ejecuta una función reductora sobre cada elemento de un array, devolviendo como resultado un único valor.

'''
code:'''const array1 = [1, 2, 3, 4];

// 0 + 1 + 2 + 3 + 4
const initialValue = 0;
const sumWithInitial = array1.reduce(
  (accumulator, currentValue) => accumulator + currentValue,
  initialValue
);

console.log(sumWithInitial);
// Expected output: 10
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce'''
        }
        reduceright:{
            explain:'''Aplica una función simultáneamente contra un acumulador y cada elemento de un array (de derecha a izquierda) para reducirlo a un único valor.'''
            code:'''[0,1,2,3,4].reduceRight(function(valorPrevio, valorActual, indice, array){
  return valorPrevio + valorActual;
});

// First call
valorPrevio = 4, valorActual = 3, indice = 3

// Second call
valorPrevio = 7, valorActual = 2, indice = 2

// Third call
valorPrevio = 9, valorActual = 1, indice = 1

// Fourth call
valorPrevio = 10, valorActual = 0, indice = 0

// el array sobre el que se llama a reduceRight siempre es el objeto [0,1,2,3,4]

// Valor Devuelto: 10
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/ReduceRight'''
        }
        reverse:{
            explain:'''El método reverse() invierte el orden de los elementos de un array in place. El primer elemento pasa a ser el último y el último pasa a ser el primero.

'''
code:'''const array1 = ['one', 'two', 'three'];
console.log('array1:', array1);
// Expected output: "array1:" Array ["one", "two", "three"]

const reversed = array1.reverse();
console.log('reversed:', reversed);
// Expected output: "reversed:" Array ["three", "two", "one"]

// Careful: reverse is destructive -- it changes the original array.
console.log('array1:', array1);
// Expected output: "array1:" Array ["three", "two", "one"]
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse'''
        }
        shift:{
            explain:'''El método shift() elimina el primer elemento del array y lo retorna. Este método modifica la longitud del array.'''
            code:'''var miPescado = ['ángel', 'payaso', 'mandarín', 'cirujano'];

console.log('miPescado antes: ' + miPescado);
// "miPescado antes: ángel,payaso,mandarín,cirujano"

var eliminado = miPescado.shift();

console.log('miPescado después: ' + miPescado);
// "miPescado after: payaso,mandarín,cirujano"

console.log('Elemento eliminado: ' + eliminado);
// "Elemento eliminado: ángel"
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/shift'''
        }
        slice:{
            explain:'''El método slice() devuelve una copia de una parte del array dentro de un nuevo array empezando por inicio hasta fin (fin no incluido). El array original no se modificará.

'''
code:'''var nombres = ['Rita', 'Pedro', 'Miguel', 'Ana', 'Vanesa'];
var masculinos = nombres.slice(1, 3);

// masculinos contiene ['Pedro','Miguel']
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/slice'''
        }
        some:{
            explain:'''El método some() comprueba si al menos un elemento del array cumple con la condición implementada por la función proporcionada.'''
            code:'''const array = [1, 2, 3, 4, 5];

// Checks whether an element is even
const even = (element) => element % 2 === 0;

console.log(array.some(even));
// Expected output: true
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/some'''
        }
        sort:{
            explain:'''El método sort() ordena los elementos de un arreglo (array) localmente y devuelve el arreglo ordenado. La ordenación no es necesariamente estable. El modo de ordenación por defecto responde a la posición del valor del string de acuerdo a su valor Unicode.'''
            code:'''var frutas = ['guindas', 'manzanas', 'bananas'];
frutas.sort(); // ['bananas', 'guindas', 'manzanas']

var puntos = [1, 10, 2, 21];
puntos.sort(); // [1, 10, 2, 21]
// Tenga en cuenta que 10 viene antes que 2
// porque '10' viene antes que '2' según la posición del valor Unicode.

var cosas = ['word', 'Word', '1 Word', '2 Words'];
cosas.sort(); // ['1 Word', '2 Words', 'Word', 'word']
// En Unicode, los números vienen antes que las letras mayúsculas
// y estas vienen antes que las letras minúsculas.
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/sort'''
        }
        splice:{
            explain:'''El método splice() cambia el contenido de un array eliminando elementos existentes y/o agregando nuevos elementos.'''
            code:'''const months = ['Jan', 'March', 'April', 'June'];
months.splice(1, 0, 'Feb');
// Inserts at index 1
console.log(months);
// Expected output: Array ["Jan", "Feb", "March", "April", "June"]

months.splice(4, 1, 'May');
// Replaces 1 element at index 4
console.log(months);
// Expected output: Array ["Jan", "Feb", "March", "April", "May"]
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/splice'''
        }
        tolocalestring:{
            explain:'''El método toLocaleString() devuelve una cadena de texto representando los elementos del array. Los elementos son convertidos a texto usando su método toLocaleString y dichos Strings son separados por un caracter específico para la localidad (como una coma para la separación de decimales “,”).

'''
code:'''const array1 = [1, 'a', new Date('21 Dec 1997 14:12:00 UTC')];
const localeString = array1.toLocaleString('en', { timeZone: 'UTC' });

console.log(localeString);
// Expected output: "1,a,12/21/1997, 2:12:00 PM",
// This assumes "en" locale and UTC timezone - your results may vary
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString'''
        }
        tostring:{
            explain:'''El método toString() devuelve una cadena de caracteres representando el array especificado y sus elementos.'''
            code:'''const array1 = [1, 2, 'a', '1a'];

console.log(array1.toString());
// Expected output: "1,2,a,1a"
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/toString'''
        }
        unshift:{
            explain:'''El método unshift() agrega uno o más elementos al inicio del array, y devuelve la nueva longitud del array.'''
            code:'''const array1 = [1, 2, 3];

console.log(array1.unshift(4, 5));
// Expected output: 5

console.log(array1);
// Expected output: Array [4, 5, 1, 2, 3]
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift'''
        }
        values:{
            explain:'''El método values() devuelve un nuevo objeto Array Iterator que contiene los valores para cada índice del array.'''
            code:'''var a = ['w', 'y', 'k', 'o', 'p'];
var iterator = a.values();

console.log(iterator.next().value); // w
console.log(iterator.next().value); // y
console.log(iterator.next().value); // k
console.log(iterator.next().value); // o
console.log(iterator.next().value); // p
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/values'''
        }
        
    }
    string:{
        charat:{
            explain:'''El método charAt() de String devuelve en un nuevo String el carácter UTF-16 de una cadena.'''
            code:'''var cualquierCadena="Brave new world";

console.log("El carácter en el índice 0 es '" + cualquierCadena.charAt(0) + "'")
console.log("El carácter en el índice 1 es '" + cualquierCadena.charAt(1) + "'")
console.log("El carácter en el índice 2 es '" + cualquierCadena.charAt(2) + "'")
console.log("El carácter en el índice 3 es '" + cualquierCadena.charAt(3) + "'")
console.log("El carácter en el índice 4 es '" + cualquierCadena.charAt(4) + "'")
console.log("El carácter en el índice 999 es '" + cualquierCadena.charAt(999) + "'")

El carácter en el índice 0 es 'B'
El carácter en el índice 1 es 'r'
El carácter en el índice 2 es 'a'
El carácter en el índice 3 es 'v'
El carácter en el índice 4 es 'e'
El carácter en el índice 999 es ''
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/charAt'''
        }
        charcodeat:{
            explain:'''El charCodeAt() método devuelve un número indicando el valor Unicode del carácter en el índice proporcionado.'''
            code:'''"ABC".charCodeAt(0) // returns 65'''
            link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt'''
        }
        concat:{
            explain:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt'''
            code:'''const str1 = 'Hello';
const str2 = 'World';

console.log(str1.concat(' ', str2));
// Expected output: "Hello World"

console.log(str2.concat(', ', str1));
// Expected output: "World, Hello"
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/concat'''
        }
        endswith:{
            explain:'''El método endsWith() determina si una cadena de texto termina con los caracteres de una cadena indicada, devolviendo true o false según corresponda.'''
            code:'''const str1 = 'Cats are the best!';

console.log(str1.endsWith('best!'));
// Expected output: true

console.log(str1.endsWith('best', 17));
// Expected output: true

const str2 = 'Is this a question?';

console.log(str2.endsWith('question'));
// Expected output: false
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith'''
        }
        inlcudes:{
            explain:'''El método includes() determina si una cadena de texto puede ser encontrada dentro de otra cadena de texto, devolviendo true o false según corresponda.'''
            code:'''const sentence = 'The quick brown fox jumps over the lazy dog.';

const word = 'fox';

console.log(`The word "${word}" ${sentence.includes(word) ? 'is' : 'is not'} in the sentence`);
// Expected output: "The word "fox" is in the sentence"
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/includes'''
        }
        indexof:{
            explain:'''El método indexOf() devuelve el índice, dentro del objeto String que realiza la llamada, de la primera ocurrencia del valor especificado, comenzando la búsqueda desde indiceDesde; o -1 si no se encuentra dicho valor.'''
            code:'''"Blue Whale".indexOf("Blue")    // returns 0
"Blue Whale".indexOf("Blute")   // returns -1
"Blue Whale".indexOf("Whale",0) // returns 5
"Blue Whale".indexOf("Whale",5) // returns 5
"Blue Whale".indexOf("",9)      // returns 9
"Blue Whale".indexOf("",10)     // returns 10
"Blue Whale".indexOf("",11)     // returns 10
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf'''
        }
        lastindexof:{
            explain:'''El método lastIndexOf() devuelve la posicion (indice) en la que se encuentra el valorBusqueda, dentro del objeto String que realiza la llamada, de la última ocurrencia del valor especificado; o -1 si no se halla. La búsqueda se realiza empezando por el final de la cadena que realiza la llamada, empezando en indiceDesde.

'''
code:'''"canal".lastIndexOf("a")   // returns 3
"canal".lastIndexOf("a",2) // returns 1
"canal".lastIndexOf("a",0) // returns -1
"canal".lastIndexOf("x")   // returns -1
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf'''

        }
        localecompare:{
            explain:'''El método localeCompare() retorna un número indicando si una cadena de carateres de referencia va antes, después o si es la misma que la cadena dada en orden alfabético.'''
            code:'''const a = 'réservé'; // With accents, lowercase
const b = 'RESERVE'; // No accents, uppercase

console.log(a.localeCompare(b));
// Expected output: 1
console.log(a.localeCompare(b, 'en', { sensitivity: 'base' }));
// Expected output: 0
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare'''

        }
        match:{
            explain:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare'''
            code:'''const paragraph = 'The quick brown fox jumps over the lazy dog. It barked.';
const regex = /[A-Z]/g;
const found = paragraph.match(regex);

console.log(found);
// Expected output: Array ["T", "I"]
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/match'''
        }
        normalize:{
            explain:'''El método normalize() retorna la Forma de Normalización Unicode de la cadena dada (si el valor no es una cadena, primero será convertido a ese tipo).'''
            code:'''// Cadena inicial

// U+1E9B: LETRA S LATINA MINÚSCULA CON PUNTO ARRIBA
// U+0323: COMBINACIÓN CON PUNTO ABAJO
var str = '\u1E9B\u0323';


// Forma compuesta canónicamente (NFC)

// U+1E9B: LETRA S LATINA MINÚSCULA CON PUNTO ARRIBA
// U+0323: COMBINACIÓN CON PUNTO ABAJO
str.normalize('NFC'); // '\u1E9B\u0323'
str.normalize();      // lo mismo que arriba


// Forma canónicamente descompuesta (NFD)

// U+017F: LETRA S LATINA MINÚSCULA
// U+0323: COMBINACIÓN CON PUNTO ABAJO
// U+0307: COMBINACIÓN CON PUNTO ARRIBA
str.normalize('NFD'); // '\u017F\u0323\u0307'


// Compuesta con compatibilidad (NFKC)

// U+1E69: LETRA S LATINA MINÚSCULA CON PUNTO ARRIBA Y ABAJO
str.normalize('NFKC'); // '\u1E69'


// Descompuesta con compatibilidad (NFKD)

// U+0073: LETRA S LATINA MINÚSCULA
// U+0323: COMBINACIÓN CON PUNTO ABAJO
// U+0307: COMBINACIÓN CON PUNTO ARRIBA
str.normalize('NFKD'); // '\u0073\u0323\u0307'
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/normalize'''

        }
        padend:{
            explain:'''The padEnd() method pads the current string with a given string (repeated, if needed) so that the resulting string reaches a given length. The padding is applied from the end of the current string.'''
            code:'''const str1 = 'Breaded Mushrooms';

console.log(str1.padEnd(25, '.'));
// Expected output: "Breaded Mushrooms........"

const str2 = '200';

console.log(str2.padEnd(5));
// Expected output: "200  "
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd'''

        }
        padstart:{
            explain:'''The padStart() method pads the current string with another string (multiple times, if needed) until the resulting string reaches the given length. The padding is applied from the start of the current string.'''
            code:'''const str1 = '5';

console.log(str1.padStart(2, '0'));
// Expected output: "05"

const fullNumber = '2034399002125581';
const last4Digits = fullNumber.slice(-4);
const maskedNumber = last4Digits.padStart(fullNumber.length, '*');

console.log(maskedNumber);
// Expected output: "************5581"
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart'''

        }
        repeat:{
            explain:'''El método repeat() construye y devuelve una nueva cadena que contiene el número especificado de copias de la cadena en la cual fue llamada, concatenados.'''
            code:''''abc'.repeat(-1);   // RangeError
'abc'.repeat(0);    // ''
'abc'.repeat(1);    // 'abc'
'abc'.repeat(2);    // 'abcabc'
'abc'.repeat(3.5);  // 'abcabcabc' (count will be converted to integer)
'abc'.repeat(1/0);  // RangeError

({ toString: () => 'abc', repeat: String.prototype.repeat }).repeat(2);
// 'abcabc' (repeat() is a generic method)
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/repeat'''

        }
        replace:{
            explain:'''El método replace() devuelve una nueva cadena con algunas o todas las coincidencias de un patrón, siendo cada una de estas coincidencias reemplazadas por remplazo. El patrón puede ser una cadena o una RegExp, y el reemplazo puede ser una cadena o una función que será llamada para cada coincidencia. Si el patrón es una cadena, sólo la primera coincidencia será reemplazada.'''
            code:'''const p = 'The quick brown fox jumps over the lazy dog. If the dog reacted, was it really lazy?';

console.log(p.replace('dog', 'monkey'));
// Expected output: "The quick brown fox jumps over the lazy monkey. If the dog reacted, was it really lazy?"


const regex = /Dog/i;
console.log(p.replace(regex, 'ferret'));
// Expected output: "The quick brown fox jumps over the lazy ferret. If the dog reacted, was it really lazy?"'''
        }
        search:{
            explain:'''El método search() ejecuta una búsqueda que encaje entre una expresión regular y el objeto String desde el que se llama.'''
            code:'''function testinput(re, str) {
  var midstring;
  if (str.search(re) != -1) {
    midstring = ' contains ';
  } else {
    midstring = ' does not contain ';
  }
  console.log(str + midstring + re);
}'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/search'''
        }
        slice:{
            explain:'''El método slice() extrae una sección de una cadena y devuelve una cadena nueva.'''
            code:'''var cadena1 = "La mañana se nos echa encima.";
var cadena2 = cadena1.slice(3, -2);
console.log(cadena2);

Esto escribe:

mañana se nos echa encim
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/slice'''
        }
        split:{
            explain:'''El método split() divide un objeto de tipo String en un array (vector) de cadenas mediante la separación de la cadena en subcadenas.

'''
code:'''function dividirCadena(cadenaADividir,separador) {
   var arrayDeCadenas = cadenaADividir.split(separador);
   document.write('<p>La cadena original es: "' + cadenaADividir + '"');
   document.write('<br>El separador es: "' + separador + '"');
   document.write("<br>El array tiene " + arrayDeCadenas.length + " elementos: ");

   for (var i=0; i < arrayDeCadenas.length; i++) {
      document.write(arrayDeCadenas[i] + " / ");
   }
}

var cadenaVerso = "Oh brave new world that has such people in it.";
var cadenaMeses = "Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec";

var espacio = " ";
var coma = ",";

dividirCadena(cadenaVerso, espacio);
dividirCadena(cadenaVerso);
dividirCadena(cadenaMeses, coma);

Este ejemplo produce el siguiente resultado:

La cadena original es: "Oh brave new world that has such people in it."
El separador es: " "
El array tiene 10 elementos: Oh / brave / new / world / that / has / such / people / in / it. /

La cadena original es: "Oh brave new world that has such people in it."
El separador es: "undefined"
El array tiene 1 elementos: Oh brave new world that has such people in it. /

La cadena original es: "Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec"
El separador es: ","
El array tiene 12 elementos: Jan / Feb / Mar / Apr / May / Jun / Jul / Aug / Sep / Oct / Nov / Dec /
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/split'''

        }
        startswith:{
            explain:'''El método startsWith() indica si una cadena de texto comienza con los caracteres de una cadena de texto concreta, devolviendo true o false según corresponda.'''
            code:'''const str1 = 'Saturday night plans';

console.log(str1.startsWith('Sat'));
// Expected output: true

console.log(str1.startsWith('Sat', 3));
// Expected output: false
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith'''
        }
        substr:{
            explain:'''El método substr() devuelve los caracteres de una cadena que comienzan en una localización especificada y de acuerdo al número de caracteres que se especifiquen.'''
            code:'''Advertencia: Advertencia: Aunque String.prototype.substr(…) no está estrictamente obsoleto (como en "eliminado de los estándares web"), se define en el anexo B de la norma ECMA-262, cuya introducción establece:

... Todas las características y comportamientos del lenguaje especificados en este anexo tienen una o más características indeseables y, en ausencia de uso heredado, se eliminarían de esta especificación. ... ... Los programadores no deben usar ni asumir la existencia de estas características y comportamientos al escribir un nuevo código ECMAScript.
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/substr'''
        }
        substring:{
            explain:'''El substring() método devuelve un subconjunto de un objeto String.'''
            code:'''// asume una función print ya definida
var cualquierCadena = "Mozilla";

// Muestra "Moz"
print(cualquierCadena.substring(0,3));
print(cualquierCadena.substring(3,0));

// Muestra "lla"
print(cualquierCadena.substring(4,7));
print(cualquierCadena.substring(7,4));

// Muestra "Mozill"
print(cualquierCadena.substring(0,6));
print(cualquierCadena.substring(6,0));

// Muestra "Mozilla"
print(cualquierCadena.substring(0,7));
print(cualquierCadena.substring(0,10));
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/substring'''
        }
        tolocalelowercase:{
            explain:'''El método toLocaleLowerCase() retorna la cadena de texto desde la que se llama convertida en minúsculas, de acuerdo con cualquier localización específica de correspondencia de mayúsculas y minúsculas.
'''
code:'''const dotted = 'İstanbul';

console.log(`EN-US: ${dotted.toLocaleLowerCase('en-US')}`);
// Expected output: "i̇stanbul"

console.log(`TR: ${dotted.toLocaleLowerCase('tr')}`);
// Expected output: "istanbul"
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleLowerCase'''

        }
        tolocaleuppercase:{
            explain:'''El método toLocaleUpperCase() devuelve el valor de la cadena que lo llama convertido en mayúsculas, de acuerdo con las asignaciones de casos específicos de la configuración regional.'''
            code:''''alphabet'.toLocaleUpperCase(); // 'ALPHABET'

'i\u0307'.toLocaleUpperCase('lt-LT'); // 'I'

let locales = ['lt', 'LT', 'lt-LT', 'lt-u-co-phonebk', 'lt-x-lietuva'];
'i\u0307'.toLocaleUpperCase(locales); // 'I'
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleUpperCase'''
        }
        tolowercase:{
            explain:'''El método toLowerCase() devuelve el valor en minúsculas de la cadena que realiza la llamada.'''
            code:'''var textoMayusculas="ALFABETO"
document.write(textoMayusculas.toLowerCase())
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase'''
        }
        touppercase:{
            explain:'''El toUpperCase() método devuelve el valor convertido en mayúsculas de la cadena que realiza la llamada.'''
            code:'''console.log( "alphabet".toUpperCase() ); // "ALPHABET"'''
            link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase'''
        }
        tostring:{
            explain:'''El toString() método devuelve una cadena que representa al objeto especificado.'''
            code:'''cadena = new String("Hello world");
alert(cadena.toString())      // Displays "Hello world"
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/toString'''
        }
        trim:{
            explain:'''El método trim( ) elimina los espacios en blanco en ambos extremos del string. Los espacios en blanco en este contexto, son todos los caracteres sin contenido (espacio, tabulación, etc.) y todos los caracteres de nuevas lineas (LF,CR,etc.).'''
            code:'''var orig = '   foo  ';
console.log(orig.trim()); // 'foo'

// Otro ejemplo de .trim() eliminando el espacio en blanco sólo de un lado.

var orig = 'foo    ';
console.log(orig.trim()); // 'foo'
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/Trim'''
        }
    }
    math:{
        abs:{
            explain:'''La función Math.abs() retorna el valor absoluto de un número'''
            code:'''Math.abs('-1');     // 1
Math.abs(-2);       // 2
Math.abs(null);     // 0
Math.abs('');       // 0
Math.abs([]);       // 0
Math.abs([2]);      // 2
Math.abs([1,2]);    // NaN
Math.abs({});       // NaN
Math.abs('string'); // NaN
Math.abs();         // NaN
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/abs'''
        }
        acos:{
            explain:'''La función Math.acos() devuelve el arco coseno (en radianes) de un número'''
            code:'''Math.acos(-2);  // NaN
Math.acos(-1);  // 3.141592653589793
Math.acos(0);   // 1.5707963267948966
Math.acos(0.5); // 1.0471975511965979
Math.acos(1);   // 0
Math.acos(2);   // NaN
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/acos'''
        }
        asin:{
            explain:'''La Funcion Math.asin() retorna El arco seno (en radianes) de un número'''
            code:'''Math.asin(-2);  // NaN
Math.asin(-1);  // -1.5707963267948966 (-pi/2)
Math.asin(0);   // 0
Math.asin(0.5); // 0.5235987755982989
Math.asin(1);   // 1.5707963267948966 (pi/2)
Math.asin(2);   // NaN
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/asin'''

        }
        atan:{
            explain:'''La función Math.atan() retorna el arcotangente (en radianes) de un numero'''
            code:'''// Calculates angle of a right-angle triangle in radians
function calcAngle(opposite, adjacent) {
  return Math.atan(opposite / adjacent);
}

console.log(calcAngle(8, 10));
// Expected output: 0.6747409422235527

console.log(calcAngle(5, 3));
// Expected output: 1.0303768265243125
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/atan'''
        }
        atan2:{
            explain:'''La función Math.atan2() retorna la arcotangente del cociente de los argumentos.'''
            code:'''Math.atan2(90, 15); // 1.4056476493802699
Math.atan2(15, 90); // 0.16514867741462683

Math.atan2(±0, -0);               // ±PI.
Math.atan2(±0, +0);               // ±0.
Math.atan2(±0, -x);               // ±PI for x > 0.
Math.atan2(±0, x);                // ±0 for x > 0.
Math.atan2(-y, ±0);               // -PI/2 for y > 0.
Math.atan2(y, ±0);                // PI/2 for y > 0.
Math.atan2(±y, -Infinity);        // ±PI for finite y > 0.
Math.atan2(±y, +Infinity);        // ±0 for finite y > 0.
Math.atan2(±Infinity, x);         // ±PI/2 for finite x.
Math.atan2(±Infinity, -Infinity); // ±3*PI/4.
Math.atan2(±Infinity, +Infinity); // ±PI/4.
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/atan2'''

        }
        ceil:{
            explain:'''La función Math.ceil() devuelve el entero mayor o igual más próximo a un número dado.'''
            code:'''console.log(Math.ceil(.95));
// Expected output: 1

console.log(Math.ceil(4));
// Expected output: 4

console.log(Math.ceil(7.004));
// Expected output: 8

console.log(Math.ceil(-7.004));
// Expected output: -7
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil'''
        }
        cos:{
            explain:'''La función estática Math.cos() devuelve el coseno del ángulo especificado, que debe ser especificado en radianes'''
            code:'''function getCircleX(radians, radius) {
  return Math.cos(radians) * radius;
}

console.log(getCircleX(1, 10));
// Expected output: 5.403023058681398

console.log(getCircleX(2, 10));
// Expected output: -4.161468365471424

console.log(getCircleX(Math.PI, 10));
// Expected output: -10
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/cos'''

        }
        exp:{
            explain:'''La función Math.exp() devuelve ex, donde x es el argumento, y e es El número de Euler (también conocido como la constante de Napier), la base de los algoritmos naturales.'''
            code:'''Math.exp(-1); // 0.36787944117144233
Math.exp(0);  // 1
Math.exp(1);  // 2.718281828459045
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/exp'''

        }
        floor:{
            explain:'''Devuelve el máximo entero menor o igual a un número.'''
            code:'''function getFloor(x) {
   return Math.floor(x);
}
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/floor'''
        }
        log:{
            explain:'''La función Math.log() devuelve la base neutral de un número (base e)'''
            code:'''function getBaseLog(x, y) {
  return Math.log(y) / Math.log(x);
}

// 2 x 2 x 2 = 8
console.log(getBaseLog(2, 8));
// Expected output: 3

// 5 x 5 x 5 x 5 = 625
console.log(getBaseLog(5, 625));
// Expected output: 4
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/log'''
        }
        max:{
            explain:'''La función Math.max() retorna el mayor de cero o más números dados como parámetros de entrada, o NaN si cualquier parámetro no es un número y no puede ser convertido en uno.

'''
code:'''console.log(Math.max(1, 3, 2));
// Expected output: 3

console.log(Math.max(-1, -3, -2));
// Expected output: -1

const array1 = [1, 3, 2];

console.log(Math.max(...array1));
// Expected output: 3
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/max'''
        }
        min:{
            explain:'''La función Math.min() devuelve el menor de cero o más números.'''
            code:'''Lo siguiente encuentra el mínimo de x e y y lo asigna a z:

var x = 10, y = -20;
var z = Math.min(x, y);
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/min'''
        }
        pow:{
            explain:'''La función Math.pow() devuelve la base elevada al exponente , esto es, baseexponente.

'''
code:'''// simple
Math.pow(7, 2);    // 49
Math.pow(7, 3);    // 343
Math.pow(2, 10);   // 1024
// exponentes fraccionales
Math.pow(4, 0.5);  // 2 (raíz cuadrada de 4)
Math.pow(8, 1/3);  // 2 (raíz cúbica de 8)
Math.pow(2, 0.5);  // 1.412135623730951 (raíz cuadrada de 2)
Math.pow(2, 1/3);  // 1.2599210498948732 (raíz cúbica de 2)
// exponentes con signo
Math.pow(7, -2);   // 0.02040816326530612 (1/49)
Math.pow(8, -1/3); // 0.5
// bases con signo
Math.pow(-7, 2);   // 49 (los cuadrados son positivos)
Math.pow(-7, 3);   // -343 (El cubo de una base negativa puede ser negativo)
Math.pow(-7, 0.5); // NaN (Los números negativos no tienen raíz cuadrada real)
Math.pow(-7, 1/3); // NaN
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/pow'''
        }
        random:{
            explain:'''La función Math.random() devuelve un número de coma flotante pseudo-aleatorio, comprendido en el rango de 0 a menor que 1 (es decir, incluido el 0 pero no el 1), con una distribución aproximadamente uniforme en este rango. Dicho rango puede ser ampliado hasta los valores deseados. La implementación selecciona la semilla inicial del algoritmo de generación de números aleatorios, no pudiendo ser esta elegida o restablecida por el usuario.'''
            code:'''function getRandomInt(max) {
  return Math.floor(Math.random() * max);
}

console.log(getRandomInt(3));
// Expected output: 0, 1 or 2

console.log(getRandomInt(1));
// Expected output: 0

console.log(Math.random());
// Expected output: a number from 0 to <1
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/random'''
        }
        round:{
            explain:'''La función Math.round()retorna el valor de un número redondeado al entero más cercano.'''
            code:'''// Retorna el valor 20
x = Math.round(20.49);

// Retorna el valor 21
x = Math.round(20.5);

// Retorna el valor -20
x = Math.round(-20.5);

// Retorna el valor -21
x = Math.round(-20.51);

// Retorna el valor 1 (!)
// Note el error de redondeo debido a la inexactitud del punto aritmético.
// Compare esto con Math.round10(1.005, -2) de el ejemplo de abajo.
x = Math.round(1.005*100)/100;
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/round'''
        }
        sin:{
            explain:'''La función Math.sin() devuelve el seno de un número.'''
            code:'''Math.sin(0);           // 0
Math.sin(1);           // 0.8414709848078965

Math.sin(Math.PI / 2); // 1
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/sin'''

        }
        sqrt:{
            explain:'''La función Math.sqrt() retorna la raíz cuadrada de un número'''
            code:'''Math.sqrt(9); // 3
Math.sqrt(2); // 1.414213562373095

Math.sqrt(1);  // 1
Math.sqrt(0);  // 0
Math.sqrt(-1); // NaN
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt'''
        }
        tan:{
            explain:'''La función Math.tan() retorna la tangente de un número.'''
            code:'''function getTanFromDegrees(degrees) {
  return Math.tan(degrees * Math.PI / 180);
}

console.log(getTanFromDegrees(0));
// Expected output: 0

console.log(getTanFromDegrees(45));
// Expected output: 0.9999999999999999

console.log(getTanFromDegrees(90));
// Expected output: 16331239353195370
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/tan'''
        }
    }
    object:{
        assign:{
            explain:'''El método Object.assign() copia todas las propiedades enumerables de uno o más objetos fuente a un objeto destino. Devuelve el objeto destino.'''
            code:'''const target = { a: 1, b: 2 };
const source = { b: 4, c: 5 };

const returnedTarget = Object.assign(target, source);

console.log(target);
// Expected output: Object { a: 1, b: 4, c: 5 }

console.log(returnedTarget === target);
// Expected output: true
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Object/assign'''
        }
        create:{
            explain:'''El método Object.create() crea un objeto nuevo, utilizando un objeto existente como el prototipo del nuevo objeto creado.'''
            code:'''const person = {
  isHuman: false,
  printIntroduction: function() {
    console.log(`My name is ${this.name}. Am I human? ${this.isHuman}`);
  }
};

const me = Object.create(person);

me.name = 'Matthew'; // "name" is a property set on "me", but not on "person"
me.isHuman = true; // Inherited properties can be overwritten

me.printIntroduction();
// Expected output: "My name is Matthew. Am I human? true"
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Object/create'''
        }
        defineproperties:{
            explain:'''El metodo Object.defineProperties() define nuevas o modifica propiedades existentes directamente en el objeto, retornando el objeto.'''
            code:'''Object.defineProperties(obj, {
  "property1": {
    value: true,
    writable: true
  },
  "property2": {
    value: "Hello",
    writable: false
  }
  // etc. etc.
});'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties'''
        }
        defineproperty:{
            explain:'''El método estático Object.defineProperty() define una nueva propiedad sobre un objeto, o modifica una ya existente, y devuelve el objeto modificado.'''
            code:'''var o = {}; // Creates a new object

// Example of an object property added with defineProperty with a data property descriptor
Object.defineProperty(o, 'a', {
  value: 37,
  writable: true,
  enumerable: true,
  configurable: true
});
// 'a' property exists in the o object and its value is 37

// Example of an object property added with defineProperty with an accessor property descriptor
var bValue = 38;
Object.defineProperty(o, 'b', {
  get: function() { return bValue; },
  set: function(newValue) { bValue = newValue; },
  enumerable: true,
  configurable: true
});
o.b; // 38
// 'b' property exists in the o object and its value is 38
// The value of o.b is now always identical to bValue, unless o.b is redefined

// You cannot try to mix both:
Object.defineProperty(o, 'conflict', {
  value: 0x9f91102,
  get: function() { return 0xdeadbeef; }
});
// throws a TypeError: value appears only in data descriptors, get appears only in accessor descriptors
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty'''

        }
        entries:{
            explain:'''El método Object.entries() devuelve una matriz de pares propios de una propiedad enumerable [key, value] de un objeto dado, en el mismo orden que es proporcionado por for...in (La diferencia es que un bucle for-in enumera las propiedades en la cadena de prototipos).'''
            code:'''ar obj = { foo: 'bar', baz: 42 };
console.log(Object.entries(obj)); // [ ['foo', 'bar'], ['baz', 42] ]

// array like object
var obj = { 0: 'a', 1: 'b', 2: 'c' };
console.log(Object.entries(obj)); // [ ['0', 'a'], ['1', 'b'], ['2', 'c'] ]

// array like object with random key ordering
var an_obj = { 100: 'a', 2: 'b', 7: 'c' };
console.log(Object.entries(an_obj)); // [ ['2', 'b'], ['7', 'c'], ['100', 'a'] ]

// getFoo is property which isn't enumerable
var my_obj = Object.create({}, { getFoo: { value: function() { return this.foo; } } });
my_obj.foo = 'bar';
console.log(Object.entries(my_obj)); // [ ['foo', 'bar'] ]

// non-object argument will be coerced to an object
console.log(Object.entries('foo')); // [ ['0', 'f'], ['1', 'o'], ['2', 'o'] ]

// iterate through key-value gracefully
var obj = {a: 5, b: 7, c: 9};
for (var [key, value] of Object.entries(obj)) {
    console.log(key + ' ' + value); // "a 5", "b 7", "c 9"
}

// Or, using array extras
Object.entries(obj).forEach(([key, value]) => {
    console.log(key + ' ' + value); // "a 5", "b 7", "c 9"
});'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Object/entries'''
        }
        freeze:{
            explain:'''El método Object.freeze() congela un objeto, es decir: impide que se le agreguen nuevas propiedades; impide que se puedan eliminar las propiedades ya existentes; impide que dichas propiedades, o su capacidad de enumeración, configuración, o escritura, puedan ser modificadas; impide también que se pueda modificar su prototipo. El método devuelve el objeto recibido.'''
            code:'''const obj = {
  prop: 42
};

Object.freeze(obj);

obj.prop = 33;
// Throws an error in strict mode

console.log(obj.prop);
// Expected output: 42
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze'''
        }
        getownpropertydescriptor:{
            explain:'''El método Object.getOwnPropertyDescriptor() regresa como descripción de propiedad para una propiedad propia (eso es, una presente directamente en el objeto, no presente por la fuerza a través de la cadena de prototipo del objeto) de un objeto dado.'''
            code:'''var o, d;

o = { get foo() { return 17; } };
d = Object.getOwnPropertyDescriptor(o, 'foo');
// d is { configurable: true, enumerable: true, get: /* la función de acceso */, set: undefined }

o = { bar: 42 };
d = Object.getOwnPropertyDescriptor(o, 'bar');
// d is { configurable: true, enumerable: true, value: 42, writable: true }

o = {};
Object.defineProperty(o, 'baz', { value: 8675309, writable: false, enumerable: false });
d = Object.getOwnPropertyDescriptor(o, 'baz');
// d es { value: 8675309, writable: false, enumerable: false, configurable: false }
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor'''

        }
        getownpropertydescriptors:{
            explain:'''El método Object.getOwnPropertyDescriptors() regresa todos los descriptores de propiedad propios de un objeto dado.'''
            code:'''const object1 = {
  property1: 42
};

const descriptors1 = Object.getOwnPropertyDescriptors(object1);

console.log(descriptors1.property1.writable);
// Expected output: true

console.log(descriptors1.property1.value);
// Expected output: 42
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptors'''
        }
        getownpropertynames:{
            explain:'''El método Object.getOwnPropertyNames() devuelve un array con todas las propiedades (numerables o no) encontradas en un objeto dado.'''
            code:'''var arr = ["a", "b", "c"];
print(Object.getOwnPropertyNames(arr).sort()); // imprime "0,1,2,length"

// Objeto similar a Array
var obj = { 0: "a", 1: "b", 2: "c"};
print(Object.getOwnPropertyNames(obj).sort()); // imprime "0,1,2"

// Imprime nombres de variables y valores usando Array.forEach
Object.getOwnPropertyNames(obj).forEach(function(val, idx, array) {
  print(val + " -> " + obj[val]);
});
// imprime
// 0 -> a
// 1 -> b
// 2 -> c

// propiedad no-numerable
var my_obj = Object.create({}, { getFoo: { value: function() { return this.foo; }, enumerable: false } });
my_obj.foo = 1;

print(Object.getOwnPropertyNames(my_obj).sort()); // imprime "foo, getFoo"
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames'''
        }
        getownpropertysymbols:{
            explain:'''El método Object.getOwnPropertySymbols() regresa una colección de todos las propiedades de los simbolos encontrados directamente en un objeto dado.'''
            code:'''var obj = {};
var a = Symbol('a');
var b = Symbol.for('b');

obj[a] = 'localSymbol';
obj[b] = 'globalSymbol';

var objectSymbols = Object.getOwnPropertySymbols(obj);

console.log(objectSymbols.length); // 2
console.log(objectSymbols);        // [Symbol(a), Symbol(b)]
console.log(objectSymbols[0]);     // Symbol(a)
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols'''
        }
        getprototypeof:{
            explain:'''El método Object.getPrototypeOf() devuelve el prototipo (es decir, el valor de la propiedad interna [[Prototype]]) del objeto especificado.

'''
code:'''var proto = {};
var obj= Object.create(proto);
Object.getPrototypeOf(obj) === proto; // true
Copy to Clipboard
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf'''
        }
        is:{
            explain:'''El método Object.is() determina si dos valores son iguales.'''
            code:'''Object.is('foo', 'foo');     // true
Object.is(window, window);   // true

Object.is('foo', 'bar');     // false
Object.is([], []);           // false

var test = { a: 1 };
Object.is(test, test);       // true

Object.is(null, null);       // true

// Special Cases
Object.is(0, -0);            // false
Object.is(-0, -0);           // true
Object.is(NaN, 0/0);         // true
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Object/is'''
        }
        isextensible:{
            explain:'''El método Object.isExtensible() determina si un objeto es extendible (si puede tener propiedades nuevas agregadas a éste).'''
            code:'''// Los Objetos nuevos son extendibles (por defecto).
var empty = {};
Object.isExtensible(empty); // === true

// ...pero eso puede cambiar.
Object.preventExtensions(empty);
Object.isExtensible(empty); // === false

// Objetos sellados por definición son no-extendibles.
var sealed = Object.seal({});
Object.isExtensible(sealed); // === false

// Objetos congelados también por definición son no-extendibles.
var frozen = Object.freeze({});
Object.isExtensible(frozen); // === false
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible'''
        }
        isfrozen:{
            explain:'''El método Object.isFrozen() determina si un objeto está congelado.'''
            code:'''// Un objeto nuevo es extendible, así que no está congelado.
Object.isFrozen({}); // === false

// Un objeto vacio el cuál no es extendible está congelado vacuamente.
var vacuouslyFrozen = Object.preventExtensions({});
Object.isFrozen(vacuouslyFrozen); // === true

// Un objeto nuevo con una propiedad es tabién extendible, ergo no congelado.
var oneProp = { p: 42 };
Object.isFrozen(oneProp); // === false

// Prevenir la extensión de un objeto no lo congela.
// porque la propiedad sigue teniendo capacidad de configuración (y capacidad de escritura).
Object.preventExtensions(oneProp);
Object.isFrozen(oneProp); // === false

// ...pero eliminar la propiedad congela el objeto vacuamente.
delete oneProp.p;
Object.isFrozen(oneProp); // === true
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen'''
        }
        issealed:{
            explain:'''El método Object.isSealed() si el objeto está sellado.'''
            code:'''const object1 = {
  property1: 42
};

console.log(Object.isSealed(object1));
// Expected output: false

Object.seal(object1);

console.log(Object.isSealed(object1));
// Expected output: true
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed'''
        }
        keys:{
            explain:'''El método Object.keys() devuelve un array de las propiedades names de un objeto, en el mismo orden como se obtienen en un loop normal'''
        }   code:'''var arr = ['a', 'b', 'c'];
console.log(Object.keys(arr)); // console: ['0', '1', '2']

// arreglo como objeto
var obj = { 0: 'a', 1: 'b', 2: 'c' };
console.log(Object.keys(obj)); // console: ['0', '1', '2']

// arreglo como objeto con nombres ordenados aleatoriamente
var an_obj = { 100: 'a', 2: 'b', 7: 'c' };
console.log(Object.keys(an_obj)); // console: ['2', '7', '100']

// getFoo es una propiedad no enumerable
var my_obj = Object.create({}, { getFoo: { value: function() { return this.foo; } } });
my_obj.foo = 1;

console.log(Object.keys(my_obj)); // console: ['foo']
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Object/keys'''
        preventextensions:{
            explain:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Object/keys'''
            code:'''// Object.preventExtensions regresa el objeto hecho no-extendible.
var obj = {};
var obj2 = Object.preventExtensions(obj);
obj === obj2; // true

// Los Objetos son extendibles por defecto.
var empty = {};
Object.isExtensible(empty); // === true

// ...pero pueden ser cambiados.
Object.preventExtensions(empty);
Object.isExtensible(empty); // === false

// Object.defineProperty arroja una excepción cuando se agrega
// una propiedad nueva a un objeto no-extendible.
var nonExtensible = { removable: true };
Object.preventExtensions(nonExtensible);
Object.defineProperty(nonExtensible, 'new', { value: 8675309 }); // arroja TypeError
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions'''

        }
        seal:{
            explain:'''El método Object.seal() sella un objeto, previniendo que puedan añadirse nuevas propiedades al mismo, y marcando todas las propiedades existentes como no-configurables. Los valores de las propiedades presentes permanecen pudiendo cambiarse en tanto en cuanto dichas propiedades sean de escritura.'''
            code:'''var obj = {
  prop: function() {},
  foo: 'bar'
};

// Pueden añadirse nuevas propiedades, propiedades existentes pueden cambiarse o eliminarse.
obj.foo = 'baz';
obj.lumpy = 'woof';
delete obj.prop;

var o = Object.seal(obj);

o === obj; // true
Object.isSealed(obj); // === true

// Sigue permitido modificar valores de propiedades en un objeto sellado.
obj.foo = 'quux';

// Pero no puedes convertir propiedades de datos en propiedades de acceso, ni viveversa
Object.defineProperty(obj, 'foo', { get: function() { return 'g'; } }); // produce un TypeError
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Object/seal'''
        }
        setprototypeof:{
            explain:'''El método Object.setPrototypeOf() establece el prototipo (p.e., la propiedad interna [[Prototype]]) de un objeto especificado a otro objeto o sino establece null.'''
            code:'''Object.appendChain = function(oChain, oProto) {
  if (arguments.length < 2) {
    throw new TypeError('Object.appendChain - Not enough arguments');
  }
  if (typeof oProto === 'number' || typeof oProto === 'boolean') {
    throw new TypeError('second argument to Object.appendChain must be an object or a string');
  }'''
  link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf'''
        }
        values:{
            explain:'''El método Object.values() devuelve un array con los valores correspondientes a las propiedades enumerables de un objeto. Las propiedades son devueltas en el mismo orden a como lo haría un bucle for...in (la única diferencia es que un bucle for-in también enumera las propiedades en la cadena de prototipo de un objeto).'''
            code:'''const object1 = {
  a: 'somestring',
  b: 42,
  c: false
};

console.log(Object.values(object1));
// Expected output: Array ["somestring", 42, false]
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Object/values'''
        }
        }
    date:{
        getdate:{
            explain:'''El método getDate() devuelve el día del mes para la fecha especificada de acuerdo con la hora local.'''
            code:'''var Xmas95 = new Date('December 25, 1995 23:15:30');
var day = Xmas95.getDate();

console.log(day); // 25
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Date/getDate'''
        }
        getday:{
            explain:'''El método getDay() devuelve el día de la semana de la fecha especificada en función de la fecha local; siendo 0 (Domingo) el primer día.

'''
code:'''var Xmas95 = new Date('December 25, 1995 23:15:30');
var weekday = Xmas95.getDay();

console.log(weekday); // 1
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Date/getDay'''

        }
        getfullyear:{
            explain:'''El método getFullYear() devuelve el año de la fecha indicada acorde a la hora local.'''
            code:'''const moonLanding = new Date('July 20, 69 00:20:18');

console.log(moonLanding.getFullYear());
// Expected output: 1969
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Date/getFullYear'''
        }
        gethours:{
            explain:'''El método getHours() retorna la hora de la fecha especificada, de acuerdo a la hora local.'''
            code:'''var Xmas95 = new Date('December 25, 1995 23:15:30');
var hours = Xmas95.getHours();

console.log(hours); // 23
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Date/getHours'''
        }
        getmilliseconds:{
            explain:'''El método getMilliseconds() devuelve la cantidad de milisegundos en el objeto fecha especificado de acuerdo a la hora local.

'''
code:'''var ahora = new Date();
var milisegundos = ahora.getMilliseconds();
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Date/getMilliseconds'''
        }
        getminutes:{
            explain:'''El método getMinutes() devuelve los minutos de la fecha especificada en función de la hora local.'''
            code:'''var Xmas95 = new Date('December 25, 1995 23:15:30');
var minutos = Xmas95.getMinutes();

console.log(minutos); // 15
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Date/getMinutes'''
        }
        getmonth:{
            explain:'''El método getMonth() devuelve el mes del objeto Date según la hora local, donde el número cero indica el primer mes del año.'''
            code:'''var Navidad = new Date('December 25, 2014 23:15:30');
var mes = Navidad.getMonth();

console.log(mes); // 11
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Date/getMonth'''
        }
        getseconds:{
            explain:'''El método getSeconds() devuelve los segundos en la fecha especificada de acuerdo a la hora local.'''
            code:'''const moonLanding = new Date('July 20, 69 00:20:18');

console.log(moonLanding.getSeconds());
// Expected output: 18
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Date/getSeconds'''
        }
        gettime:{
            
        }
        gettimezoneoffset:{
            explain:'''The getTimezoneOffset() method returns the difference, in minutes, between a date as evaluated in the UTC time zone, and the same date as evaluated in the local time zone.

'''
code:'''const date1 = new Date('August 19, 1975 23:15:30 GMT+07:00');
const date2 = new Date('August 19, 1975 23:15:30 GMT-02:00');

console.log(date1.getTimezoneOffset());
// Expected output: your local timezone offset in minutes
// (e.g., -120). NOT the timezone offset of the date object.

console.log(date1.getTimezoneOffset() === date2.getTimezoneOffset());
// Expected output: true
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset'''
        }
        getutcdate:{
            explain:'''The getUTCDate() method returns the day of the month (from 1 to 31) in the specified date according to universal time.'''
            code:'''const date1 = new Date('August 19, 1975 23:15:30 GMT+11:00');
const date2 = new Date('August 19, 1975 23:15:30 GMT-11:00');

console.log(date1.getUTCDate());
// Expected output: 19

console.log(date2.getUTCDate());
// Expected output: 20
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCDate'''
        }
        getutcday:{
            explain:'''The getUTCDay() method returns the day of the week in the specified date according to universal time, where 0 represents Sunday.'''
            code:'''const date1 = new Date('August 19, 1975 23:15:30 GMT+11:00');
const date2 = new Date('August 19, 1975 23:15:30 GMT-11:00');

// Tuesday
console.log(date1.getUTCDay());
// Expected output: 2

// Wednesday
console.log(date2.getUTCDay());
// Expected output: 3
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCDay'''
        }
        getutcfullyear:{
            explain:'''The getUTCFullYear() method returns the year in the specified date according to universal time.'''
            code:'''const date1 = new Date('December 31, 1975, 23:15:30 GMT+11:00');
const date2 = new Date('December 31, 1975, 23:15:30 GMT-11:00');

console.log(date1.getUTCFullYear());
// Expected output: 1975

console.log(date2.getUTCFullYear());
// Expected output: 1976
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCFullYear'''
        }
        getutchours:{
            explain:'''The getUTCHours() method returns the hours in the specified date according to universal time.'''
            code:'''const date1 = new Date('December 31, 1975, 23:15:30 GMT+11:00');
const date2 = new Date('December 31, 1975, 23:15:30 GMT-11:00');

console.log(date1.getUTCHours());
// Expected output: 12

console.log(date2.getUTCHours());
// Expected output: 10
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCHours'''
        }
        getutcmilliseconds:{
            explain:'''The getUTCMilliseconds() method returns the milliseconds portion of the time object's value according to universal time.'''
            code:'''const exampleDate = new Date('2018-01-02T03:04:05.678Z'); // 2 January 2018, 03:04:05.678 (UTC)

console.log(exampleDate.getUTCMilliseconds());
// Expected output: 678
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMilliseconds'''
        }
        getutcminutes:{
            explain:'''The getUTCMinutes() method returns the minutes in the specified date according to universal time.'''
            code:'''const date1 = new Date('1 January 2000 03:15:30 GMT+07:00');
const date2 = new Date('1 January 2000 03:15:30 GMT+03:30');

console.log(date1.getUTCMinutes()); // 31 Dec 1999 20:15:30 GMT
// Expected output: 15

console.log(date2.getUTCMinutes()); // 31 Dec 1999 23:45:30 GMT
// Expected output: 45
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMinutes'''
        }
        getutcmonth:{
            explain:'''The getUTCMonth() returns the month of the specified date according to universal time, as a zero-based value (where zero indicates the first month of the year).'''
            code:'''const date1 = new Date('December 31, 1975, 23:15:30 GMT+11:00');
const date2 = new Date('December 31, 1975, 23:15:30 GMT-11:00');

// December
console.log(date1.getUTCMonth());
// Expected output: 11

// January
console.log(date2.getUTCMonth());
// Expected output: 0
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMonth'''
        }
        getutcseconds:{
            explain:'''The getUTCSeconds() method returns the seconds in the specified date according to universal time.'''
            code:'''const moonLanding = new Date('July 20, 1969, 20:18:04 UTC');

console.log(moonLanding.getUTCSeconds());
// Expected output: 4
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCSeconds'''
        }
        setdate:{
            explain:'''The setDate() method changes the day of the month of a given Date instance, based on local time.'''
            code:'''const event = new Date('August 19, 1975 23:15:30');

event.setDate(24);

console.log(event.getDate());
// Expected output: 24

event.setDate(32);
// Only 31 days in August!

console.log(event.getDate());
// Expected output: 1
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setDate'''
        }
        setfullyear:{
            explain:'''The setFullYear() method sets the full year for a specified date according to local time. Returns new timestamp.'''
            code:'''const event = new Date('August 19, 1975 23:15:30');

event.setFullYear(1969);

console.log(event.getFullYear());
// Expected output: 1969

event.setFullYear(0);

console.log(event.getFullYear());
// Expected output: 0
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setFullYear'''
        }
        sethours:{
            explain:'''The setHours() method sets the hours for a specified date according to local time, and returns the number of milliseconds since January 1, 1970 00:00:00 UTC until the time represented by the updated Date instance.'''
            code:'''const event = new Date('August 19, 1975 23:15:30');
event.setHours(20);

console.log(event);
// Expected output: "Tue Aug 19 1975 20:15:30 GMT+0200 (CEST)"
// Note: your timezone may vary

event.setHours(20, 21, 22);

console.log(event);
// Expected output: "Tue Aug 19 1975 20:21:22 GMT+0200 (CEST)"
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setHours'''
        }
        setmilliseconds:{
            explain:'''The setMilliseconds() method sets the milliseconds for a specified date according to local time.'''
            code:'''const event = new Date('August 19, 1975 23:15:30');

console.log(event.getMilliseconds());
// Expected output: 0

event.setMilliseconds(456);

console.log(event.getMilliseconds());
// Expected output: 456
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMilliseconds'''
        }
        setminutes:{
            explain:'''The setMinutes() method sets the minutes for a specified date according to local time.'''
            code:'''const event = new Date('August 19, 1975 23:15:30');

event.setMinutes(45);

console.log(event.getMinutes());
// Expected output: 45

console.log(event);
// Expected output: "Tue Aug 19 1975 23:45:30 GMT+0200 (CEST)"
// Note: your timezone may vary
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMinutes'''
        }
        setmonth:{
            explain:'''The setMonth() method sets the month for a specified date according to the currently set year.'''
            code:'''const event = new Date('August 19, 1975 23:15:30');

event.setMonth(3);

console.log(event.getMonth());
// Expected output: 3

console.log(event);
// Expected output: "Sat Apr 19 1975 23:15:30 GMT+0100 (CET)"
// Note: your timezone may vary
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMonth'''
        }
        setseconds:{
            explain:'''The setSeconds() method sets the seconds for a specified date according to local time.'''
            code:'''const event = new Date('August 19, 1975 23:15:30');

event.setSeconds(42);

console.log(event.getSeconds());
// Expected output: 42

console.log(event);
// Expected output: "Sat Apr 19 1975 23:15:42 GMT+0100 (CET)"
// Note: your timezone may vary
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setSeconds'''
        }
        settime:{
            explain:'''The setTime() method sets the Date object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC.

'''
code:'''const launchDate = new Date('July 1, 1999, 12:00:00');
const futureDate = new Date();
futureDate.setTime(launchDate.getTime());

console.log(futureDate);
// Expected output: "Thu Jul 01 1999 12:00:00 GMT+0200 (CEST)"

const fiveMinutesInMillis = 5 * 60 * 1000;
futureDate.setTime(futureDate.getTime() + fiveMinutesInMillis);

console.log(futureDate);
// Expected output: "Thu Jul 01 1999 12:05:00 GMT+0200 (CEST)"
// Note: your timezone may vary
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setTime'''
        }
        todatestring:{
            explain:'''The toDateString() method returns the date portion of a Date object interpreted in the local timezone in English.'''
            code:'''const event = new Date(1993, 6, 28, 14, 39, 7);

console.log(event.toString());
// Expected output: "Wed Jul 28 1993 14:39:07 GMT+0200 (CEST)"
// Note: your timezone may vary

console.log(event.toDateString());
// Expected output: "Wed Jul 28 1993"
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toDateString'''
        }
        toisostring:{
            explain:'''The toISOString() method returns a string in simplified extended ISO format (ISO 8601), which is always 24 or 27 characters long (YYYY-MM-DDTHH:mm:ss.sssZ or ±YYYYYY-MM-DDTHH:mm:ss.sssZ, respectively). The timezone is always zero UTC offset, as denoted by the suffix Z.'''
            code:'''const event = new Date('05 October 2011 14:48 UTC');
console.log(event.toString());
// Expected output: "Wed Oct 05 2011 16:48:00 GMT+0200 (CEST)"
// Note: your timezone may vary

console.log(event.toISOString());
// Expected output: "2011-10-05T14:48:00.000Z"
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString'''
        }
        tojson:{
            explain:'''The toJSON() method returns a string representation of the Date object.'''
            code:'''const event = new Date('August 19, 1975 23:15:30 UTC');

const jsonDate = event.toJSON();

console.log(jsonDate);
// Expected output: "1975-08-19T23:15:30.000Z"

console.log(new Date(jsonDate).toUTCString());
// Expected output: "Tue, 19 Aug 1975 23:15:30 GMT"
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toJSON'''
        }
        tolocaledatestring:{
            explain:'''The toLocaleDateString() method returns a string with a language-sensitive representation of the date portion of the specified date in the user agent's timezone. In implementations with Intl.DateTimeFormat API support, this method simply calls Intl.DateTimeFormat.

'''
code:'''const event = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));
const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };

console.log(event.toLocaleDateString('de-DE', options));
// Expected output (varies according to local timezone): Donnerstag, 20. Dezember 2012

console.log(event.toLocaleDateString('ar-EG', options));
// Expected output (varies according to local timezone): الخميس، ٢٠ ديسمبر، ٢٠١٢

console.log(event.toLocaleDateString(undefined, options));
// Expected output (varies according to local timezone and default locale): Thursday, December 20, 2012
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString'''
        }
        tolocalestring:{
            explain:'''The toLocaleString() method returns a string with a language-sensitive representation of this date. In implementations with Intl.DateTimeFormat API support, this method simply calls Intl.DateTimeFormat.'''
            code:'''const event = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));

// British English uses day-month-year order and 24-hour time without AM/PM
console.log(event.toLocaleString('en-GB', { timeZone: 'UTC' }));
// Expected output: "20/12/2012, 03:00:00"

// Korean uses year-month-day order and 12-hour time with AM/PM
console.log(event.toLocaleString('ko-KR', { timeZone: 'UTC' }));
// Expected output: "2012. 12. 20. 오전 3:00:00" '''

link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString'''

        }
        tolocaletimestring:{
            explain:'''The toLocaleTimeString() method returns a string with a language-sensitive representation of the time portion of the date. In implementations with Intl.DateTimeFormat API support, this method simply calls Intl.DateTimeFormat.'''
            code:'''// Depending on timezone, your results will vary
const event = new Date('August 19, 1975 23:15:30 GMT+00:00');

console.log(event.toLocaleTimeString('en-US'));
// Expected output: "1:15:30 AM"

console.log(event.toLocaleTimeString('it-IT'));
// Expected output: "01:15:30"

console.log(event.toLocaleTimeString('ar-EG'));
// Expected output: "١٢:١٥:٣٠ ص"
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString'''
        }
        tostring:{
            explain:'''The toString() method returns a string representing the specified Date object interpreted in the local timezone.'''
            code:'''const event = new Date('August 19, 1975 23:15:30');

console.log(event.toString());
// Expected output: "Tue Aug 19 1975 23:15:30 GMT+0200 (CEST)"
// Note: your timezone may vary
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toString'''
        }
        totimestring:{
            explain:'''The toTimeString() method returns the time portion of a Date object interpreted in the local timezone in English.

'''
code:'''const event = new Date('August 19, 1975 23:15:30');

console.log(event.toTimeString());
// Expected output: "23:15:30 GMT+0200 (CEST)"
// Note: your timezone may vary
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toTimeString'''
        }
        toutcstring:{
            explain:'''The toUTCString() method converts a date to a string, interpreting it in the UTC time zone. toGMTString() is an alias of this method.

'''
code:'''const event = new Date('14 Jun 2017 00:00:00 PDT');

console.log(event.toUTCString());
// Expected output: "Wed, 14 Jun 2017 07:00:00 GMT"
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toUTCString'''
        }
        }
    function:{
        apply:{
            explain:'''El método apply() invoca una determinada función asignando explícitamente el objeto this y un array o similar (array like object (en-US)) como parámetros (argumentos) para dicha función.'''
            code:'''function MyConstructor () {
    for (var nProp = 0; nProp < arguments.length; nProp++) {
        this["property" + nProp] = arguments[nProp];
    }
}

var myArray = [4, "Hello world!", false];
var myInstance = MyConstructor.construct(myArray);

alert(myInstance.property1); // alerts "Hello world!"
alert(myInstance instanceof MyConstructor); // alerts "true"
alert(myInstance.constructor); // alerts "MyConstructor"
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Function/apply'''
        }
        bind:{
            explain:'''El método bind() crea una nueva función, que cuando es llamada, asigna a su operador this el valor entregado, con una secuencia de argumentos dados precediendo a cualquiera entregados cuando la función es llamada.'''
            code:'''this.x = 9;
var module = {
  x: 81,
  getX: function() { return this.x; }
};

module.getX(); // 81

var getX = module.getX;
getX(); // 9, porque en este caso, "this" apunta al objeto global

// Crear una nueva función con 'this' asociado al objeto original 'module'
var boundGetX = getX.bind(module);
boundGetX(); // 81
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Function/bind'''
        }
        call:{
            explain:'''El método call() llama a una función con un valor dado this y con argumentos provistos individualmente.'''
            code:'''El método call() llama a una función con un valor dado this y con argumentos provistos individualmente.'''
            link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Function/call'''
        }
        tostring:{
            explain:'''El método toString() retorna una cadena representando el código fuente de la función.'''
            code:'''function.toString(indentation)'''
            link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Function/toString'''
        }
    }
    number:{
        toexponential:{
            explain:'''The toExponential() method returns a string representing the Number object in exponential notation.'''
            code:'''function expo(x, f) {
  return Number.parseFloat(x).toExponential(f);
}

console.log(expo(123456, 2));
// Expected output: "1.23e+5"

console.log(expo('123456'));
// Expected output: "1.23456e+5"

console.log(expo('oink'));
// Expected output: "NaN"
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential'''
        }
        tofixed:{
            explain:'''The toFixed() method formats a number using fixed-point notation.'''
            code:'''function financial(x) {
  return Number.parseFloat(x).toFixed(2);
}

console.log(financial(123.456));
// Expected output: "123.46"

console.log(financial(0.004));
// Expected output: "0.00"

console.log(financial('1.23e+5'));
// Expected output: "123000.00"
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed'''
        }
        tolocalestring:{
            explain:'''The toLocaleString() method returns a string with a language-sensitive representation of this number. In implementations with Intl.NumberFormat API support, this method simply calls Intl.NumberFormat.'''
            code:'''function eArabic(x){
  return x.toLocaleString('ar-EG');
}

console.log(eArabic(123456.789));
// Expected output: "١٢٣٬٤٥٦٫٧٨٩"

console.log(eArabic('123456.789'));
// Expected output: "123456.789"

console.log(eArabic(NaN));
// Expected output: "ليس رقم"
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString'''
        }
        toprecision:{
            explain:'''The toPrecision() method returns a string representing the Number object to the specified precision.'''
            code:'''function precise(x) {
  return x.toPrecision(4);
}

console.log(precise(123.456));
// Expected output: "123.5"

console.log(precise(0.004));
// Expected output: "0.004000"

console.log(precise(1.23e5));
// Expected output: "1.230e+5"
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision'''

        }
        tostring:{
            explain:'''The toString() method returns a string representing the specified number value.'''
            code:'''function hexColour(c) {
  if (c < 256) {
    return Math.abs(c).toString(16);
  }
  return 0;
}

console.log(hexColour(233));
// Expected output: "e9"

console.log(hexColour('11'));
// Expected output: "b"
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString'''
        }
        valueof:{
            explain:'''The valueOf() method returns the wrapped primitive value of a Number object.'''
            code:'''const numObj = new Number(42);
console.log(typeof numObj);
// Expected output: "object"

const num = numObj.valueOf();
console.log(num);
// Expected output: 42

console.log(typeof num);
// Expected output: "number"
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/valueOf'''
        }
    }
    map:{
        clear:{
            explain:'''The clear() method removes all elements from a Map object.'''
            code:'''const map1 = new Map();

map1.set('bar', 'baz');
map1.set(1, 'foo');

console.log(map1.size);
// Expected output: 2

map1.clear();

console.log(map1.size);
// Expected output: 0
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/clear'''
        }
        delete:{
            explain:'''The delete() method removes the specified element from a Map object by key.'''
            code:'''const map1 = new Map();
map1.set('bar', 'foo');

console.log(map1.delete('bar'));
// Expected result: true
// True indicates successful removal

console.log(map1.has('bar'));
// Expected result: false
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/delete'''
        }
        entries:{
            explain:'''The entries() method returns a new iterator object that contains the [key, value] pairs for each element in the Map object in insertion order. In this particular case, this iterator object is also an iterable, so the for-of loop can be used. When the protocol [Symbol.iterator] is used, it returns a function that, when invoked, returns this iterator itself.'''
            code:'''const map1 = new Map();

map1.set('0', 'foo');
map1.set(1, 'bar');

const iterator1 = map1.entries();

console.log(iterator1.next().value);
// Expected output: Array ["0", "foo"]

console.log(iterator1.next().value);
// Expected output: Array [1, "bar"]
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/entries'''
        }
        foreach:{
            explain:'''The forEach() method executes a provided function once per each key/value pair in the Map object, in insertion order.'''
            code:'''function logMapElements(value, key, map) {
  console.log(`m[${key}] = ${value}`);
}

new Map([['foo', 3], ['bar', {}], ['baz', undefined]])
  .forEach(logMapElements);

// Expected output: "m[foo] = 3"
// Expected output: "m[bar] = [object Object]"
// Expected output: "m[baz] = undefined"
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach'''
        }
        get:{
            explain:'''The get() method returns a specified element from a Map object. If the value that is associated to the provided key is an object, then you will get a reference to that object and any change made to that object will effectively modify it inside the Map object.

'''
code:'''const map1 = new Map();
map1.set('bar', 'foo');

console.log(map1.get('bar'));
// Expected output: "foo"

console.log(map1.get('baz'));
// Expected output: undefined
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get'''

        }
        has:{
            explain:'''The has() method returns a boolean indicating whether an element with the specified key exists or not.'''
            code:'''const map1 = new Map();
map1.set('bar', 'foo');

console.log(map1.has('bar'));
// Expected output: true

console.log(map1.has('baz'));
// Expected output: false
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has'''
        }
        keys:{
            explain:'''The keys() method returns a new iterator object that contains the keys for each element in the Map object in insertion order. In this particular case, this iterator object is also an iterable, so a for...of loop can be used.'''
            code:'''const map1 = new Map();

map1.set('0', 'foo');
map1.set(1, 'bar');

const iterator1 = map1.keys();

console.log(iterator1.next().value);
// Expected output: "0"

console.log(iterator1.next().value);
// Expected output: 1
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/keys'''
        }
        set:{
            explain:'''The set() method adds or updates an entry in a Map object with a specified key and a value.'''
            code:'''const map1 = new Map();
map1.set('bar', 'foo');

console.log(map1.get('bar'));
// Expected output: "foo"

console.log(map1.get('baz'));
// Expected output: undefined
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/set'''
        }
        values:{
            explain:'''The values() method returns a new iterator object that contains the values for each element in the Map object in insertion order.'''
            code:'''const map1 = new Map();

map1.set('0', 'foo');
map1.set(1, 'bar');

const iterator1 = map1.values();

console.log(iterator1.next().value);
// Expected output: "foo"

console.log(iterator1.next().value);
// Expected output: "bar"
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/values'''
        }
        size:{
            explain:'''The size accessor property returns the number of elements in a Map object.'''
            code:'''const map1 = new Map();

map1.set('a', 'alpha');
map1.set('b', 'beta');
map1.set('g', 'gamma');

console.log(map1.size);
// Expected output: 3
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/size'''
        }
    }
    promise:{
        catch:{
            explain:'''El método catch() retorna una Promise y solo se ejecuta en los casos en los que la promesa se marca como Reject. Se comporta igual que al llamar Promise.prototype.then(undefined, onRejected) (de hecho, al llamar obj.catch(onRejected) internamente llama a obj.then(undefined, onRejected)).'''
            code:'''// overriding original Promise.prototype.then/catch just to add some logs
(function(Promise){
  var originalThen = Promise.prototype.then;
  var originalCatch = Promise.prototype.catch;

  Promise.prototype.then = function(){
    console.log('> > > > > > called .then on %o with arguments: %o', this, arguments);
    return originalThen.apply(this, arguments);
  };
  Promise.prototype.catch = function(){
    console.log('> > > > > > called .catch on %o with arguments: %o', this, arguments);
    return originalCatch.apply(this, arguments);
  };
})(this.Promise);

// calling catch on an already resolved promise
Promise.resolve().catch(function XXX(){});

// logs:
// > > > > > > called .catch on Promise{} with arguments: Arguments{1} [0: function XXX()]
// > > > > > > called .then on Promise{} with arguments: Arguments{2} [0: undefined, 1: function XXX()]
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch'''
        }
        then:{
            explain:'''El método then() retorna una Promesa. Recibe dos argumentos: funciones callback para los casos de éxito y fallo de Promise.

Nota: Si ambos argumentos son omitidos, o se proveen métodos que no sean funciones, se creará una nueva Promesa sin handlers adicionales, que simplemente adoptan el estado final de la Promesa que entonces es llamado. Si el primer argumento es omitido o se provee una no-función, el nuevo Promise que es creado simplemente adopta el estado cumplido del Promise que entonces es llamado (si se convierte en fulfilled). Si el segundo argument es omitido o se provee una no-función, el nuevo Promise que es creado simplemente adopta el estado de rechazo del Promesa que entonces es llamado (si se convierte en rechazado).'''
code:'''// al usar una promesa revuelta, el bloque 'then' se lanzará automáticamente,
// pero sus funciones controladoras se lanzarán asíncronamente,
// como demuestran los console.logs
var promResuelta = Promise.resolve(33);

var thenProm = promResuelta.then(función(valor){
  console.log("ésto será invocado cuando acabe el stack principal. El valor recibido y devuelto es: " + valor);
  return valor;
});
// imprimimos al momento el valor de thenProm()
console.log(thenProm);

// usando setTimeout podemos posponer la ejecución de una función al momento en el que el stack quede vacío.
setTimeout(función(){
  console.log(thenProm);
});


// logs, en orden:
// Promise {[[EstadoPromise¡]]: "pendiente", [[ValorPromise]]: undefined}
// "ésto será invocado cuando acabe el stack principal. El valor recibido y devuelto es: "33"
// Promise {[[EstadoPromise]]: "resuelta", [[ValorPromise]]: 33}
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Promise/then'''
        }
        finally:{
            explain:'''El método finally() devuelve una Promise. Cuando la promesa se resuelve, sea exitosa o rechazada, la función de callback específicada será ejecutada. Esto ofrece una forma de ejecutar código sin importar como se haya resuelto la promesa.

'''
code:'''let isLoading = true;

fetch(myRequest).then(function(response) {
    var contentType = response.headers.get("content-type");
    if(contentType && contentType.includes("application/json")) {
      return response.json();
    }
    throw new TypeError("Oops, no hemos obtenido un JSON!");
  })
  .then(function(json) { /* procesar el JSON */ })
  .catch(function(error) { console.log(error); /* esta línea podría arrojar error, e.g. cuando console = {} */ })
  .finally(function() { isLoading = false; });
  '''
  link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Promise/finally'''
        }
        resolve:{
            explain:'''El método Promise.resolve(value) retorna un objeto Promise que es resuelto con el valor dado. Si el valor es una promise, esa promise es devuelta; si el valor es un thenable (si tiene un método "then"), el valor devuelto le seguirá a ese thenable, adoptando su estado; de otro modo la promise devuelta estará completada con el valor.'''
            code:'''const promise1 = Promise.resolve(123);

promise1.then((value) => {
  console.log(value);
  // Expected output: 123
});

'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve'''
        }
        reject:{
            explain:'''El método Promise.reject(reason) retorna un objeto Promise que es rechazado por la razón específicada.'''
            code:'''function resolved(result) {
  console.log('Resolved');
}

function rejected(result) {
  console.error(result);
}

Promise.reject(new Error('fail')).then(resolved, rejected);
// Expected output: Error: fail
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject'''
        }
        race:{
            explain:'''El método Promise.race(iterable) retorna una promesa que se cumplirá o no tan pronto como una de las promesas del argumento iterable se cumpla o se rechace, con el valor o razón de rechazo de ésta.'''
            code:'''var p1 = new Promise( (resolve, reject) => {
    setTimeout(resolve, 500, "uno");
});
var p2 = new Promise( (resolve, reject) => {
    setTimeout(resolve, 100, "dos");
});

Promise.race([p1, p2]).then( value => {
  console.log(value); // "dos"
  // Ambas se resuelven, pero la p2 antes.
});'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Promise/race'''
        }
        all:{
            explain:'''El método Promise.all(iterable) devuelve una promesa que termina correctamente cuando todas las promesas en el argumento iterable han sido concluídas con éxito, o bien rechaza la petición con el motivo pasado por la primera promesa que es rechazada.'''
            code:'''var p1 = Promise.resolve(3);
var p2 = 1337;
var p3 = new Promise((resolve, reject) => {
  setTimeout(resolve, 100, "foo");
});

Promise.all([p1, p2, p3]).then(values => {
  console.log(values); // [3, 1337, "foo"]
});'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Promise/all'''
        }
    }
    json:{
        parse:{
            explain:'''El método JSON.parse() analiza una cadena de texto como JSON, transformando opcionalmente el valor producido por el análisis.'''
            code:'''JSON.parse('{}');              // {}
JSON.parse('true');            // true
JSON.parse('"foo"');           // "foo"
JSON.parse('[1, 5, "false"]'); // [1, 5, "false"]
JSON.parse('null');            // null
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse'''
        }
        stringify:{
            explain:'''El método JSON.stringify() convierte un objeto o valor de JavaScript en una cadena de texto JSON, opcionalmente reemplaza valores si se indica una función de reemplazo, o si se especifican las propiedades mediante un array de reemplazo.

'''
code:'''console.log(JSON.stringify({ x: 5, y: 6 }));
// Expected output: "{"x":5,"y":6}"

console.log(JSON.stringify([new Number(3), new String('false'), new Boolean(false)]));
// Expected output: "[3,"false",false]"

console.log(JSON.stringify({ x: [10, undefined, function(){}, Symbol('')] }));
// Expected output: "{"x":[10,null,null,null]}"

console.log(JSON.stringify(new Date(2006, 0, 2, 15, 4, 5)));
// Expected output: ""2006-01-02T15:04:05.000Z""
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify'''
        }
    }
    boolean:{
        tostring:{
            explain:'''El método toString() retorna una cadena representando el código fuente de la función.'''
            code:'''Function.prototype.toString.call("foo"); // TypeError

var proxy = new Proxy(function() {}, {});
Function.prototype.toString.call(proxy); // TypeError
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Function/toString'''

        }
        valueof:{
            explain:'''El método valueOf() retorna el valor primitivo del objeto especificado.'''
            code:'''function MyNumberType(n) {
  this.number = n;
}

MyNumberType.prototype.valueOf = function() {
  return this.number;
};

const object1 = new MyNumberType(4);

console.log(object1 + 3);
// Expected output: 7
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf'''
        }
    }
    error:{
       tostring:{
           explain:'''The toString() method returns a string representing the specified Error object.'''
           code:'''Error.prototype.toString = function () {
  if (
    this === null ||
    (typeof this !== "object" && typeof this !== "function")
  ) {
    throw new TypeError();
  }
  let name = this.name;
  name = name === undefined ? "Error" : `${name}`;
  let msg = this.message;
  msg = msg === undefined ? "" : `${msg}`;
  if (name === "") {
    return msg;
  }
  if (msg === "") {
    return name;
  }
  return `${name}: ${msg}`;
};'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/toString'''

       } 
    }
    set:{
        add:{
            explain:'''El método add() añade un nuevo elemento con un valor específico al final del objeto Set.'''
            code:'''var mySet = new Set();

mySet.add(1);
mySet.add(5).add("some text"); // chainable

console.log(mySet);
// Set [1, 5, "some text"]
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Set/add'''
        }
        clear:{
            explain:'''El método clear() remueve todos los elementos de un objeto Set.'''
            code:'''var mySet = new Set();
mySet.add(1);
mySet.add("foo");

mySet.size;       // 2
mySet.has("foo"); // true

mySet.clear();

mySet.size;       // 0
mySet.has("bar")  // false
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Set/clear'''
        }
        delete:{
            explain:'''El método delete() remueve el elemento especificado del objeto Set.'''
            code:'''var mySet = new Set();
mySet.add("foo");

mySet.delete("bar"); // Retorna false. No hay elemento "bar" para ser removido.
mySet.delete("foo"); // Retorna true.  Removido exitosamente.

mySet.has("foo");    // Retorna false. El elemento "foo" ya no está presente.
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Set/delete'''
        }
        entries:{
            explain:'''El método entries() devuelve un nuevo objeto de tipo Iterator que contiene un array de tuplas [value, value] por cada elemento en el Set original, manteniendo el orden de inserción. En los objetos de tipo Set no existe una clave key como ocurre en los objetos de tipo Map. Sin embargo, para mantener una API similar a la de los objetos de tipo Map, cada entry contiene el mismo valor para su clave y valor, devolviendo por tanto un array de tuplas [value, value].'''
            code:'''const set1 = new Set();
set1.add(42);
set1.add('forty two');

const iterator1 = set1.entries();

for (const entry of iterator1) {
  console.log(entry);
  // Expected output: Array [42, 42]
  // Expected output: Array ["forty two", "forty two"]
}
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Set/entries'''
        }
        forEach:{
            explain:'''The forEach() method executes a provided function once for each value in the Set object, in insertion order.'''
            code:'''function logSetElements(value1, value2, set) {
  console.log(`s[${value1}] = ${value2}`);
}

new Set(['foo', 'bar', undefined]).forEach(logSetElements);

// Expected output: "s[foo] = foo"
// Expected output: "s[bar] = bar"
// Expected output: "s[undefined] = undefined"
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/forEach'''
        }
        has:{
            explain:'''El método has() retorna un booleano indicando si el elemento especificado existe en el objeto Set o no.

'''
code:'''var mySet = new Set();
mySet.add("foo");

mySet.has("foo");  // retorna true
mySet.has("bar");  // retorna false
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Set/has'''
        }
        values:{
            explain:'''El método values() retorna un objeto de tipo Iterator que contiene los valores para cada elemento en el objecto Set en orden de inserción.'''
            code:'''const set1 = new Set();
set1.add(42);
set1.add('forty two');

const iterator1 = set1.values();

console.log(iterator1.next().value);
// Expected output: 42

console.log(iterator1.next().value);
// Expected output: "forty two"
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Set/values'''
        }
        size:{
            explain:'''La propiedad de acceso size devuelve el número de elementos que hay en el objeto Set.

'''
code:'''var mySet = new Set();
mySet.add(1);
mySet.add(5);
mySet.add("un texto")

mySet.size; // 3
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Set/size'''
        }
        keys:{
            explain:'''The keys() method is an alias for the values() method.'''
            code:'''Syntax
keys()
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/keys'''
        }
    }
    reflect:{
        apply:{
            explain:'''The Reflect.apply() static method calls a target function with arguments as specified.'''
            code:'''console.log(Reflect.apply(Math.floor, undefined, [1.75]));
// Expected output: 1

console.log(Reflect.apply(String.fromCharCode, undefined, [104, 101, 108, 108, 111]));
// Expected output: "hello"

console.log(Reflect.apply(RegExp.prototype.exec, /ab/, ['confabulation']).index);
// Expected output: 4

console.log(Reflect.apply(''.charAt, 'ponies', [3]));
// Expected output: "i"
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/apply'''
        }
        construct:{
            explain:'''The Reflect.construct() static method acts like the new operator, but as a function. It is equivalent to calling new target(...args). It gives also the added option to specify a different prototype.'''
            code:'''function func1(a, b, c) {
  this.sum = a + b + c;
}

const args = [1, 2, 3];
const object1 = new func1(...args);
const object2 = Reflect.construct(func1, args);

console.log(object2.sum);
// Expected output: 6

console.log(object1.sum);
// Expected output: 6
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/construct'''
        }
        defineproperty:{
            explain:'''The Reflect.defineProperty() static method is like Object.defineProperty() but returns a Boolean.

'''
code:'''const object1 = {};

if (Reflect.defineProperty(object1, 'property1', { value: 42 })) {
  console.log('property1 created!');
  // Expected output: "property1 created!"
} else {
  console.log('problem creating property1');
}

console.log(object1.property1);
// Expected output: 42
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/defineProperty'''

        }
        deleteproperty:{
            explain:'''The Reflect.deleteProperty() static method allows to delete properties. It is like the delete operator as a function.

'''
code:'''const object1 = {
  property1: 42
};

Reflect.deleteProperty(object1, 'property1');

console.log(object1.property1);
// Expected output: undefined

const array1 = [1, 2, 3, 4, 5];
Reflect.deleteProperty(array1, '3');

console.log(array1);
// Expected output: Array [1, 2, 3, undefined, 5]
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/deleteProperty'''
        }
        get:{
            explain:'''The Reflect.get() static method works like getting a property from an object (target[propertyKey]) as a function.'''
            code:'''const object1 = {
  x: 1,
  y: 2
};

console.log(Reflect.get(object1, 'x'));
// Expected output: 1

const array1 = ['zero', 'one'];

console.log(Reflect.get(array1, 1));
// Expected output: "one"
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/get'''
        }
        getownpropertydescriptor:{
            explain:'''The Reflect.getOwnPropertyDescriptor() static method is similar to Object.getOwnPropertyDescriptor(). It returns a property descriptor of the given property if it exists on the object, undefined otherwise.

'''
code:'''const object1 = {
  property1: 42
};

console.log(Reflect.getOwnPropertyDescriptor(object1, 'property1').value);
// Expected output: 42

console.log(Reflect.getOwnPropertyDescriptor(object1, 'property2'));
// Expected output: undefined

console.log(Reflect.getOwnPropertyDescriptor(object1, 'property1').writable);
// Expected output: true
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getOwnPropertyDescriptor'''
        }
        getprototypeof:{
            explain:'''The Reflect.getPrototypeOf() static method is almost the same method as Object.getPrototypeOf(). It returns the prototype (i.e. the value of the internal [[Prototype]] property) of the specified object.'''
            code:'''const object1 = {
  property1: 42
};

const proto1 = Reflect.getPrototypeOf(object1);

console.log(proto1);
// Expected output: Object {  }

console.log(Reflect.getPrototypeOf(proto1));
// Expected output: null
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getPrototypeOf'''
        }
        has:{
            explain:'''The Reflect.has() static method works like the in operator as a function.'''
            code:'''const object1 = {
  property1: 42
};

console.log(Reflect.has(object1, 'property1'));
// Expected output: true

console.log(Reflect.has(object1, 'property2'));
// Expected output: false

console.log(Reflect.has(object1, 'toString'));
// Expected output: true
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/has'''
        }
        isextensible:{
            explain:'''The Reflect.isExtensible() static method determines if an object is extensible (whether it can have new properties added to it). It is similar to Object.isExtensible(), but with some differences.'''
            code:'''const object1 = {};

console.log(Reflect.isExtensible(object1));
// Expected output: true

Reflect.preventExtensions(object1);

console.log(Reflect.isExtensible(object1));
// Expected output: false

const object2 = Object.seal({});

console.log(Reflect.isExtensible(object2));
// Expected output: false
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/isExtensible'''
        }
        ownkeys:{
            explain:'''The Reflect.ownKeys() static method returns an array of the target object's own property keys.'''
            code:'''const object1 = {
  property1: 42,
  property2: 13
};

const array1 = [];

console.log(Reflect.ownKeys(object1));
// Expected output: Array ["property1", "property2"]

console.log(Reflect.ownKeys(array1));
// Expected output: Array ["length"]
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/ownKeys'''
                    }
        preventextensions:{
            explain:'''The Reflect.preventExtensions() static method prevents new properties from ever being added to an object (i.e., prevents future extensions to the object). It is similar to Object.preventExtensions(), but with some differences.'''
            code:'''const object1 = {};

console.log(Reflect.isExtensible(object1));
// Expected output: true

Reflect.preventExtensions(object1);

console.log(Reflect.isExtensible(object1));
// Expected output: false
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/preventExtensions'''
        }
        set:{
            explain:'''The Reflect.set() static method works like setting a property on an object.'''
            code:'''const object1 = {};
Reflect.set(object1, 'property1', 42);

console.log(object1.property1);
// Expected output: 42

const array1 = ['duck', 'duck', 'duck'];
Reflect.set(array1, 2, 'goose');

console.log(array1[2]);
// Expected output: "goose"
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/set'''
        }
        setprototypeof:{
            explain:'''The Reflect.setPrototypeOf() static method is the same method as Object.setPrototypeOf(), except for its return type. It sets the prototype (i.e., the internal [[Prototype]] property) of a specified object to another object or to null, and returns true if the operation was successful, or false otherwise.'''
            code:'''const object1 = {};

console.log(Reflect.setPrototypeOf(object1, Object.prototype));
// Expected output: true

console.log(Reflect.setPrototypeOf(object1, null));
// Expected output: true

const object2 = {};

console.log(Reflect.setPrototypeOf(Object.freeze(object2), null));
// Expected output: false
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/setPrototypeOf'''
        }
    }
    weakmap:{
        delete:{}
        get:{}
        has:{}
        set:{}
    }
    weakset:{
        add:{}
        delete:{}
        has:{}
    }
    intl:{
        collator:{}
        datetimeformat:{}
        numberformat:{}
        getcanonicallocales:{}
        pluralrules:{}
        relativetimeformat:{}
        
    }
    symbol:{
        for:{}
        keyfor:{}
        description:{}
        symboltoprimitive:{}
        symboltostringtag:{}
        symbolunscopables:{}
    }
    regexp:{
        exec:{}
        test:{}
        compile:{}
        flags:{}
        global:{}
        ignoreCase:{}
        multiline:{}
        source:{}
        sticky:{}
        unicode:{}
    }
}