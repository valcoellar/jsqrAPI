{
    array:{
        concat:{
            explain: '''El método concat() se usa para unir dos o más arrays. Este método no cambia los arrays existentes, sino que devuelve un nuevo array.''',
            code: '''const array1 = ['a', 'b', 'c'];
                const array2 = ['d', 'e', 'f'];
                const array3 = array1.concat(array2);

                console.log(array3);
                // Expected output: Array ["a", "b", "c", "d", "e", "f"]' ''',
            link: 'https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/concat',
        }
        copywithin:{
            explain: '''El método copyWithin() transfiere una copia plana de una sección a otra dentro del mismo array ( o contexto similar ), sin modificar su propiedad length y lo devuelve.''',
            code: '''const array1 = ['a', 'b', 'c', 'd', 'e'];

// Copy to index 0 the element at index 3
console.log(array1.copyWithin(0, 3, 4));
// Expected output: Array ["d", "b", "c", "d", "e"]

// Copy to index 1 all elements from index 3 to the end
console.log(array1.copyWithin(1, 3));
// Expected output: Array ["d", "d", "e", "d", "e"] ''',
        link: 'https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin'
        }
        entries:{
            explain:'''El método entries() retorna un nuevo objeto Array Iterator que contiene los pares clave/valor para cada índice de la matriz.'''
            code:'''const array1 = ['a', 'b', 'c'];

const iterator1 = array1.entries();

console.log(iterator1.next().value);
// Expected output: Array [0, "a"]

console.log(iterator1.next().value);
// Expected output: Array [1, "b"]
''' 
            link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/entries'''
        }
        every:{
            explain:'''Determina si todos los elementos en el array satisfacen una condición.'''
            code:'''const isBelowThreshold = (currentValue) => currentValue < 40;

const array1 = [1, 30, 39, 29, 10, 13];

console.log(array1.every(isBelowThreshold));
// Expected output: true'''
            link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/every'''
        }
        fill:{
            explain:'''El método fill() cambia todos los elementos en un arreglo por un valor estático, desde el índice start (por defecto 0) hasta el índice end (por defecto array.length). Devuelve el arreglo modificado.'''
            code:'''const array1 = [1, 2, 3, 4];

// Fill with 0 from position 2 until position 4
console.log(array1.fill(0, 2, 4));
// Expected output: Array [1, 2, 0, 0]

// Fill with 5 from position 1
console.log(array1.fill(5, 1));
// Expected output: Array [1, 5, 5, 5]

console.log(array1.fill(6));
// Expected output: Array [6, 6, 6, 6]
'''
            link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/fill'''
        }
        filter:{
            explain:'''El método filter() crea un nuevo array con todos los elementos que cumplan la condición implementada por la función dada.'''
            code:'''const words = ['spray', 'limit', 'elite', 'exuberant', 'destruction', 'present'];

const result = words.filter(word => word.length > 6);

console.log(result);
// Expected output: Array ["exuberant", "destruction", "present"]
'''
            link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/filter'''
        }
        find:{
            explain:'''El método find() devuelve el valor del primer elemento del array que cumple la función de prueba proporcionada.'''
            code:'''const array1 = [5, 12, 8, 130, 44];

const found = array1.find(element => element > 10);

console.log(found);
// Expected output: 12
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/find'''
            
        }
        findindex:{
            explain:'''El método findIndex() devuelve el índice del primer elemento de un array que cumpla con la función de prueba proporcionada. En caso contrario devuelve -1.

'''
    code:'''const array1 = [5, 12, 8, 130, 44];

const isLargeNumber = (element) => element > 13;

console.log(array1.findIndex(isLargeNumber));
// Expected output: 3
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex'''
        }
        flat:{
            explain:'''El método flat() crea una nueva matriz con todos los elementos de sub-array concatenados recursivamente hasta la profundidad especificada.'''
            code:'''var arr1 = [1, 2, [3, 4]];
arr1.flat();
// [1, 2, 3, 4]

var arr2 = [1, 2, [3, 4, [5, 6]]];
arr2.flat();
// [1, 2, 3, 4, [5, 6]]

var arr3 = [1, 2, [3, 4, [5, 6]]];
arr3.flat(2);
// [1, 2, 3, 4, 5, 6]
'''
    link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/flat'''
    
        }
        flatmap:{
            explain:'''El método flatMap() primero mapea cada elemento usando una función de mapeo, luego aplana el resultado en una nueva matriz. Es idéntico a un map seguido de un flatten (en-US)de profundidad 1, pero flatMap es a menudo útil y la fusión de ambos en un método es ligeramente más eficiente.'''
            code:'''const arr1 = [1, 2, [3], [4, 5], 6, []];

const flattened = arr1.flatMap(num => num);

console.log(flattened);
// Expected output: Array [1, 2, 3, 4, 5, 6]
'''
    link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap'''
    
        }
        foreach:{
            explain:'''El método forEach() ejecuta la función indicada una vez por cada elemento del array.'''
            code:'''const array1 = ['a', 'b', 'c'];

array1.forEach(element => console.log(element));

// Expected output: "a"
// Expected output: "b"
// Expected output: "c"
'''
    link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach'''
        }
        includes:{
            explain:'''El método includes() determina si una matriz incluye un determinado elemento, devuelve true o false según corresponda.'''
            code:'''const array1 = [1, 2, 3];

console.log(array1.includes(2));
// Expected output: true

const pets = ['cat', 'dog', 'bat'];

console.log(pets.includes('cat'));
// Expected output: true

console.log(pets.includes('at'));
// Expected output: false
'''
    link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/includes'''
        }
        indexof:{
            explain:'''El método indexOf() retorna el primer índice en el que se puede encontrar un elemento dado en el array, ó retorna -1 si el elemento no esta presente.'''
            code:'''var indices = [];
var array = ['a', 'b', 'a', 'c', 'a', 'd'];
var element = 'a';
var idx = array.indexOf(element);
while (idx != -1) {
  indices.push(idx);
  idx = array.indexOf(element, idx + 1);
}
console.log(indices);
// [0, 2, 4]
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf'''
        }
        join:{
            explain:'''El método join() une todos los elementos de una matriz (o un objeto similar a una matriz) en una cadena y devuelve esta cadena.'''
            code:'''var a = ['Viento', 'Lluvia', 'Fuego'];
var miVar1 = a.join();      // asigna 'Viento,Lluvia,Fuego' a miVar1
var miVar2 = a.join(', ');  // asigna 'Viento, Lluvia, Fuego' a miVar2
var miVar3 = a.join(' + '); // asigna 'Viento + Lluvia + Fuego' a miVar3
var miVar4 = a.join('');    // asigna 'VientoLluviaFuego' a miVar4
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/join'''
        }
        keys:{
            explain:'''El método keys() devuelve un nuevo objeto Array Iterator que contiene las claves de índice con las que acceder a cada elemento en el array.

'''
        code:'''const array1 = ['a', 'b', 'c'];
const iterator = array1.keys();

for (const key of iterator) {
  console.log(key);
}

// Expected output: 0
// Expected output: 1
// Expected output: 2
'''
    link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/keys'''
        }
        lastindexof:{
            explain:'''El método lastIndexOf() devuelve el último índice en el que un cierto elemento puede encontrarse en el arreglo, ó -1 si el elemento no se encontrara. El arreglo es recorrido en sentido contrario, empezando por el índice fromIndex.'''
            code:'''const animals = ['Dodo', 'Tiger', 'Penguin', 'Dodo'];

console.log(animals.lastIndexOf('Dodo'));
// Expected output: 3

console.log(animals.lastIndexOf('Tiger'));
// Expected output: 1
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf'''
        }
        map:{
            explain:'''El método map() crea un nuevo array con los resultados de la llamada a la función indicada aplicados a cada uno de sus elementos.'''
            code:'''var numbers = [1, 5, 10, 15];
var doubles = numbers.map(function(x) {
   return x * 2;
});
// doubles is now [2, 10, 20, 30]
// numbers is still [1, 5, 10, 15]

var numbers = [1, 4, 9];
var roots = numbers.map(function(num) {
    return Math.sqrt(num);
});
// roots is now [1, 2, 3]
// numbers is still [1, 4, 9]
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/map'''
        }
        pop:{
            explain:'''El método pop() elimina el último elemento de un array y lo devuelve. Este método cambia la longitud del array.'''
            code:'''const plants = ['broccoli', 'cauliflower', 'cabbage', 'kale', 'tomato'];

console.log(plants.pop());
// Expected output: "tomato"

console.log(plants);
// Expected output: Array ["broccoli", "cauliflower", "cabbage", "kale"]

plants.pop();

console.log(plants);
// Expected output: Array ["broccoli", "cauliflower", "cabbage"]
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/pop'''
        }
        push:{
            explain:'''El método push() añade uno o más elementos al final de un array y devuelve la nueva longitud del array.'''
            code:'''const animals = ['pigs', 'goats', 'sheep'];

const count = animals.push('cows');
console.log(count);
// Expected output: 4
console.log(animals);
// Expected output: Array ["pigs", "goats", "sheep", "cows"]

animals.push('chickens', 'cats', 'dogs');
console.log(animals);
// Expected output: Array ["pigs", "goats", "sheep", "cows", "chickens", "cats", "dogs"]
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/push'''
        }
        reduce:{
            explain:'''El método reduce() ejecuta una función reductora sobre cada elemento de un array, devolviendo como resultado un único valor.

'''
code:'''const array1 = [1, 2, 3, 4];

// 0 + 1 + 2 + 3 + 4
const initialValue = 0;
const sumWithInitial = array1.reduce(
  (accumulator, currentValue) => accumulator + currentValue,
  initialValue
);

console.log(sumWithInitial);
// Expected output: 10
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce'''
        }
        reduceright:{
            explain:'''Aplica una función simultáneamente contra un acumulador y cada elemento de un array (de derecha a izquierda) para reducirlo a un único valor.'''
            code:'''[0,1,2,3,4].reduceRight(function(valorPrevio, valorActual, indice, array){
  return valorPrevio + valorActual;
});

// First call
valorPrevio = 4, valorActual = 3, indice = 3

// Second call
valorPrevio = 7, valorActual = 2, indice = 2

// Third call
valorPrevio = 9, valorActual = 1, indice = 1

// Fourth call
valorPrevio = 10, valorActual = 0, indice = 0

// el array sobre el que se llama a reduceRight siempre es el objeto [0,1,2,3,4]

// Valor Devuelto: 10
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/ReduceRight'''
        }
        reverse:{
            explain:'''El método reverse() invierte el orden de los elementos de un array in place. El primer elemento pasa a ser el último y el último pasa a ser el primero.

'''
code:'''const array1 = ['one', 'two', 'three'];
console.log('array1:', array1);
// Expected output: "array1:" Array ["one", "two", "three"]

const reversed = array1.reverse();
console.log('reversed:', reversed);
// Expected output: "reversed:" Array ["three", "two", "one"]

// Careful: reverse is destructive -- it changes the original array.
console.log('array1:', array1);
// Expected output: "array1:" Array ["three", "two", "one"]
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse'''
        }
        shift:{
            explain:'''El método shift() elimina el primer elemento del array y lo retorna. Este método modifica la longitud del array.'''
            code:'''var miPescado = ['ángel', 'payaso', 'mandarín', 'cirujano'];

console.log('miPescado antes: ' + miPescado);
// "miPescado antes: ángel,payaso,mandarín,cirujano"

var eliminado = miPescado.shift();

console.log('miPescado después: ' + miPescado);
// "miPescado after: payaso,mandarín,cirujano"

console.log('Elemento eliminado: ' + eliminado);
// "Elemento eliminado: ángel"
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/shift'''
        }
        slice:{
            explain:'''El método slice() devuelve una copia de una parte del array dentro de un nuevo array empezando por inicio hasta fin (fin no incluido). El array original no se modificará.

'''
code:'''var nombres = ['Rita', 'Pedro', 'Miguel', 'Ana', 'Vanesa'];
var masculinos = nombres.slice(1, 3);

// masculinos contiene ['Pedro','Miguel']
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/slice'''
        }
        some:{
            explain:'''El método some() comprueba si al menos un elemento del array cumple con la condición implementada por la función proporcionada.'''
            code:'''const array = [1, 2, 3, 4, 5];

// Checks whether an element is even
const even = (element) => element % 2 === 0;

console.log(array.some(even));
// Expected output: true
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/some'''
        }
        sort:{
            explain:'''El método sort() ordena los elementos de un arreglo (array) localmente y devuelve el arreglo ordenado. La ordenación no es necesariamente estable. El modo de ordenación por defecto responde a la posición del valor del string de acuerdo a su valor Unicode.'''
            code:'''var frutas = ['guindas', 'manzanas', 'bananas'];
frutas.sort(); // ['bananas', 'guindas', 'manzanas']

var puntos = [1, 10, 2, 21];
puntos.sort(); // [1, 10, 2, 21]
// Tenga en cuenta que 10 viene antes que 2
// porque '10' viene antes que '2' según la posición del valor Unicode.

var cosas = ['word', 'Word', '1 Word', '2 Words'];
cosas.sort(); // ['1 Word', '2 Words', 'Word', 'word']
// En Unicode, los números vienen antes que las letras mayúsculas
// y estas vienen antes que las letras minúsculas.
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/sort'''
        }
        splice:{
            explain:'''El método splice() cambia el contenido de un array eliminando elementos existentes y/o agregando nuevos elementos.'''
            code:'''const months = ['Jan', 'March', 'April', 'June'];
months.splice(1, 0, 'Feb');
// Inserts at index 1
console.log(months);
// Expected output: Array ["Jan", "Feb", "March", "April", "June"]

months.splice(4, 1, 'May');
// Replaces 1 element at index 4
console.log(months);
// Expected output: Array ["Jan", "Feb", "March", "April", "May"]
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/splice'''
        }
        tolocalestring:{
            explain:'''El método toLocaleString() devuelve una cadena de texto representando los elementos del array. Los elementos son convertidos a texto usando su método toLocaleString y dichos Strings son separados por un caracter específico para la localidad (como una coma para la separación de decimales “,”).

'''
code:'''const array1 = [1, 'a', new Date('21 Dec 1997 14:12:00 UTC')];
const localeString = array1.toLocaleString('en', { timeZone: 'UTC' });

console.log(localeString);
// Expected output: "1,a,12/21/1997, 2:12:00 PM",
// This assumes "en" locale and UTC timezone - your results may vary
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString'''
        }
        tostring:{
            explain:'''El método toString() devuelve una cadena de caracteres representando el array especificado y sus elementos.'''
            code:'''const array1 = [1, 2, 'a', '1a'];

console.log(array1.toString());
// Expected output: "1,2,a,1a"
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/toString'''
        }
        unshift:{
            explain:'''El método unshift() agrega uno o más elementos al inicio del array, y devuelve la nueva longitud del array.'''
            code:'''const array1 = [1, 2, 3];

console.log(array1.unshift(4, 5));
// Expected output: 5

console.log(array1);
// Expected output: Array [4, 5, 1, 2, 3]
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift'''
        }
        values:{
            explain:'''El método values() devuelve un nuevo objeto Array Iterator que contiene los valores para cada índice del array.'''
            code:'''var a = ['w', 'y', 'k', 'o', 'p'];
var iterator = a.values();

console.log(iterator.next().value); // w
console.log(iterator.next().value); // y
console.log(iterator.next().value); // k
console.log(iterator.next().value); // o
console.log(iterator.next().value); // p
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/values'''
        }
        
    }
    string:{
        charat:{
            explain:'''El método charAt() de String devuelve en un nuevo String el carácter UTF-16 de una cadena.'''
            code:'''var cualquierCadena="Brave new world";

console.log("El carácter en el índice 0 es '" + cualquierCadena.charAt(0) + "'")
console.log("El carácter en el índice 1 es '" + cualquierCadena.charAt(1) + "'")
console.log("El carácter en el índice 2 es '" + cualquierCadena.charAt(2) + "'")
console.log("El carácter en el índice 3 es '" + cualquierCadena.charAt(3) + "'")
console.log("El carácter en el índice 4 es '" + cualquierCadena.charAt(4) + "'")
console.log("El carácter en el índice 999 es '" + cualquierCadena.charAt(999) + "'")

El carácter en el índice 0 es 'B'
El carácter en el índice 1 es 'r'
El carácter en el índice 2 es 'a'
El carácter en el índice 3 es 'v'
El carácter en el índice 4 es 'e'
El carácter en el índice 999 es ''
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/charAt'''
        }
        charcodeat:{
            explain:'''El charCodeAt() método devuelve un número indicando el valor Unicode del carácter en el índice proporcionado.'''
            code:'''"ABC".charCodeAt(0) // returns 65'''
            link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt'''
        }
        concat:{
            explain:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt'''
            code:'''const str1 = 'Hello';
const str2 = 'World';

console.log(str1.concat(' ', str2));
// Expected output: "Hello World"

console.log(str2.concat(', ', str1));
// Expected output: "World, Hello"
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/concat'''
        }
        endswith:{
            explain:'''El método endsWith() determina si una cadena de texto termina con los caracteres de una cadena indicada, devolviendo true o false según corresponda.'''
            code:'''const str1 = 'Cats are the best!';

console.log(str1.endsWith('best!'));
// Expected output: true

console.log(str1.endsWith('best', 17));
// Expected output: true

const str2 = 'Is this a question?';

console.log(str2.endsWith('question'));
// Expected output: false
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith'''
        }
        inlcudes:{
            explain:'''El método includes() determina si una cadena de texto puede ser encontrada dentro de otra cadena de texto, devolviendo true o false según corresponda.'''
            code:'''const sentence = 'The quick brown fox jumps over the lazy dog.';

const word = 'fox';

console.log(`The word "${word}" ${sentence.includes(word) ? 'is' : 'is not'} in the sentence`);
// Expected output: "The word "fox" is in the sentence"
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/includes'''
        }
        indexof:{
            explain:'''El método indexOf() devuelve el índice, dentro del objeto String que realiza la llamada, de la primera ocurrencia del valor especificado, comenzando la búsqueda desde indiceDesde; o -1 si no se encuentra dicho valor.'''
            code:'''"Blue Whale".indexOf("Blue")    // returns 0
"Blue Whale".indexOf("Blute")   // returns -1
"Blue Whale".indexOf("Whale",0) // returns 5
"Blue Whale".indexOf("Whale",5) // returns 5
"Blue Whale".indexOf("",9)      // returns 9
"Blue Whale".indexOf("",10)     // returns 10
"Blue Whale".indexOf("",11)     // returns 10
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf'''
        }
        lastindexof:{
            explain:'''El método lastIndexOf() devuelve la posicion (indice) en la que se encuentra el valorBusqueda, dentro del objeto String que realiza la llamada, de la última ocurrencia del valor especificado; o -1 si no se halla. La búsqueda se realiza empezando por el final de la cadena que realiza la llamada, empezando en indiceDesde.

'''
code:'''"canal".lastIndexOf("a")   // returns 3
"canal".lastIndexOf("a",2) // returns 1
"canal".lastIndexOf("a",0) // returns -1
"canal".lastIndexOf("x")   // returns -1
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf'''

        }
        localecompare:{
            explain:'''El método localeCompare() retorna un número indicando si una cadena de carateres de referencia va antes, después o si es la misma que la cadena dada en orden alfabético.'''
            code:'''const a = 'réservé'; // With accents, lowercase
const b = 'RESERVE'; // No accents, uppercase

console.log(a.localeCompare(b));
// Expected output: 1
console.log(a.localeCompare(b, 'en', { sensitivity: 'base' }));
// Expected output: 0
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare'''

        }
        match:{
            explain:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare'''
            code:'''const paragraph = 'The quick brown fox jumps over the lazy dog. It barked.';
const regex = /[A-Z]/g;
const found = paragraph.match(regex);

console.log(found);
// Expected output: Array ["T", "I"]
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/match'''
        }
        normalize:{
            explain:'''El método normalize() retorna la Forma de Normalización Unicode de la cadena dada (si el valor no es una cadena, primero será convertido a ese tipo).'''
            code:'''// Cadena inicial

// U+1E9B: LETRA S LATINA MINÚSCULA CON PUNTO ARRIBA
// U+0323: COMBINACIÓN CON PUNTO ABAJO
var str = '\u1E9B\u0323';


// Forma compuesta canónicamente (NFC)

// U+1E9B: LETRA S LATINA MINÚSCULA CON PUNTO ARRIBA
// U+0323: COMBINACIÓN CON PUNTO ABAJO
str.normalize('NFC'); // '\u1E9B\u0323'
str.normalize();      // lo mismo que arriba


// Forma canónicamente descompuesta (NFD)

// U+017F: LETRA S LATINA MINÚSCULA
// U+0323: COMBINACIÓN CON PUNTO ABAJO
// U+0307: COMBINACIÓN CON PUNTO ARRIBA
str.normalize('NFD'); // '\u017F\u0323\u0307'


// Compuesta con compatibilidad (NFKC)

// U+1E69: LETRA S LATINA MINÚSCULA CON PUNTO ARRIBA Y ABAJO
str.normalize('NFKC'); // '\u1E69'


// Descompuesta con compatibilidad (NFKD)

// U+0073: LETRA S LATINA MINÚSCULA
// U+0323: COMBINACIÓN CON PUNTO ABAJO
// U+0307: COMBINACIÓN CON PUNTO ARRIBA
str.normalize('NFKD'); // '\u0073\u0323\u0307'
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/normalize'''

        }
        padend:{
            explain:'''The padEnd() method pads the current string with a given string (repeated, if needed) so that the resulting string reaches a given length. The padding is applied from the end of the current string.'''
            code:'''const str1 = 'Breaded Mushrooms';

console.log(str1.padEnd(25, '.'));
// Expected output: "Breaded Mushrooms........"

const str2 = '200';

console.log(str2.padEnd(5));
// Expected output: "200  "
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd'''

        }
        padstart:{
            explain:'''The padStart() method pads the current string with another string (multiple times, if needed) until the resulting string reaches the given length. The padding is applied from the start of the current string.'''
            code:'''const str1 = '5';

console.log(str1.padStart(2, '0'));
// Expected output: "05"

const fullNumber = '2034399002125581';
const last4Digits = fullNumber.slice(-4);
const maskedNumber = last4Digits.padStart(fullNumber.length, '*');

console.log(maskedNumber);
// Expected output: "************5581"
'''
link:'''https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart'''

        }
        repeat:{
            explain:'''El método repeat() construye y devuelve una nueva cadena que contiene el número especificado de copias de la cadena en la cual fue llamada, concatenados.'''
            code:''''abc'.repeat(-1);   // RangeError
'abc'.repeat(0);    // ''
'abc'.repeat(1);    // 'abc'
'abc'.repeat(2);    // 'abcabc'
'abc'.repeat(3.5);  // 'abcabcabc' (count will be converted to integer)
'abc'.repeat(1/0);  // RangeError

({ toString: () => 'abc', repeat: String.prototype.repeat }).repeat(2);
// 'abcabc' (repeat() is a generic method)
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/repeat'''

        }
        replace:{
            explain:'''El método replace() devuelve una nueva cadena con algunas o todas las coincidencias de un patrón, siendo cada una de estas coincidencias reemplazadas por remplazo. El patrón puede ser una cadena o una RegExp, y el reemplazo puede ser una cadena o una función que será llamada para cada coincidencia. Si el patrón es una cadena, sólo la primera coincidencia será reemplazada.'''
            code:'''const p = 'The quick brown fox jumps over the lazy dog. If the dog reacted, was it really lazy?';

console.log(p.replace('dog', 'monkey'));
// Expected output: "The quick brown fox jumps over the lazy monkey. If the dog reacted, was it really lazy?"


const regex = /Dog/i;
console.log(p.replace(regex, 'ferret'));
// Expected output: "The quick brown fox jumps over the lazy ferret. If the dog reacted, was it really lazy?"'''
        }
        search:{
            explain:'''El método search() ejecuta una búsqueda que encaje entre una expresión regular y el objeto String desde el que se llama.'''
            code:'''function testinput(re, str) {
  var midstring;
  if (str.search(re) != -1) {
    midstring = ' contains ';
  } else {
    midstring = ' does not contain ';
  }
  console.log(str + midstring + re);
}'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/search'''
        }
        slice:{
            explain:'''El método slice() extrae una sección de una cadena y devuelve una cadena nueva.'''
            code:'''var cadena1 = "La mañana se nos echa encima.";
var cadena2 = cadena1.slice(3, -2);
console.log(cadena2);

Esto escribe:

mañana se nos echa encim
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/slice'''
        }
        split:{
            explain:'''El método split() divide un objeto de tipo String en un array (vector) de cadenas mediante la separación de la cadena en subcadenas.

'''
code:'''function dividirCadena(cadenaADividir,separador) {
   var arrayDeCadenas = cadenaADividir.split(separador);
   document.write('<p>La cadena original es: "' + cadenaADividir + '"');
   document.write('<br>El separador es: "' + separador + '"');
   document.write("<br>El array tiene " + arrayDeCadenas.length + " elementos: ");

   for (var i=0; i < arrayDeCadenas.length; i++) {
      document.write(arrayDeCadenas[i] + " / ");
   }
}

var cadenaVerso = "Oh brave new world that has such people in it.";
var cadenaMeses = "Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec";

var espacio = " ";
var coma = ",";

dividirCadena(cadenaVerso, espacio);
dividirCadena(cadenaVerso);
dividirCadena(cadenaMeses, coma);

Este ejemplo produce el siguiente resultado:

La cadena original es: "Oh brave new world that has such people in it."
El separador es: " "
El array tiene 10 elementos: Oh / brave / new / world / that / has / such / people / in / it. /

La cadena original es: "Oh brave new world that has such people in it."
El separador es: "undefined"
El array tiene 1 elementos: Oh brave new world that has such people in it. /

La cadena original es: "Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec"
El separador es: ","
El array tiene 12 elementos: Jan / Feb / Mar / Apr / May / Jun / Jul / Aug / Sep / Oct / Nov / Dec /
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/split'''

        }
        startswith:{
            explain:'''El método startsWith() indica si una cadena de texto comienza con los caracteres de una cadena de texto concreta, devolviendo true o false según corresponda.'''
            code:'''const str1 = 'Saturday night plans';

console.log(str1.startsWith('Sat'));
// Expected output: true

console.log(str1.startsWith('Sat', 3));
// Expected output: false
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith'''
        }
        substr:{
            explain:'''El método substr() devuelve los caracteres de una cadena que comienzan en una localización especificada y de acuerdo al número de caracteres que se especifiquen.'''
            code:'''Advertencia: Advertencia: Aunque String.prototype.substr(…) no está estrictamente obsoleto (como en "eliminado de los estándares web"), se define en el anexo B de la norma ECMA-262, cuya introducción establece:

... Todas las características y comportamientos del lenguaje especificados en este anexo tienen una o más características indeseables y, en ausencia de uso heredado, se eliminarían de esta especificación. ... ... Los programadores no deben usar ni asumir la existencia de estas características y comportamientos al escribir un nuevo código ECMAScript.
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/substr'''
        }
        substring:{
            explain:'''El substring() método devuelve un subconjunto de un objeto String.'''
            code:'''// asume una función print ya definida
var cualquierCadena = "Mozilla";

// Muestra "Moz"
print(cualquierCadena.substring(0,3));
print(cualquierCadena.substring(3,0));

// Muestra "lla"
print(cualquierCadena.substring(4,7));
print(cualquierCadena.substring(7,4));

// Muestra "Mozill"
print(cualquierCadena.substring(0,6));
print(cualquierCadena.substring(6,0));

// Muestra "Mozilla"
print(cualquierCadena.substring(0,7));
print(cualquierCadena.substring(0,10));
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/substring'''
        }
        tolocalelowercase:{
            explain:'''El método toLocaleLowerCase() retorna la cadena de texto desde la que se llama convertida en minúsculas, de acuerdo con cualquier localización específica de correspondencia de mayúsculas y minúsculas.
'''
code:'''const dotted = 'İstanbul';

console.log(`EN-US: ${dotted.toLocaleLowerCase('en-US')}`);
// Expected output: "i̇stanbul"

console.log(`TR: ${dotted.toLocaleLowerCase('tr')}`);
// Expected output: "istanbul"
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleLowerCase'''

        }
        tolocaleuppercase:{
            explain:'''El método toLocaleUpperCase() devuelve el valor de la cadena que lo llama convertido en mayúsculas, de acuerdo con las asignaciones de casos específicos de la configuración regional.'''
            code:''''alphabet'.toLocaleUpperCase(); // 'ALPHABET'

'i\u0307'.toLocaleUpperCase('lt-LT'); // 'I'

let locales = ['lt', 'LT', 'lt-LT', 'lt-u-co-phonebk', 'lt-x-lietuva'];
'i\u0307'.toLocaleUpperCase(locales); // 'I'
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleUpperCase'''
        }
        tolowercase:{
            explain:'''El método toLowerCase() devuelve el valor en minúsculas de la cadena que realiza la llamada.'''
            code:'''var textoMayusculas="ALFABETO"
document.write(textoMayusculas.toLowerCase())
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase'''
        }
        touppercase:{
            explain:'''El toUpperCase() método devuelve el valor convertido en mayúsculas de la cadena que realiza la llamada.'''
            code:'''console.log( "alphabet".toUpperCase() ); // "ALPHABET"'''
            link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase'''
        }
        tostring:{
            explain:'''El toString() método devuelve una cadena que representa al objeto especificado.'''
            code:'''cadena = new String("Hello world");
alert(cadena.toString())      // Displays "Hello world"
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/toString'''
        }
        trim:{
            explain:'''El método trim( ) elimina los espacios en blanco en ambos extremos del string. Los espacios en blanco en este contexto, son todos los caracteres sin contenido (espacio, tabulación, etc.) y todos los caracteres de nuevas lineas (LF,CR,etc.).'''
            code:'''var orig = '   foo  ';
console.log(orig.trim()); // 'foo'

// Otro ejemplo de .trim() eliminando el espacio en blanco sólo de un lado.

var orig = 'foo    ';
console.log(orig.trim()); // 'foo'
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/Trim'''
        }
    }
    math:{
        abs:{
            explain:'''La función Math.abs() retorna el valor absoluto de un número'''
            code:'''Math.abs('-1');     // 1
Math.abs(-2);       // 2
Math.abs(null);     // 0
Math.abs('');       // 0
Math.abs([]);       // 0
Math.abs([2]);      // 2
Math.abs([1,2]);    // NaN
Math.abs({});       // NaN
Math.abs('string'); // NaN
Math.abs();         // NaN
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/abs'''
        }
        acos:{
            explain:'''La función Math.acos() devuelve el arco coseno (en radianes) de un número'''
            code:'''Math.acos(-2);  // NaN
Math.acos(-1);  // 3.141592653589793
Math.acos(0);   // 1.5707963267948966
Math.acos(0.5); // 1.0471975511965979
Math.acos(1);   // 0
Math.acos(2);   // NaN
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/acos'''
        }
        asin:{
            explain:'''La Funcion Math.asin() retorna El arco seno (en radianes) de un número'''
            code:'''Math.asin(-2);  // NaN
Math.asin(-1);  // -1.5707963267948966 (-pi/2)
Math.asin(0);   // 0
Math.asin(0.5); // 0.5235987755982989
Math.asin(1);   // 1.5707963267948966 (pi/2)
Math.asin(2);   // NaN
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/asin'''

        }
        atan:{
            explain:'''La función Math.atan() retorna el arcotangente (en radianes) de un numero'''
            code:'''// Calculates angle of a right-angle triangle in radians
function calcAngle(opposite, adjacent) {
  return Math.atan(opposite / adjacent);
}

console.log(calcAngle(8, 10));
// Expected output: 0.6747409422235527

console.log(calcAngle(5, 3));
// Expected output: 1.0303768265243125
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/atan'''
        }
        atan2:{
            explain:'''La función Math.atan2() retorna la arcotangente del cociente de los argumentos.'''
            code:'''Math.atan2(90, 15); // 1.4056476493802699
Math.atan2(15, 90); // 0.16514867741462683

Math.atan2(±0, -0);               // ±PI.
Math.atan2(±0, +0);               // ±0.
Math.atan2(±0, -x);               // ±PI for x > 0.
Math.atan2(±0, x);                // ±0 for x > 0.
Math.atan2(-y, ±0);               // -PI/2 for y > 0.
Math.atan2(y, ±0);                // PI/2 for y > 0.
Math.atan2(±y, -Infinity);        // ±PI for finite y > 0.
Math.atan2(±y, +Infinity);        // ±0 for finite y > 0.
Math.atan2(±Infinity, x);         // ±PI/2 for finite x.
Math.atan2(±Infinity, -Infinity); // ±3*PI/4.
Math.atan2(±Infinity, +Infinity); // ±PI/4.
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/atan2'''

        }
        ceil:{
            explain:'''La función Math.ceil() devuelve el entero mayor o igual más próximo a un número dado.'''
            code:'''console.log(Math.ceil(.95));
// Expected output: 1

console.log(Math.ceil(4));
// Expected output: 4

console.log(Math.ceil(7.004));
// Expected output: 8

console.log(Math.ceil(-7.004));
// Expected output: -7
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil'''
        }
        cos:{
            explain:'''La función estática Math.cos() devuelve el coseno del ángulo especificado, que debe ser especificado en radianes'''
            code:'''function getCircleX(radians, radius) {
  return Math.cos(radians) * radius;
}

console.log(getCircleX(1, 10));
// Expected output: 5.403023058681398

console.log(getCircleX(2, 10));
// Expected output: -4.161468365471424

console.log(getCircleX(Math.PI, 10));
// Expected output: -10
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/cos'''

        }
        exp:{
            explain:'''La función Math.exp() devuelve ex, donde x es el argumento, y e es El número de Euler (también conocido como la constante de Napier), la base de los algoritmos naturales.'''
            code:'''Math.exp(-1); // 0.36787944117144233
Math.exp(0);  // 1
Math.exp(1);  // 2.718281828459045
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/exp'''

        }
        floor:{
            explain:'''Devuelve el máximo entero menor o igual a un número.'''
            code:'''function getFloor(x) {
   return Math.floor(x);
}
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/floor'''
        }
        log:{
            explain:'''La función Math.log() devuelve la base neutral de un número (base e)'''
            code:'''function getBaseLog(x, y) {
  return Math.log(y) / Math.log(x);
}

// 2 x 2 x 2 = 8
console.log(getBaseLog(2, 8));
// Expected output: 3

// 5 x 5 x 5 x 5 = 625
console.log(getBaseLog(5, 625));
// Expected output: 4
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/log'''
        }
        max:{
            explain:'''La función Math.max() retorna el mayor de cero o más números dados como parámetros de entrada, o NaN si cualquier parámetro no es un número y no puede ser convertido en uno.

'''
code:'''console.log(Math.max(1, 3, 2));
// Expected output: 3

console.log(Math.max(-1, -3, -2));
// Expected output: -1

const array1 = [1, 3, 2];

console.log(Math.max(...array1));
// Expected output: 3
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/max'''
        }
        min:{
            explain:'''La función Math.min() devuelve el menor de cero o más números.'''
            code:'''Lo siguiente encuentra el mínimo de x e y y lo asigna a z:

var x = 10, y = -20;
var z = Math.min(x, y);
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/min'''
        }
        pow:{
            explain:'''La función Math.pow() devuelve la base elevada al exponente , esto es, baseexponente.

'''
code:'''// simple
Math.pow(7, 2);    // 49
Math.pow(7, 3);    // 343
Math.pow(2, 10);   // 1024
// exponentes fraccionales
Math.pow(4, 0.5);  // 2 (raíz cuadrada de 4)
Math.pow(8, 1/3);  // 2 (raíz cúbica de 8)
Math.pow(2, 0.5);  // 1.412135623730951 (raíz cuadrada de 2)
Math.pow(2, 1/3);  // 1.2599210498948732 (raíz cúbica de 2)
// exponentes con signo
Math.pow(7, -2);   // 0.02040816326530612 (1/49)
Math.pow(8, -1/3); // 0.5
// bases con signo
Math.pow(-7, 2);   // 49 (los cuadrados son positivos)
Math.pow(-7, 3);   // -343 (El cubo de una base negativa puede ser negativo)
Math.pow(-7, 0.5); // NaN (Los números negativos no tienen raíz cuadrada real)
Math.pow(-7, 1/3); // NaN
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/pow'''
        }
        random:{
            explain:'''La función Math.random() devuelve un número de coma flotante pseudo-aleatorio, comprendido en el rango de 0 a menor que 1 (es decir, incluido el 0 pero no el 1), con una distribución aproximadamente uniforme en este rango. Dicho rango puede ser ampliado hasta los valores deseados. La implementación selecciona la semilla inicial del algoritmo de generación de números aleatorios, no pudiendo ser esta elegida o restablecida por el usuario.'''
            code:'''function getRandomInt(max) {
  return Math.floor(Math.random() * max);
}

console.log(getRandomInt(3));
// Expected output: 0, 1 or 2

console.log(getRandomInt(1));
// Expected output: 0

console.log(Math.random());
// Expected output: a number from 0 to <1
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/random'''
        }
        round:{
            explain:'''La función Math.round()retorna el valor de un número redondeado al entero más cercano.'''
            code:'''// Retorna el valor 20
x = Math.round(20.49);

// Retorna el valor 21
x = Math.round(20.5);

// Retorna el valor -20
x = Math.round(-20.5);

// Retorna el valor -21
x = Math.round(-20.51);

// Retorna el valor 1 (!)
// Note el error de redondeo debido a la inexactitud del punto aritmético.
// Compare esto con Math.round10(1.005, -2) de el ejemplo de abajo.
x = Math.round(1.005*100)/100;
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/round'''
        }
        sin:{
            explain:'''La función Math.sin() devuelve el seno de un número.'''
            code:'''Math.sin(0);           // 0
Math.sin(1);           // 0.8414709848078965

Math.sin(Math.PI / 2); // 1
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/sin'''

        }
        sqrt:{
            explain:'''La función Math.sqrt() retorna la raíz cuadrada de un número'''
            code:'''Math.sqrt(9); // 3
Math.sqrt(2); // 1.414213562373095

Math.sqrt(1);  // 1
Math.sqrt(0);  // 0
Math.sqrt(-1); // NaN
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt'''
        }
        tan:{
            explain:'''La función Math.tan() retorna la tangente de un número.'''
            code:'''function getTanFromDegrees(degrees) {
  return Math.tan(degrees * Math.PI / 180);
}

console.log(getTanFromDegrees(0));
// Expected output: 0

console.log(getTanFromDegrees(45));
// Expected output: 0.9999999999999999

console.log(getTanFromDegrees(90));
// Expected output: 16331239353195370
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/tan'''
        }
    }
    object:{}
    date:{}
    function:{}
    number:{}
    map:{}
    promise:{}
    json:{}
    boolean:{}
    error:{}
    set:{}
    reflect:{}
    weakmap:{}
    weakset:{}
    intl:{}
    symbol:{}
    regexp:{}
}