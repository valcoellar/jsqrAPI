{
    array:{
        concat:{
            explain: '''El método concat() se usa para unir dos o más arrays. Este método no cambia los arrays existentes, sino que devuelve un nuevo array.''',
            code: '''const array1 = ['a', 'b', 'c'];
                const array2 = ['d', 'e', 'f'];
                const array3 = array1.concat(array2);

                console.log(array3);
                // Expected output: Array ["a", "b", "c", "d", "e", "f"]' ''',
            link: 'https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/concat',
        }
        copywithin:{
            explain: '''El método copyWithin() transfiere una copia plana de una sección a otra dentro del mismo array ( o contexto similar ), sin modificar su propiedad length y lo devuelve.''',
            code: '''const array1 = ['a', 'b', 'c', 'd', 'e'];

// Copy to index 0 the element at index 3
console.log(array1.copyWithin(0, 3, 4));
// Expected output: Array ["d", "b", "c", "d", "e"]

// Copy to index 1 all elements from index 3 to the end
console.log(array1.copyWithin(1, 3));
// Expected output: Array ["d", "d", "e", "d", "e"] ''',
        link: 'https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin'
        }
        entries:{
            explain:'''El método entries() retorna un nuevo objeto Array Iterator que contiene los pares clave/valor para cada índice de la matriz.'''
            code:'''const array1 = ['a', 'b', 'c'];

const iterator1 = array1.entries();

console.log(iterator1.next().value);
// Expected output: Array [0, "a"]

console.log(iterator1.next().value);
// Expected output: Array [1, "b"]
''' 
            link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/entries'''
        }
        every:{
            explain:'''Determina si todos los elementos en el array satisfacen una condición.'''
            code:'''const isBelowThreshold = (currentValue) => currentValue < 40;

const array1 = [1, 30, 39, 29, 10, 13];

console.log(array1.every(isBelowThreshold));
// Expected output: true'''
            link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/every'''
        }
        fill:{
            explain:'''El método fill() cambia todos los elementos en un arreglo por un valor estático, desde el índice start (por defecto 0) hasta el índice end (por defecto array.length). Devuelve el arreglo modificado.'''
            code:'''const array1 = [1, 2, 3, 4];

// Fill with 0 from position 2 until position 4
console.log(array1.fill(0, 2, 4));
// Expected output: Array [1, 2, 0, 0]

// Fill with 5 from position 1
console.log(array1.fill(5, 1));
// Expected output: Array [1, 5, 5, 5]

console.log(array1.fill(6));
// Expected output: Array [6, 6, 6, 6]
'''
            link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/fill'''
        }
        filter:{
            explain:'''El método filter() crea un nuevo array con todos los elementos que cumplan la condición implementada por la función dada.'''
            code:'''const words = ['spray', 'limit', 'elite', 'exuberant', 'destruction', 'present'];

const result = words.filter(word => word.length > 6);

console.log(result);
// Expected output: Array ["exuberant", "destruction", "present"]
'''
            link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/filter'''
        }
        find:{
            explain:'''El método find() devuelve el valor del primer elemento del array que cumple la función de prueba proporcionada.'''
            code:'''const array1 = [5, 12, 8, 130, 44];

const found = array1.find(element => element > 10);

console.log(found);
// Expected output: 12
'''
link:'''https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/find'''
            
        }
        findindex:{}
        flat:{}
        flatmap:{}
        foreach:{}
        includes:{}
        indexof:{}
        join:{}
        keys:{}
        lastindexof:{}
        map:{}
        pop:{}
        push:{}
        reduce:{}
        reduceright:{}
        reverse:{}
        shift:{}
        slice:{}
        some:{}
        sort:{}
        splice:{}
        tolocalestring:{}
        tostring:{}
        unshift:{}
        values:{}
    }
}